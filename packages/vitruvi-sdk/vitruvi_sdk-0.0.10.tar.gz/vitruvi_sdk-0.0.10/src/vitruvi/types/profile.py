# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .company_type_enum import CompanyTypeEnum
from .full_crew_person_role import FullCrewPersonRole
from .user_tier_enum import UserTierEnum


class Profile(pydantic.BaseModel):
    id: int
    email: str
    password: typing.Optional[str]
    first_name: str
    last_name: str
    full_name: str
    avatar: typing.Optional[str]
    account: int
    hourly_rate: typing.Optional[float]
    overtime_rate: typing.Optional[float]
    city: typing.Optional[str]
    region: typing.Optional[str]
    country: typing.Optional[str]
    address_1: typing.Optional[str] = pydantic.Field(alias="address1")
    address_2: typing.Optional[str] = pydantic.Field(alias="address2")
    post_code: typing.Optional[str]
    phone_1: typing.Optional[str] = pydantic.Field(alias="phone1")
    phone_2: typing.Optional[str] = pydantic.Field(alias="phone2")
    division: typing.Optional[str]
    notes: typing.Optional[str]
    roles: typing.Optional[typing.List[int]]
    role_names: str
    company: typing.Optional[int]
    company_name: str
    company_type: CompanyTypeEnum
    qualifications: typing.Optional[typing.List[int]]
    assigned_crews: typing.List[FullCrewPersonRole]
    supervisor_full_name: str
    supervisor: typing.Optional[int]
    employee_id: typing.Optional[str]
    crew_leads: typing.List[int]
    related_crews_names: str
    user_tier: typing.Optional[UserTierEnum]
    full_name_with_email: str
    supervisor_full_name_with_email: str
    is_active: bool = pydantic.Field(
        description=(
            "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.\n"
        )
    )
    show_coded_labor_material_only: bool

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
