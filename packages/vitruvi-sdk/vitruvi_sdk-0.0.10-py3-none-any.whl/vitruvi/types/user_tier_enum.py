# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class UserTierEnum(str, enum.Enum):
    """
    * `Office User` - Office User
    * `Field User` - Field User
    * `Read Only` - Read Only
    * `Support` - Support
    * `Service` - Service
    * `No Login` - No Login
    """

    OFFICE_USER = "Office User"
    FIELD_USER = "Field User"
    READ_ONLY = "Read Only"
    SUPPORT = "Support"
    SERVICE = "Service"
    NO_LOGIN = "No Login"

    def visit(
        self,
        office_user: typing.Callable[[], T_Result],
        field_user: typing.Callable[[], T_Result],
        read_only: typing.Callable[[], T_Result],
        support: typing.Callable[[], T_Result],
        service: typing.Callable[[], T_Result],
        no_login: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is UserTierEnum.OFFICE_USER:
            return office_user()
        if self is UserTierEnum.FIELD_USER:
            return field_user()
        if self is UserTierEnum.READ_ONLY:
            return read_only()
        if self is UserTierEnum.SUPPORT:
            return support()
        if self is UserTierEnum.SERVICE:
            return service()
        if self is UserTierEnum.NO_LOGIN:
            return no_login()
