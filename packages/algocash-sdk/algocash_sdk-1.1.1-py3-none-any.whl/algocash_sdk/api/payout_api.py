# coding: utf-8

"""
    Algocash API

    This is a Algocash API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: loganph.work@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from algocash_sdk.api_client import ApiClient


class PayoutApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_payout(self, invoice_id, amount, payer, payment_method, bank_account, url, **kwargs):  # noqa: E501
        """create payout  # noqa: E501

        create a payout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_payout(invoice_id, amount, payer, payment_method, bank_account, url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str amount: (required)
        :param Payer payer: (required)
        :param str payment_method: (required)
        :param Bank bank_account: (required)
        :param Url url: (required)
        :return: PayoutSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_payout_with_http_info(invoice_id, amount, payer, payment_method, bank_account, url, **kwargs)  # noqa: E501
        else:
            (data) = self.create_payout_with_http_info(invoice_id, amount, payer, payment_method, bank_account, url, **kwargs)  # noqa: E501
            return data

    def create_payout_with_http_info(self, invoice_id, amount, payer, payment_method, bank_account, url, **kwargs):  # noqa: E501
        """create payout  # noqa: E501

        create a payout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_payout_with_http_info(invoice_id, amount, payer, payment_method, bank_account, url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str amount: (required)
        :param Payer payer: (required)
        :param str payment_method: (required)
        :param Bank bank_account: (required)
        :param Url url: (required)
        :return: PayoutSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'amount', 'payer', 'payment_method', 'bank_account', 'url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `create_payout`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `create_payout`")  # noqa: E501
        # verify the required parameter 'payer' is set
        if ('payer' not in params or
                params['payer'] is None):
            raise ValueError("Missing the required parameter `payer` when calling `create_payout`")  # noqa: E501
        # verify the required parameter 'payment_method' is set
        if ('payment_method' not in params or
                params['payment_method'] is None):
            raise ValueError("Missing the required parameter `payment_method` when calling `create_payout`")  # noqa: E501
        # verify the required parameter 'bank_account' is set
        if ('bank_account' not in params or
                params['bank_account'] is None):
            raise ValueError("Missing the required parameter `bank_account` when calling `create_payout`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `create_payout`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        body_params = []
        local_var_files = {}
        if 'invoice_id' in params:
            body_params.append(('invoice_id', params['invoice_id']))  # noqa: E501
        if 'amount' in params:
            body_params.append(('amount', params['amount']))  # noqa: E501
        if 'payer' in params:
            body_params.append(('payer', params['payer']))  # noqa: E501
        if 'payment_method' in params:
            body_params.append(('payment_method', params['payment_method']))  # noqa: E501
        if 'bank_account' in params:
            body_params.append(('bank_account', params['bank_account']))  # noqa: E501
        if 'url' in params:
            body_params.append(('url', params['url']))  # noqa: E501

        form_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501  'multipart/form-data'

        # Authentication setting
        auth_settings = ['basicAuth', 'signatureAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayoutSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
