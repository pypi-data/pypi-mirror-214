[tool.black]
line-length = 79
target_version = ['py37', 'py38', 'py39']
include = '\.pyi?$'
skip-string-normalization = true
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | \.vscode
)
'''

[tool.coverage.run]
branch = true
source = ["ipapp"]
omit = ["site-packages"]

[tool.pytest.ini_options]
addopts = "-s -v --cov --cov-report term --cov-report=html --cov-config pyproject.toml"
testpaths = ["tests"]
filterwarnings = ["ignore::DeprecationWarning:distutils"]

[tool.isort]
line_length = 79
force_grid_wrap = 0
multi_line_output = 3
use_parentheses = true
include_trailing_comma = true

[tool.poetry]
name = "ipapp"
version = "2.0.1"
description = "InPlat application framework"
authors = ["InPlat"]
classifiers = [
    'Intended Audience :: Developers',
    'Intended Audience :: Information Technology',
    'Intended Audience :: System Administrators',
    'Operating System :: Unix',
    'Operating System :: POSIX :: Linux',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Internet',
    'License :: OSI Approved :: MIT License',
]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/inplat/ipapp"

[tool.poetry.dependencies]
python = "^3.7"
pydantic = "^1.10.2"
aiohttp = "^3.8.3"
aiozipkin = ">=0.7,<1.2"
aiojobs = "^1.1.0"
prometheus-client = ">=0.8,<0.12"
sentry-sdk = "^1.0.0"
deepmerge = ">=0.2.1,<0.4.0"
async-timeout = "^4.0.0"
pyyaml = "^5.4"
docstring-parser = ">=0.7.1,<0.9.0"
tinyrpc = "^1.0.4"
jsonschema = "^3.2.0"
uvicorn = {version = ">=0.12.1,<0.16.0", optional = true}
fastapi = {version = "^0.75.2", optional = true}
cx-Oracle = {version = "^8.0.0", optional = true}
asyncpg = {version = ">=0.22,<0.24", optional = true}
pika = {version = "^1.2.0", optional = true}
aiobotocore = {version = "^1.2.2", optional = true}
python-magic = {version = "^0.4.22", optional = true}
asyncssh = {version = "^2.3.0", extras = ["pyOpenSSL"], optional = true}
# testing
black = {version = "22.10.0", optional = true}
flake8 = {version = "3.9.2", optional = true}
mock = {version = "^4.0.2", optional = true}
mypy = {version = "0.982", optional = true}
bandit = {version = "1.7.2", optional = true}
isort = {version = "5.9.3", optional = true}
pylint = {version = "^2.13.4", optional = true}
pytest-aiohttp = {version = "^0.3.0", optional = true}
pytest = {version = "^6.1.0", optional = true}
pytest-asyncio = {version = "^0.14.0", optional = true}
pytest-cov = {version = "^2.11.0", optional = true}
coverage = {version = "^5.3", extras = ["toml"], optional = true}
Sphinx = {version = "^5.3.0", optional = true}
sphinx-rtd-theme = {version = "^1.0.0", optional = true}
docker-compose = {version = "^1.27.4", optional = true}
watchdog = {version = "^2.0.2", optional = true}
pytz = {version = "^2022.7.1", optional = true}
crontab = {version = ">=0.22.6,<0.24.0", optional = true}
aioredis = {version = "^1.3.1", optional = true}
types-docutils = {version = "0.19.1.1", optional = true}
types-pytz = {version = "^2022.7.1.2", optional = true}
types-pyyaml = {version = "6.0.12.2", optional = true}
importlib-metadata = {version = "4.13.0", optional = true}

[tool.poetry.dev-dependencies]
requests = {version = "^2.25.1", optional = true}
pytest-httpserver = "^1.0.1"
autoflake = "^1.4"

[tool.poetry.extras]
fastapi = ["uvicorn", "fastapi"]
oracle = ["cx-Oracle"]
postgres = ["asyncpg"]
redis = ["aioredis"]
rabbitmq = ["pika"]
s3 = ["aiobotocore", "python-magic"]
sftp = ["asyncssh"]
dbtm = ["asyncpg", "crontab", "pytz"]
testing = ["black", "flake8", "mock", "mypy", "bandit", "isort", "pylint", "pytest-aiohttp", "pytest",
    "pytest-asyncio", "pytest-cov", "coverage", "Sphinx", "sphinx-rtd-theme", "types-docutils", "types-pytz",
    "docker-compose", "watchdog", "types-pyyaml", "importlib-metadata"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
