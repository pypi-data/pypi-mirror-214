{"version":3,"file":"extensionManagerView.js","names":["ExtensionItem","Djblets","Config","ListItem","extend","defaults","_","extension","prototype","initialize","apply","arguments","_updateActions","_updateItemState","listenTo","get","actions","push","id","label","gettext","configURL","dbURL","url","primary","danger","setActions","itemState","set","ExtensionItemView","TableItemView","className","actionHandlers","template","getRenderContext","model","attributes","_onDisableClicked","disable","catch","error","alert","interpolate","message","_onEnableClicked","enable","_onReloadClicked","Promise","trigger","ExtensionManagerView","Backbone","View","events","listItemsCollectionType","ListItems","listItemType","listItemViewType","listViewType","TableView","list","List","collection","render","listView","el","$","ItemView","$el","removeAttr","addClass","_$listContainer","parent","reset","_onLoaded","load","items","installedExtensions","each","item","add","_reloadFull","submit"],"sources":["../../../../../../static/djblets/js/extensions/views/extensionManagerView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * An item in the list of registered extensions.\n *\n * This will contain information on the extension and actions for toggling\n * the enabled state, reloading the extension, or configuring the extension.\n */\nconst ExtensionItem = Djblets.Config.ListItem.extend({\n    defaults: _.defaults({\n        extension: null,\n    }, Djblets.Config.ListItem.prototype.defaults),\n\n    /**\n     * Initialize the item.\n     *\n     * This will set up the initial state and then listen for any changes\n     * to the extension's state (caused by enabling/disabling/reloading the\n     * extension).\n     */\n    initialize() {\n        Djblets.Config.ListItem.prototype.initialize.apply(this, arguments);\n\n        this._updateActions();\n        this._updateItemState();\n\n        this.listenTo(\n            this.get('extension'),\n            'change:loadable change:loadError change:enabled',\n            () => {\n                this._updateItemState();\n                this._updateActions();\n            });\n    },\n\n    /**\n     * Update the actions for the extension.\n     *\n     * If the extension is disabled, this will add an Enabled action.\n     *\n     * If it's enabled, but has a load error, it will add a Reload action.\n     *\n     * If it's enabled, it will provide actions for Configure and Database,\n     * if enabled by the extension, along with a Disable action.\n     */\n    _updateActions() {\n        const extension = this.get('extension');\n        const actions = [];\n\n        if (!extension.get('loadable')) {\n            /* Add an action for reloading the extension. */\n            actions.push({\n                id: 'reload',\n                label: _`Reload`,\n            });\n        } else if (extension.get('enabled')) {\n            /*\n             * Show all the actions for enabled extensions.\n             *\n             * Note that the order used is here to ensure visual alignment\n             * for most-frequently-used options.\n             */\n            const configURL = extension.get('configURL');\n            const dbURL = extension.get('dbURL');\n\n            if (dbURL) {\n                actions.push({\n                    id: 'database',\n                    label: _`Database`,\n                    url: dbURL,\n                });\n            }\n\n            if (configURL) {\n                actions.push({\n                    id: 'configure',\n                    label: _`Configure`,\n                    primary: true,\n                    url: configURL,\n                });\n            }\n\n            actions.push({\n                id: 'disable',\n                label: _`Disable`,\n                danger: true,\n            });\n        } else {\n            /* Add an action for enabling a disabled extension. */\n            actions.push({\n                id: 'enable',\n                label: _`Enable`,\n                primary: true,\n            });\n        }\n\n        this.setActions(actions);\n    },\n\n    /**\n     * Update the state of this item.\n     *\n     * This will set the \"error\", \"enabled\", or \"disabled\" state of the\n     * item, depending on the corresponding state in the extension.\n     */\n    _updateItemState() {\n        const extension = this.get('extension');\n        let itemState;\n\n        if (!extension.get('loadable')) {\n            itemState = 'error';\n        } else if (extension.get('enabled')) {\n            itemState = 'enabled';\n        } else {\n            itemState = 'disabled';\n        }\n\n        this.set('itemState', itemState);\n    },\n});\n\n\n/**\n * Displays an extension in the Manage Extensions list.\n *\n * This will show information about the extension, and provide links for\n * enabling/disabling the extension, and (depending on the extension's\n * capabilities) configuring it or viewing its database.\n */\nconst ExtensionItemView = Djblets.Config.TableItemView.extend({\n    className: 'djblets-c-extension-item djblets-c-config-forms-list__item',\n\n    actionHandlers: {\n        'disable': '_onDisableClicked',\n        'enable': '_onEnableClicked',\n        'reload': '_onReloadClicked',\n    },\n\n    template: _.template(dedent`\n        <td class=\"djblets-c-config-forms-list__item-main\">\n         <div class=\"djblets-c-extension-item__header\">\n          <h3 class=\"djblets-c-extension-item__name\"><%- name %></h3>\n          <span class=\"djblets-c-extension-item__version\"><%- version %></span>\n          <div class=\"djblets-c-extension-item__author\">\n           <% if (authorURL) { %>\n            <a href=\"<%- authorURL %>\"><%- author %></a>\n           <% } else { %>\n            <%- author %>\n           <% } %>\n          </div>\n         </div>\n         <p class=\"djblets-c-extension-item__description\">\n          <%- summary %>\n         </p>\n         <% if (!loadable) { %>\n          <pre class=\"djblets-c-extension-item__load-error\"><%- loadError %></pre>\n         <% } %>\n        </td>\n        <td class=\"djblets-c-config-forms-list__item-state\"></td>\n        <td></td>\n    `),\n\n    /**\n     * Return context data for rendering the item's template.\n     *\n     * Returns:\n     *     object:\n     *     Context data for the render.\n     */\n    getRenderContext() {\n        return this.model.get('extension').attributes;\n    },\n\n    /**\n     * Handle a click on the Disable action.\n     *\n     * This will make an asynchronous request to disable the extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the disable request. This will resolve once the\n     *     API has handled the request.\n     */\n    _onDisableClicked() {\n        return this.model.get('extension').disable()\n            .catch(error => {\n                alert(_`Failed to disable the extension: ${error.message}.`);\n            });\n    },\n\n    /**\n     * Handle a click on the Enable action.\n     *\n     * This will make an asynchronous request to enable the extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the enable request. This will resolve once the\n     *     API has handled the request.\n     */\n    _onEnableClicked() {\n        return this.model.get('extension').enable()\n            .catch(error => {\n                alert(_`Failed to enable the extension: ${error.message}.`);\n            });\n    },\n\n    /**\n     * Handle a click on the Reload action.\n     *\n     * This will trigger an event on the item that tells the extension\n     * manager to perform a full reload of all extensions, this one included.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the enable request. This will never resolve, in\n     *     practice, but is returned to enable the action's spinner until\n     *     the page reloads.\n     */\n    _onReloadClicked() {\n        return new Promise(() => this.model.trigger('needsReload'));\n    },\n});\n\n\n/**\n * Displays the interface showing all installed extensions.\n *\n * This loads the list of installed extensions and displays each in a list.\n */\nDjblets.ExtensionManagerView = Backbone.View.extend({\n    events: {\n        'click .djblets-c-extensions__reload': '_reloadFull',\n    },\n\n    listItemsCollectionType: Djblets.Config.ListItems,\n    listItemType: ExtensionItem,\n    listItemViewType: ExtensionItemView,\n    listViewType: Djblets.Config.TableView,\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.list = new Djblets.Config.List(\n            {},\n            {\n                collection: new this.listItemsCollectionType(\n                    [],\n                    {\n                        model: this.listItemType,\n                    })\n            });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     Djblets.ExtensionManagerView:\n     *     This object, for chaining.\n     */\n    render() {\n        const model = this.model;\n        const list = this.list;\n\n        this.listView = new this.listViewType({\n            el: this.$('.djblets-c-config-forms-list'),\n            model: list,\n            ItemView: this.listItemViewType,\n        });\n        this.listView.render().$el\n            .removeAttr('aria-busy')\n            .addClass('-all-items-are-multiline');\n\n        this._$listContainer = this.listView.$el.parent();\n\n        this.listenTo(model, 'loading', () => list.collection.reset());\n        this.listenTo(model, 'loaded', this._onLoaded);\n        model.load();\n\n        return this;\n    },\n\n    /**\n     * Handler for when the list of extensions is loaded.\n     *\n     * Renders each extension in the list. If the list is empty, this will\n     * display that there are no extensions installed.\n     */\n    _onLoaded() {\n        const items = this.list.collection;\n\n        this.model.installedExtensions.each(extension => {\n            const item = items.add({\n                extension: extension,\n            });\n\n            this.listenTo(item, 'needsReload', this._reloadFull);\n        });\n    },\n\n    /**\n     * Perform a full reload of the list of extensions on the server.\n     *\n     * This submits our form, which is set in the template to tell the\n     * ExtensionManager to do a full reload.\n     */\n    _reloadFull() {\n        this.el.submit();\n    },\n});\n\n\n})();\n"],"mappings":"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"}