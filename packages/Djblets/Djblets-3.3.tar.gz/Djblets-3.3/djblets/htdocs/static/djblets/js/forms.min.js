(function(){window.Djblets=window.Djblets||{};Djblets.Forms={};"use strict";Djblets.Forms.ConditionChoice=Backbone.Model.extend({defaults:{name:null,valueField:null},initialize(attributes){this.operators=new Backbone.Collection(attributes.operators,{model:Djblets.Forms.ConditionOperator,parse:true})},createValueField(fieldName){const valueField=this.get("valueField");return new valueField.viewClass(_.defaults({model:new valueField.modelClass(_.defaults({fieldName:fieldName},valueField.modelData))},valueField.viewData))},parse(data){return{id:data.id,name:data.name,valueField:Djblets.Forms.ConditionChoice.parseValueFieldData(data.valueField)}}},{parseValueFieldData(data){let valueField=null;if(data!==undefined){const fieldModelInfo=data.model;const fieldViewInfo=data.view;valueField={modelClass:Djblets.getObjectByName(fieldModelInfo.className),modelData:fieldModelInfo.data,viewClass:Djblets.getObjectByName(fieldViewInfo.className),viewData:fieldViewInfo.data}}return valueField}});"use strict";Djblets.Forms.Condition=Backbone.Model.extend({defaults:{choice:null,error:null,operator:null,valid:true,value:null},initialize(){this.on("change",()=>{const choice=this.get("choice");if(choice!==this.previous("choice")){this.set("operator",choice.operators.first());this.unset("value")}})},destroy(options){this.stopListening();this.trigger("destroy",this,this.collection,options)}});"use strict";Djblets.Forms.ConditionOperator=Backbone.Model.extend({defaults:{name:null,useValue:false,valueField:null},createValueField(fieldName){const valueField=this.get("valueField");console.assert(valueField,"This operator does not have a custom valueField.");return new valueField.viewClass(_.defaults({model:new valueField.modelClass(_.defaults({fieldName:fieldName},valueField.modelData))},valueField.viewData))},parse(data){return{id:data.id,name:data.name,useValue:data.useValue,valueField:Djblets.Forms.ConditionChoice.parseValueFieldData(data.valueField)}}});"use strict";Djblets.Forms.ConditionSet=Backbone.Model.extend({defaults:{fieldName:null,lastID:null},initialize(attributes){this.choices=new Backbone.Collection(attributes.choicesData,{model:Djblets.Forms.ConditionChoice,parse:true});const that=this;this.conditions=new Backbone.Collection(attributes.conditionsData,{model:function(attrs,options){const choice=attrs.choice||that.choices.get(attrs.choiceID);const operator=attrs.operator||(choice?choice.operators.get(attrs.operatorID):null);const lastID=that.get("lastID");const conditionID=lastID===null?0:lastID+1;that.set("lastID",conditionID);return new Djblets.Forms.Condition({id:conditionID,choice:choice,operator:operator,value:attrs.value,valid:attrs.valid,error:attrs.error},options)}})},addNewCondition(){const choice=this.choices.first();this.conditions.add({choice:choice,operator:choice.operators.first()})},parse(data){return{fieldName:data.fieldName}}});"use strict";Djblets.Forms.ConditionValueField=Backbone.Model.extend({defaults:{fieldHTML:null}});"use strict";Djblets.Forms.BaseConditionValueFieldView=Backbone.View.extend({tagName:"span",render(){this.$el.html(this.model.get("fieldHTML"));return this},setValue(value){console.assert(false,"setValue() must be implemented by this subclass.")},getValue(){console.assert(false,"getValue() must be implemented by this subclass.")}});"use strict";(function(){const BaseConditionRowView=Backbone.View.extend({tagName:"li",className:"conditions-field-row",events:{"click .conditions-field-row-delete":"_onDeleteClicked"},initialize(options){this.listenTo(this.model,"destroy",()=>{this.$el.slideUp(options.rowAnimationSpeedMS,this.remove.bind(this))})},_onDeleteClicked(e){e.stopPropagation();e.preventDefault();this.model.destroy()}});const ConditionRowView=BaseConditionRowView.extend({template:_.template(['<span class="conditions-field-action conditions-field-row-delete">\n',' <span class="fa fa-minus-circle"></span>\n',"</span>\n",'<span class="conditions-field-row-options">\n'," <% if (error) { %>",'  <ul class="error-list"><li><%- error %></li></ul>\n'," <% } %>",' <span class="conditions-field-choice"></span>\n',' <span class="conditions-field-operator"></span>\n',' <span class="conditions-field-value"></span>\n',"</span>"].join("")),events:_.extend({"change .conditions-field-choice select":"_onSelectChoiceChanged","change .conditions-field-operator select":"_onSelectOperatorChanged"},BaseConditionRowView.prototype.events),initialize(options){BaseConditionRowView.prototype.initialize.call(this,options);this.conditionSet=options.conditionSet;this._$choice=null;this._$operator=null;this._$valueWrapper=null;this._$newValue=null;this._defaultValueField=null;this._valueField=null},render(){this.$el.html(this.template(this.model.attributes));const $rowOptions=this.$el.children(".conditions-field-row-options");const fieldName=this.conditionSet.get("fieldName");const rowNum=this.model.get("id");this._$choice=$("<select/>").attr("name",`${fieldName}_choice[${rowNum}]`);this.conditionSet.choices.each(choice=>{this._$choice.append($("<option/>").val(choice.id).text(choice.get("name")))});this._$choice.appendTo($rowOptions.children(".conditions-field-choice"));this._$operator=$("<select/>").attr("name",`${fieldName}_operator[${rowNum}]`).appendTo($rowOptions.children(".conditions-field-operator"));this._$valueWrapper=$rowOptions.children(".conditions-field-value");this.listenTo(this.model,"change:choice",this._onChoiceChanged);this.listenTo(this.model,"change:operator",this._onOperatorChanged);this.listenTo(this.model,"change:value",this._onValueChanged);this._onChoiceChanged();this._onOperatorChanged();this._onValueChanged();return this},_onChoiceChanged(){const choice=this.model.get("choice");const fieldName=this.conditionSet.get("fieldName");const rowNum=this.model.get("id");this._$choice.val(choice.id);this._defaultValueField=choice.createValueField(`${fieldName}_value[${rowNum}]`);this._$operator.empty();choice.operators.each(operator=>{this._$operator.append($("<option/>").val(operator.id).text(operator.get("name")))});this._$operator.val(this.model.get("operator").id)},_onOperatorChanged(){const operator=this.model.get("operator");let newValueField;this._$operator.val(operator.id);this._$valueWrapper.setVisible(operator.get("useValue"));if(operator.get("valueField")!==null){const fieldName=this.conditionSet.get("fieldName");const rowNum=this.model.get("id");newValueField=operator.createValueField(`${fieldName}_value[${rowNum}]`)}else{newValueField=this._defaultValueField}if(newValueField!==this._valueField){if(this._$newValue!==null&&newValueField!==this._valueField){this._$newValue.remove();this._$newValue=null}this._valueField=newValueField;this._$newValue=this._valueField.render().$el.appendTo(this._$valueWrapper)}},_onValueChanged(){this._valueField.setValue(this.model.get("value"))},_onSelectChoiceChanged(){this.model.set("choice",this.conditionSet.choices.get(this._$choice.val()))},_onSelectOperatorChanged(){const choice=this.model.get("choice");this.model.set("operator",choice.operators.get(this._$operator.val()))}});const DisabledConditionRowView=BaseConditionRowView.extend({render(){const value=this.model.get("value");if(value!==null){this.$(".conditions-field-value").text(value)}return this}});Djblets.Forms.ConditionSetView=Backbone.View.extend({DEFAULT_ROW_ANIMATION_SPEED_MS:300,events:{"click .conditions-field-add-condition":"_onAddRowClicked","change #conditions_mode input":"_onConditionModeChanged"},initialize(options){this._rowAnimationSpeedMS=options.rowAnimationSpeedMS||this.DEFAULT_ROW_ANIMATION_SPEED_MS;this._$lastID=null;this._$rows=null},render(){const fieldName=this.model.get("fieldName");const conditions=this.model.conditions;this._$lastID=this.$el.children(`input[name=${fieldName}_last_id]`).bindProperty("value",this.model,"lastID");this._$mode=this.$("#conditions_mode input");this._$rowsContainer=this.$(".conditions-field-rows-container");this._$rows=this._$rowsContainer.children(".conditions-field-rows");const $rowItems=this._$rows.children();conditions.each((condition,i)=>{this._addConditionRow(condition,$rowItems[i])});this.listenTo(conditions,"add",condition=>this._addConditionRow(condition));this._onConditionModeChanged();return this},_addConditionRow(condition,$rowEl){const RowViewCls=condition.get("valid")?ConditionRowView:DisabledConditionRowView;const rowView=new RowViewCls({conditionSet:this.model,el:$rowEl,model:condition,rowAnimationSpeedMS:this._rowAnimationSpeedMS});rowView.render();if($rowEl===undefined){rowView.$el.hide().appendTo(this._$rows).slideDown(this._rowAnimationSpeedMS)}},_onAddRowClicked(e){e.stopPropagation();e.preventDefault();this.model.addNewCondition()},_onConditionModeChanged(){const mode=this._$mode.filter(":checked").val();this._$rowsContainer.setVisible(mode!=="always")}})})();"use strict";(function(){const ParentView=Djblets.Forms.BaseConditionValueFieldView;Djblets.Forms.ConditionValueFormFieldView=ParentView.extend({render(){ParentView.prototype.render.call(this);this.$input=this.$el.children().attr("name",this.model.get("fieldName"));return this},setValue(value){this.$input.val(value)},getValue(value){return this.$input.val()}})})();"use strict";(function(){const entryTemplate=_.template(`<li class="djblets-c-list-edit-widget__entry"
    data-list-index="<%- index %>">
  <%= renderedDefaultRow %>
 <a href="#" class="djblets-c-list-edit-widget__remove-item"
    role="button" title="<%- removeText %>">
   <span class="fa fa-times"></span>
 </a>
</li>`);Djblets.Forms.ListEditView=Backbone.View.extend({events:{"click .djblets-c-list-edit-widget__add-item":"_addItem","click .djblets-c-list-edit-widget__remove-item":"_removeItem"},initialize(options){this._removeText=options.removeText;this._fieldName=options.fieldName;this._renderedDefaultRow=options.renderedDefaultRow;this._numItems=0},render(){this.$el.data("djblets-list-edit-view",this);this._$list=this.$el.children(".djblets-c-list-edit-widget__entries");this._numItems=this._$list.find(".djblets-c-list-edit-widget__entry").length;$(`input[name="${this._fieldName}_num_rows"]`).val(this._numItems);this._$addBtn=this.$el.children(".djblets-c-list-edit-widget__add-item");return this},_createDefaultEntry(index){const $entry=$(entryTemplate({index:index,renderedDefaultRow:this._renderedDefaultRow,removeText:this._removeText}));this._updateEntryInputName($entry,index);$(`input[name="${this._fieldName}_num_rows"]`).val(index+1);$entry.find(".djblets-c-list-edit-widget__add-item").on("click",e=>this._addItem(e));return $entry},_updateEntryInputName($entry,index){const $inputs=$entry.find(".djblets-c-list-edit-widget__input");if($inputs.length>1){$inputs.each((idx,el)=>$(el).attr("name",`${this._fieldName}_value[${index}]_${idx}`))}else{$inputs.attr("name",`${this._fieldName}_value[${index}]`)}},_addItem(e){e.preventDefault();e.stopPropagation();this._$list.append(this._createDefaultEntry(this._numItems));this._numItems+=1},_removeItem(e){e.preventDefault();e.stopPropagation();const $target=$(e.target);const $entry=$target.closest(".djblets-c-list-edit-widget__entry");if(this._numItems>1){$entry.remove();this._numItems-=1;this._$list.find(".djblets-c-list-edit-widget__entry").each((idx,el)=>{const $el=$(el);$el.attr("data-list-index",idx);this._updateEntryInputName($el,idx)});$(`input[name="${this._fieldName}_num_rows"]`).val(this._numItems)}else{const $defaultEntry=this._createDefaultEntry(0);$entry.replaceWith($defaultEntry)}}})})();"use strict";Djblets.Forms.PrivacyConsentFieldView=Backbone.View.extend({events:{"change input":"_onConsentChanged"},initialize(options){this.options=options;const $choices=this.$(".privacy-consent-field-choices");const $allowChoice=$choices.find(".privacy-consent-field-choice-allow");const $blockChoice=$choices.find(".privacy-consent-field-choice-block");this._$allowInput=$allowChoice.children("input");this._$allowLabel=$allowChoice.children("label");this._$blockInput=$blockChoice.children("input");this._$blockLabel=$blockChoice.children("label")},render(){this._onConsentChanged();return this},_onConsentChanged(){const allowed=this._$allowInput.is(":checked");const blocked=this._$blockInput.is(":checked");this.$el.toggleClass("privacy-consent-field-allow",allowed);this.$el.toggleClass("privacy-consent-field-block",blocked);this._$allowLabel.text(allowed?this.options.allowedText:this.options.allowText);this._$blockLabel.text(blocked?this.options.blockedText:this.options.blockText)}})}).call(this);
