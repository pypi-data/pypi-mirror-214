# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.remove_none_from_headers import remove_none_from_headers
from ...errors.forbidden_error import ForbiddenError
from ...errors.not_found_error import NotFoundError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...errors.unauthorized_error import UnauthorizedError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.api_error_rate_limit_exceeded_response import ApiErrorRateLimitExceededResponse
from ...types.get_account_numbers_response import GetAccountNumbersResponse
from ...types.get_account_response import GetAccountResponse
from ...types.get_accounts_response import GetAccountsResponse
from ...types.get_user_accounts_response import GetUserAccountsResponse
from ...types.link_error_bad_state_response import LinkErrorBadStateResponse
from ...types.supported_version import SupportedVersion


class AccountsClient:
    def __init__(self, *, environment: str, moneykit_version: typing.Optional[SupportedVersion] = None, token: str):
        self._environment = environment
        self.moneykit_version = moneykit_version
        self._token = token

    def get_accounts(
        self, id: str, *, account_ids: typing.Union[typing.Optional[str], typing.List[str]]
    ) -> GetAccountsResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"links/{id}/accounts"),
            params={"account_ids": account_ids},
            headers=remove_none_from_headers(
                {
                    "moneykit-version": self.moneykit_version,
                    "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_account_numbers(self, id: str) -> GetAccountNumbersResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"links/{id}/accounts/numbers"),
            headers=remove_none_from_headers(
                {
                    "moneykit-version": self.moneykit_version,
                    "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountNumbersResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_account(self, id: str, account_id: str) -> GetAccountResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"links/{id}/accounts/{account_id}"),
            headers=remove_none_from_headers(
                {
                    "moneykit-version": self.moneykit_version,
                    "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_user_accounts(
        self,
        id: str,
        *,
        account_id: typing.Union[typing.Optional[str], typing.List[str]],
        institution_id: typing.Union[typing.Optional[str], typing.List[str]],
    ) -> GetUserAccountsResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"users/{id}/accounts"),
            params={"account_id": account_id, "institution_id": institution_id},
            headers=remove_none_from_headers(
                {
                    "moneykit-version": self.moneykit_version,
                    "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetUserAccountsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAccountsClient:
    def __init__(self, *, environment: str, moneykit_version: typing.Optional[SupportedVersion] = None, token: str):
        self._environment = environment
        self.moneykit_version = moneykit_version
        self._token = token

    async def get_accounts(
        self, id: str, *, account_ids: typing.Union[typing.Optional[str], typing.List[str]]
    ) -> GetAccountsResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"links/{id}/accounts"),
                params={"account_ids": account_ids},
                headers=remove_none_from_headers(
                    {
                        "moneykit-version": self.moneykit_version,
                        "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_account_numbers(self, id: str) -> GetAccountNumbersResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"links/{id}/accounts/numbers"),
                headers=remove_none_from_headers(
                    {
                        "moneykit-version": self.moneykit_version,
                        "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountNumbersResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_account(self, id: str, account_id: str) -> GetAccountResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"links/{id}/accounts/{account_id}"),
                headers=remove_none_from_headers(
                    {
                        "moneykit-version": self.moneykit_version,
                        "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_user_accounts(
        self,
        id: str,
        *,
        account_id: typing.Union[typing.Optional[str], typing.List[str]],
        institution_id: typing.Union[typing.Optional[str], typing.List[str]],
    ) -> GetUserAccountsResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"users/{id}/accounts"),
                params={"account_id": account_id, "institution_id": institution_id},
                headers=remove_none_from_headers(
                    {
                        "moneykit-version": self.moneykit_version,
                        "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetUserAccountsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
