openapi: "3.0.1"
info:
  title: "Open Finance Africa / Payment Score API"
  description: "<p>Introducing Payment Score API - designed to standardize credit scoring in Africa and beyond ðŸš€ <br/><br/>

This API aims to revolutionize the way financial institutions and lenders assess the creditworthiness of individuals and businesses.<br/><br/>

Banks already have siloed account data (debits and credits) but lack information about external payment schedules (e.g. if a rent payment was late or not). 
Additionally, the process of determining creditworthiness has not been transparent. <br/><br/>

The goal of this API is to enable financial institutions and lenders (or anyone!) to make more informed lending decisions. 
With access to accurate credit scores, lenders can better assess the risk associated with lending to a particular individual or business, 
ultimately leading to more responsible lending practices and reduced default rates. <br/><br/>

The first version of this API is hopefully just the tip of the iceberg. It simply ingests payment terms and history, and then outputs a score. <br/><br/>

For detailed information on how this is done, visit the Github page on https://github.com/openfinanceafrica/scoreapi

We invite all interested parties to try our API and contribute to its ongoing development. By working together, we can create a standardized and transparent credit scoring system that benefits both lenders and borrowers alike!</p>"
  version: "1.0.0"
servers:
  - url: "https://api.openfinance.africa"
paths:
  /score:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScoreInput"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"
components:
  schemas:
    Score:
      type: "object"
      properties:
        overallScore:
          type: "number"
          description:
            "The overall Payment Score. The range is between 0 and 1 (with\
            \ 1 being an excellent score)"
        paidStreak:
          type: "integer"
          description:
            "This number represents the longest continous on-time (fully\
            \ paid) number of payments. E.g. if on-time payments were made 5 months\
            \ in a row, this number will be 5"
          format: "int32"
        overDueStreak:
          type: "integer"
          description:
            "This number represents the longest continous overdue number\
            \ of payments. E.g. if payments were overdue for 2 months in a row, this\
            \ number will be 2"
          format: "int32"
        scoredMonths:
          type: "array"
          description: "An array of scored months"
          items:
            $ref: "#/components/schemas/ScoredMonth"
        expectedPaymentAmount:
          minimum: 1
          type: "integer"
          description: "The payment amount expected"
          format: "int32"
        balance:
          type: "integer"
          description:
            "The total remaining balance based on payment history and the amount expected to have been paid. This can be a negative number if money is owed or a positive number in cases of overpayment"
          format: "int32"
      description:
        "The Payment Score which includes an overall score and scored months\
        \ that correspond to the input that was provided."
    Payment:
      type: "object"
      properties:
        amount:
          minimum: 1
          type: "number"
          description: "The amount that was paid."
        date:
          type: "string"
          description:
            "The date that the payment was made. The format should be date-time\
            \ as defined by \"RFC 3339, section 5.6\" (https://tools.ietf.org/html/rfc3339#section-5.6)"
          format: "date-time"
      description: "Defines a payment made with a date and amount"
    ScoredMonth:
      type: "object"
      properties:
        status:
          $ref: "#/components/schemas/PaymentStatus"
        score:
          type: "number"
          description: "The Payment Score of the month."
        dueDate:
          type: "string"
          description:
            "The day of the month that a payment is supposed to be made.\
            \ The format is a full-date as defined by \"RFC 3339, section 5.6\" (https://tools.ietf.org/html/rfc3339#section-5.6).\
            \ While the format used is a full date (with time included), only the\
            \ day, month, and year are relevant. E.g. if payment was due on March\
            \ 1st 2023, the time that the payment is expected is within that day."
          format: "date-time"
        balance:
          type: "number"
          description:
            "The payment balance of the month. This can be positive if\
            \ there was overpayment or negative if arrears exist."
      description:
        "A scored month that is combined with others to provide an overall\
        \ score. It corresponds to an expected payment date that was provided in the\
        \ input."
    Error:
      required:
        - "code"
        - "message"
      type: "object"
      properties:
        code:
          type: "string"
        message:
          type: "string"
    ScoreInput:
      type: "object"
      properties:
        paymentStartDate:
          type: "string"
          description:
            "The date that the payments are supposted to start. The format\
            \ should be full-date as defined by \"RFC 3339, section 5.6\" (https://tools.ietf.org/html/rfc3339#section-5.6).\
            \ While the format used is a full date (with time included), only the\
            \ day, month, and year are relevant. E.g. if the start date is January\
            \ 1st 2023, payments are expected to start anytime within that day."
          format: "date-time"
        paymentEndDate:
          type: "string"
          description:
            "The date that the payments are supposted to end. The format\
            \ should be full-date as defined by \"RFC 3339, section 5.6\" (https://tools.ietf.org/html/rfc3339#section-5.6).\
            \ While the format used is a full date (with time included), only the\
            \ day, month, and year are relevant. E.g. if the end date is December\
            \ 1st 2024, payments are expected to end within that day."
          format: "date-time"
        expectedPaymentDay:
          maximum: 31
          minimum: 1
          type: "integer"
          description:
            "The expected day of the month that the payments are supposed\
            \ to be made. E.g. \"1\" if the payments are supposed to be made every\
            \ 1st of the month"
          format: "int32"
        expectedPaymentAmount:
          minimum: 1
          type: "integer"
          description: "The payment amount expected"
          format: "int32"
        payments:
          type: "array"
          description: "An array of payments that have been made"
          items:
            $ref: "#/components/schemas/Payment"
        reference:
          minimum: 1
          type: "string"
          description: "Not currently used. In future this will be an optional field to send a custom identifier that can be used to query previous API calls"
        scoreBeforeStartDate:
          minimum: 1
          type: "boolean"
          description: "If this is false, and the payment start date is before the current date, no score will be returned. Set this to true if you want to override this behavior"
      description:
        "Input required to get a score. It includes the terms of payment\
        \ (e.g. lease details) and the payments that have been made"
    PaymentStatus:
      type: "string"
      enum:
        - "PAID"
        - "OVERPAID"
        - "OVERDUE"
