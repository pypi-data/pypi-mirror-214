"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1 (v1)
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bimdata_api_client.api_client import ApiClient, Endpoint as _Endpoint
from bimdata_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bimdata_api_client.model.check_plan import CheckPlan
from bimdata_api_client.model.check_plan_request import CheckPlanRequest
from bimdata_api_client.model.checker_result import CheckerResult
from bimdata_api_client.model.checker_result_request import CheckerResultRequest
from bimdata_api_client.model.ifc_checker import IfcChecker
from bimdata_api_client.model.ifc_checker_request import IfcCheckerRequest
from bimdata_api_client.model.patched_check_plan_request import PatchedCheckPlanRequest
from bimdata_api_client.model.patched_checker_result_request import PatchedCheckerResultRequest
from bimdata_api_client.model.patched_ifc_checker_request import PatchedIfcCheckerRequest
from bimdata_api_client.model.patched_rule_component_request import PatchedRuleComponentRequest
from bimdata_api_client.model.patched_rule_request import PatchedRuleRequest
from bimdata_api_client.model.patched_ruleset_request import PatchedRulesetRequest
from bimdata_api_client.model.rule import Rule
from bimdata_api_client.model.rule_component import RuleComponent
from bimdata_api_client.model.rule_component_request import RuleComponentRequest
from bimdata_api_client.model.rule_request import RuleRequest
from bimdata_api_client.model.ruleset import Ruleset
from bimdata_api_client.model.ruleset_request import RulesetRequest


class CheckerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_checker_endpoint = _Endpoint(
            settings={
                'response_type': (IfcChecker,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker',
                'operation_id': 'create_checker',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'model_pk',
                    'project_pk',
                    'ifc_checker_request',
                ],
                'required': [
                    'cloud_pk',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'ifc_checker_request':
                        (IfcCheckerRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                    'ifc_checker_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_checker_result_endpoint = _Endpoint(
            settings={
                'response_type': (CheckerResult,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result',
                'operation_id': 'create_checker_result',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'checker_pk',
                    'cloud_pk',
                    'model_pk',
                    'project_pk',
                    'checker_result_request',
                ],
                'required': [
                    'checker_pk',
                    'cloud_pk',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'checker_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'checker_result_request':
                        (CheckerResultRequest,),
                },
                'attribute_map': {
                    'checker_pk': 'checker_pk',
                    'cloud_pk': 'cloud_pk',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'checker_pk': 'path',
                    'cloud_pk': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                    'checker_result_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_checkplan_endpoint = _Endpoint(
            settings={
                'response_type': (CheckPlan,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan',
                'operation_id': 'create_checkplan',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'check_plan_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'check_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'check_plan_request':
                        (CheckPlanRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'check_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_rule_endpoint = _Endpoint(
            settings={
                'response_type': (Rule,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule',
                'operation_id': 'create_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'ruleset_pk',
                    'rule_request',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'ruleset_pk',
                    'rule_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                    'rule_request':
                        (RuleRequest,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'ruleset_pk': 'path',
                    'rule_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_rule_component_endpoint = _Endpoint(
            settings={
                'response_type': (RuleComponent,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent',
                'operation_id': 'create_rule_component',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                    'rule_component_request',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'rule_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                    'rule_component_request':
                        (RuleComponentRequest,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'rule_pk': 'rule_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'rule_pk': 'path',
                    'ruleset_pk': 'path',
                    'rule_component_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_ruleset_endpoint = _Endpoint(
            settings={
                'response_type': (Ruleset,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset',
                'operation_id': 'create_ruleset',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'ruleset_request',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'ruleset_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'ruleset_request':
                        (RulesetRequest,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'ruleset_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.delete_checker_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}',
                'operation_id': 'delete_checker',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_checker_result_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}',
                'operation_id': 'delete_checker_result',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'checker_pk',
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'required': [
                    'checker_pk',
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'checker_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'checker_pk': 'checker_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'checker_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_checkplan_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}',
                'operation_id': 'delete_checkplan',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_rule_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}',
                'operation_id': 'delete_rule',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ruleset_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'ruleset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_rule_component_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}',
                'operation_id': 'delete_rule_component',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'rule_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'rule_pk': 'rule_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'rule_pk': 'path',
                    'ruleset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_ruleset_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}',
                'operation_id': 'delete_ruleset',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_checker_endpoint = _Endpoint(
            settings={
                'response_type': (IfcChecker,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}',
                'operation_id': 'get_checker',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_checker_result_endpoint = _Endpoint(
            settings={
                'response_type': (CheckerResult,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}',
                'operation_id': 'get_checker_result',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'checker_pk',
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'required': [
                    'checker_pk',
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'checker_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'checker_pk': 'checker_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'checker_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_checker_results_endpoint = _Endpoint(
            settings={
                'response_type': ([CheckerResult],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result',
                'operation_id': 'get_checker_results',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'checker_pk',
                    'cloud_pk',
                    'model_pk',
                    'project_pk',
                ],
                'required': [
                    'checker_pk',
                    'cloud_pk',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'checker_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'checker_pk': 'checker_pk',
                    'cloud_pk': 'cloud_pk',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'checker_pk': 'path',
                    'cloud_pk': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_checkers_endpoint = _Endpoint(
            settings={
                'response_type': ([IfcChecker],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker',
                'operation_id': 'get_checkers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'model_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_checkplan_endpoint = _Endpoint(
            settings={
                'response_type': (CheckPlan,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}',
                'operation_id': 'get_checkplan',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_checkplans_endpoint = _Endpoint(
            settings={
                'response_type': ([CheckPlan],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan',
                'operation_id': 'get_checkplans',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_rule_endpoint = _Endpoint(
            settings={
                'response_type': (Rule,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}',
                'operation_id': 'get_rule',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ruleset_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'ruleset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_rule_component_endpoint = _Endpoint(
            settings={
                'response_type': (RuleComponent,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}',
                'operation_id': 'get_rule_component',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'rule_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'rule_pk': 'rule_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'rule_pk': 'path',
                    'ruleset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_rule_components_endpoint = _Endpoint(
            settings={
                'response_type': ([RuleComponent],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent',
                'operation_id': 'get_rule_components',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'rule_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'rule_pk': 'rule_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'rule_pk': 'path',
                    'ruleset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_rules_endpoint = _Endpoint(
            settings={
                'response_type': ([Rule],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule',
                'operation_id': 'get_rules',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'ruleset_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'ruleset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ruleset_endpoint = _Endpoint(
            settings={
                'response_type': (Ruleset,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}',
                'operation_id': 'get_ruleset',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_rulesets_endpoint = _Endpoint(
            settings={
                'response_type': ([Ruleset],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset',
                'operation_id': 'get_rulesets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.launch_new_check_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}/launch-check',
                'operation_id': 'launch_new_check',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                    'ifc_checker_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'ifc_checker_request':
                        (IfcCheckerRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                    'ifc_checker_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_checker_endpoint = _Endpoint(
            settings={
                'response_type': (IfcChecker,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}',
                'operation_id': 'update_checker',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                    'patched_ifc_checker_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_ifc_checker_request':
                        (PatchedIfcCheckerRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                    'patched_ifc_checker_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_checker_result_endpoint = _Endpoint(
            settings={
                'response_type': (CheckerResult,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}',
                'operation_id': 'update_checker_result',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'checker_pk',
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                    'patched_checker_result_request',
                ],
                'required': [
                    'checker_pk',
                    'cloud_pk',
                    'id',
                    'model_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'checker_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'model_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_checker_result_request':
                        (PatchedCheckerResultRequest,),
                },
                'attribute_map': {
                    'checker_pk': 'checker_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'model_pk': 'model_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'checker_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'model_pk': 'path',
                    'project_pk': 'path',
                    'patched_checker_result_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_checkplan_endpoint = _Endpoint(
            settings={
                'response_type': (CheckPlan,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}',
                'operation_id': 'update_checkplan',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_check_plan_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_check_plan_request':
                        (PatchedCheckPlanRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_check_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_rule_endpoint = _Endpoint(
            settings={
                'response_type': (Rule,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}',
                'operation_id': 'update_rule',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ruleset_pk',
                    'patched_rule_request',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                    'patched_rule_request':
                        (PatchedRuleRequest,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'ruleset_pk': 'path',
                    'patched_rule_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_rule_component_endpoint = _Endpoint(
            settings={
                'response_type': (RuleComponent,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}',
                'operation_id': 'update_rule_component',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                    'patched_rule_component_request',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'rule_pk',
                    'ruleset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'rule_pk':
                        (int,),
                    'ruleset_pk':
                        (int,),
                    'patched_rule_component_request':
                        (PatchedRuleComponentRequest,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'rule_pk': 'rule_pk',
                    'ruleset_pk': 'ruleset_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'rule_pk': 'path',
                    'ruleset_pk': 'path',
                    'patched_rule_component_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_ruleset_endpoint = _Endpoint(
            settings={
                'response_type': (Ruleset,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}',
                'operation_id': 'update_ruleset',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_ruleset_request',
                ],
                'required': [
                    'check_plan_pk',
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'check_plan_pk':
                        (int,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_ruleset_request':
                        (PatchedRulesetRequest,),
                },
                'attribute_map': {
                    'check_plan_pk': 'check_plan_pk',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'check_plan_pk': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_ruleset_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def create_checker(
        self,
        cloud_pk,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Create a checker to a model  # noqa: E501

        A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_checker(cloud_pk, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            ifc_checker_request (IfcCheckerRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            IfcChecker
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.create_checker_endpoint.call_with_http_info(**kwargs)

    def create_checker_result(
        self,
        checker_pk,
        cloud_pk,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Create a CheckerResult  # noqa: E501

        TCreate a CheckerResult  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_checker_result(checker_pk, cloud_pk, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            checker_pk (int): A unique integer value identifying this ifc checker.
            cloud_pk (int): A unique integer value identifying this cloud.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            checker_result_request (CheckerResultRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CheckerResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['checker_pk'] = \
            checker_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.create_checker_result_endpoint.call_with_http_info(**kwargs)

    def create_checkplan(
        self,
        cloud_pk,
        project_pk,
        check_plan_request,
        **kwargs
    ):
        """Create a Checkplan  # noqa: E501

        TCreate a Checkplan  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_checkplan(cloud_pk, project_pk, check_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            check_plan_request (CheckPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CheckPlan
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['check_plan_request'] = \
            check_plan_request
        return self.create_checkplan_endpoint.call_with_http_info(**kwargs)

    def create_rule(
        self,
        check_plan_pk,
        cloud_pk,
        project_pk,
        ruleset_pk,
        rule_request,
        **kwargs
    ):
        """Create a Rule  # noqa: E501

        TCreate a Rule  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_rule(check_plan_pk, cloud_pk, project_pk, ruleset_pk, rule_request, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            ruleset_pk (int): A unique integer value identifying this ruleset.
            rule_request (RuleRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Rule
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        kwargs['rule_request'] = \
            rule_request
        return self.create_rule_endpoint.call_with_http_info(**kwargs)

    def create_rule_component(
        self,
        check_plan_pk,
        cloud_pk,
        project_pk,
        rule_pk,
        ruleset_pk,
        **kwargs
    ):
        """Create a RuleComponent  # noqa: E501

        TCreate a RuleComponent  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_rule_component(check_plan_pk, cloud_pk, project_pk, rule_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            rule_pk (int): A unique integer value identifying this rule.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            rule_component_request (RuleComponentRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            RuleComponent
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['rule_pk'] = \
            rule_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.create_rule_component_endpoint.call_with_http_info(**kwargs)

    def create_ruleset(
        self,
        check_plan_pk,
        cloud_pk,
        project_pk,
        ruleset_request,
        **kwargs
    ):
        """Create a Ruleset  # noqa: E501

        TCreate a Ruleset  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_ruleset(check_plan_pk, cloud_pk, project_pk, ruleset_request, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            ruleset_request (RulesetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Ruleset
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['ruleset_request'] = \
            ruleset_request
        return self.create_ruleset_endpoint.call_with_http_info(**kwargs)

    def delete_checker(
        self,
        cloud_pk,
        id,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Delete a checker of a model  # noqa: E501

        A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_checker(cloud_pk, id, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this ifc checker.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_checker_endpoint.call_with_http_info(**kwargs)

    def delete_checker_result(
        self,
        checker_pk,
        cloud_pk,
        id,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Delete a CheckerResult  # noqa: E501

        Delete a CheckerResult  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_checker_result(checker_pk, cloud_pk, id, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            checker_pk (int): A unique integer value identifying this ifc checker.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this checker result.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['checker_pk'] = \
            checker_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_checker_result_endpoint.call_with_http_info(**kwargs)

    def delete_checkplan(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a Checkplan  # noqa: E501

        Delete a Checkplan  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_checkplan(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this check plan.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_checkplan_endpoint.call_with_http_info(**kwargs)

    def delete_rule(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        ruleset_pk,
        **kwargs
    ):
        """Delete a Rule  # noqa: E501

        Delete a Rule  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_rule(check_plan_pk, cloud_pk, id, project_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this rule.
            project_pk (int): A unique integer value identifying this project.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.delete_rule_endpoint.call_with_http_info(**kwargs)

    def delete_rule_component(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        rule_pk,
        ruleset_pk,
        **kwargs
    ):
        """Delete a RuleComponent  # noqa: E501

        Delete a RuleComponent  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_rule_component(check_plan_pk, cloud_pk, id, project_pk, rule_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this rule component.
            project_pk (int): A unique integer value identifying this project.
            rule_pk (int): A unique integer value identifying this rule.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['rule_pk'] = \
            rule_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.delete_rule_component_endpoint.call_with_http_info(**kwargs)

    def delete_ruleset(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a Ruleset  # noqa: E501

        Delete a Ruleset  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ruleset(check_plan_pk, cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this ruleset.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_ruleset_endpoint.call_with_http_info(**kwargs)

    def get_checker(
        self,
        cloud_pk,
        id,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a checker of a model  # noqa: E501

        A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_checker(cloud_pk, id, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this ifc checker.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            IfcChecker
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_checker_endpoint.call_with_http_info(**kwargs)

    def get_checker_result(
        self,
        checker_pk,
        cloud_pk,
        id,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve one CheckerResult  # noqa: E501

        Retrieve one CheckerResult  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_checker_result(checker_pk, cloud_pk, id, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            checker_pk (int): A unique integer value identifying this ifc checker.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this checker result.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CheckerResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['checker_pk'] = \
            checker_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_checker_result_endpoint.call_with_http_info(**kwargs)

    def get_checker_results(
        self,
        checker_pk,
        cloud_pk,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all CheckerResults  # noqa: E501

        Retrieve all CheckerResults  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_checker_results(checker_pk, cloud_pk, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            checker_pk (int): A unique integer value identifying this ifc checker.
            cloud_pk (int): A unique integer value identifying this cloud.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CheckerResult]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['checker_pk'] = \
            checker_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_checker_results_endpoint.call_with_http_info(**kwargs)

    def get_checkers(
        self,
        cloud_pk,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all checkers of a model  # noqa: E501

        A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_checkers(cloud_pk, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [IfcChecker]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_checkers_endpoint.call_with_http_info(**kwargs)

    def get_checkplan(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve one Checkplan  # noqa: E501

        Retrieve one Checkplan  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_checkplan(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this check plan.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CheckPlan
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_checkplan_endpoint.call_with_http_info(**kwargs)

    def get_checkplans(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all Checkplans  # noqa: E501

        Retrieve all Checkplans  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_checkplans(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CheckPlan]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_checkplans_endpoint.call_with_http_info(**kwargs)

    def get_rule(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        ruleset_pk,
        **kwargs
    ):
        """Retrieve one Rule  # noqa: E501

        Retrieve one Rule  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rule(check_plan_pk, cloud_pk, id, project_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this rule.
            project_pk (int): A unique integer value identifying this project.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Rule
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.get_rule_endpoint.call_with_http_info(**kwargs)

    def get_rule_component(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        rule_pk,
        ruleset_pk,
        **kwargs
    ):
        """Retrieve one RuleComponent  # noqa: E501

        Retrieve one RuleComponent  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rule_component(check_plan_pk, cloud_pk, id, project_pk, rule_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this rule component.
            project_pk (int): A unique integer value identifying this project.
            rule_pk (int): A unique integer value identifying this rule.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            RuleComponent
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['rule_pk'] = \
            rule_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.get_rule_component_endpoint.call_with_http_info(**kwargs)

    def get_rule_components(
        self,
        check_plan_pk,
        cloud_pk,
        project_pk,
        rule_pk,
        ruleset_pk,
        **kwargs
    ):
        """Retrieve all RuleComponents  # noqa: E501

        Retrieve all RuleComponents  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rule_components(check_plan_pk, cloud_pk, project_pk, rule_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            rule_pk (int): A unique integer value identifying this rule.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [RuleComponent]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['rule_pk'] = \
            rule_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.get_rule_components_endpoint.call_with_http_info(**kwargs)

    def get_rules(
        self,
        check_plan_pk,
        cloud_pk,
        project_pk,
        ruleset_pk,
        **kwargs
    ):
        """Retrieve all Rules  # noqa: E501

        Retrieve all Rules  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules(check_plan_pk, cloud_pk, project_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Rule]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.get_rules_endpoint.call_with_http_info(**kwargs)

    def get_ruleset(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve one Ruleset  # noqa: E501

        Retrieve one Ruleset  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ruleset(check_plan_pk, cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this ruleset.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Ruleset
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_ruleset_endpoint.call_with_http_info(**kwargs)

    def get_rulesets(
        self,
        check_plan_pk,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all Rulesets  # noqa: E501

        Retrieve all Rulesets  Required scopes: check:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rulesets(check_plan_pk, cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Ruleset]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_rulesets_endpoint.call_with_http_info(**kwargs)

    def launch_new_check(
        self,
        cloud_pk,
        id,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Launch a new check on the model  # noqa: E501

        A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.launch_new_check(cloud_pk, id, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this ifc checker.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            ifc_checker_request (IfcCheckerRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.launch_new_check_endpoint.call_with_http_info(**kwargs)

    def update_checker(
        self,
        cloud_pk,
        id,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of a checker of a model  # noqa: E501

        A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_checker(cloud_pk, id, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this ifc checker.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_ifc_checker_request (PatchedIfcCheckerRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            IfcChecker
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_checker_endpoint.call_with_http_info(**kwargs)

    def update_checker_result(
        self,
        checker_pk,
        cloud_pk,
        id,
        model_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of a CheckerResult  # noqa: E501

        Update some fields of a CheckerResult  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_checker_result(checker_pk, cloud_pk, id, model_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            checker_pk (int): A unique integer value identifying this ifc checker.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this checker result.
            model_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_checker_result_request (PatchedCheckerResultRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CheckerResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['checker_pk'] = \
            checker_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['model_pk'] = \
            model_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_checker_result_endpoint.call_with_http_info(**kwargs)

    def update_checkplan(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of a Checkplan  # noqa: E501

        Update some fields of a Checkplan  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_checkplan(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this check plan.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_check_plan_request (PatchedCheckPlanRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CheckPlan
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_checkplan_endpoint.call_with_http_info(**kwargs)

    def update_rule(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        ruleset_pk,
        **kwargs
    ):
        """Update some fields of a Rule  # noqa: E501

        Update some fields of a Rule  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_rule(check_plan_pk, cloud_pk, id, project_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this rule.
            project_pk (int): A unique integer value identifying this project.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            patched_rule_request (PatchedRuleRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Rule
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.update_rule_endpoint.call_with_http_info(**kwargs)

    def update_rule_component(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        rule_pk,
        ruleset_pk,
        **kwargs
    ):
        """Update some fields of a RuleComponent  # noqa: E501

        Update some fields of a RuleComponent  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_rule_component(check_plan_pk, cloud_pk, id, project_pk, rule_pk, ruleset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this rule component.
            project_pk (int): A unique integer value identifying this project.
            rule_pk (int): A unique integer value identifying this rule.
            ruleset_pk (int): A unique integer value identifying this ruleset.

        Keyword Args:
            patched_rule_component_request (PatchedRuleComponentRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            RuleComponent
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['rule_pk'] = \
            rule_pk
        kwargs['ruleset_pk'] = \
            ruleset_pk
        return self.update_rule_component_endpoint.call_with_http_info(**kwargs)

    def update_ruleset(
        self,
        check_plan_pk,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of a Ruleset  # noqa: E501

        Update some fields of a Ruleset  Required scopes: check:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ruleset(check_plan_pk, cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            check_plan_pk (int): A unique integer value identifying this check plan.
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this ruleset.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_ruleset_request (PatchedRulesetRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Ruleset
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['check_plan_pk'] = \
            check_plan_pk
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_ruleset_endpoint.call_with_http_info(**kwargs)

