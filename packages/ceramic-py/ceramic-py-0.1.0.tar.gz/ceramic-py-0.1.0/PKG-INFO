Metadata-Version: 2.1
Name: ceramic-py
Version: 0.1.0
Summary: Python client for ceramic streams.
Home-page: https://github.com/valory-xyz/ceramic-python-client.git
Author: Valory AG
License: Apache-2.0
Project-URL: Bug Reports, https://github.com/valory-xyz/ceramic-python-client/issues
Project-URL: Source, https://github.com/valory/ceramic-python-client
Classifier: Environment :: Console
Classifier: Environment :: Web Environment
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Communications
Classifier: Topic :: Internet
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development
Classifier: Topic :: System
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE

# Python client for ceramic

A simple Ceramic Network client written in Python.

This Ceramic client implements the payload building, encoding and signing needed to interact with the [Ceramic Network](https://ceramic.network/).

# Run the example

The example in this repository creates a new stream in a remote Ceramic node. This stream is initialized with the following data: `{"hello": "world"}`. It then retrieves the data, submits an update request to change that data to `{"foo": "baz"}` and retrieves the data again to prove that the update was successful.

> Note: the Ceramic node used in this examples should be used for testing purposes only. All the data pinned to that node is wiped periodically.

* Install [pipenv](https://pipenv.pypa.io/en/latest/).
* Generate the virtual environment:

    ```
    make new_env
    ```
* Run the example:
    ```
    python example.py
    ```
    You should see an output similar to the following:

    ```
    Created stream kjzl6cwe1jw147sv2ak3kksfgs14gc3jgjhu3mfnwn534l89joxi2tulv0ci14k
    Current data is {'hello': 'world'}
    Updated stream kjzl6cwe1jw147sv2ak3kksfgs14gc3jgjhu3mfnwn534l89joxi2tulv0ci14k
    Current data is {'foo': 'baz'}
    ```
