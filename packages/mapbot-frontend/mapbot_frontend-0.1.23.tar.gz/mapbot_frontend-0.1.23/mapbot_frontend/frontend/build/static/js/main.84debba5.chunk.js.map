{"version":3,"sources":["styles.tsx","types.tsx","interaction_handling.tsx","mapbox.tsx","utilities.tsx","index.tsx"],"names":["so_stylish","Raster","constructor","filename","height","width","src_crs","src_transform","crs","bounds","base_dir","transform","raster_type","__dict__","this","png_filename","replace","CartographerState","location","zoom","viewport_bounds","rasters","feature_collection","pointclouds","unique_labels","selected_label","type","features","instance","data","cartographerData","args","isValidCartographerData","Error","JSON","stringify","getInstance","map","rasterData","console","log","every","key","Object","prototype","hasOwnProperty","call","updateViewportFromMap","cUR","unproject","toArray","coordinates","center","getZoom","flat","raster","SliderOverlayControl","sourceIds","container","document","createElement","className","createSliderOverlays","sliders","mapOverlay","style","forEach","sourceId","mapOverlayInner","display","label","length","textContent","shortenedsourceId","substring","title","input","sliderId","id","min","max","step","startsWith","value","appendChild","addEventListener","e","target","window","getLayer","setPaintProperty","parseInt","onAdd","onRemove","_this$container$paren","parentNode","removeChild","async","addMapillaryFeature","featureCollectionSubset","filter","feature","properties","description","source","getSource","setData","addSource","img","Image","onload","addImage","addLayer","layout","svgUrl","concat","fetch","then","response","text","svgContent","encodedSvg","btoa","dataUri","src","catch","error","addGeoJSONLayers","featureCollection","addedSourceIds","Set","_feature$properties","add","_featureCollectionSub","fillColor","color","paint","buildColorPalette","colorList","palette","index","require","config","mapboxgl","accessToken","process","MAPBOX_API_KEY","MAPILLARY_API_KEY","styleLoaded","updateBackendWithState","Streamlit","setComponentValue","state","addRasterToMap","url","sources","setMapHeight","parent","innerHeight","getElementById","updateMapWithRasters","removeLayer","removeSource","delete","removeRasters","i","has","rasterSourceIds","sliderOverlayControl","addControl","initializeMap","Map","LngLat","draw","MapboxDraw","displayControlsDefault","controls","styles","userProperties","map_initialized","draw_ctrl_visible","on","tileSize","maxzoom","setTerrain","exaggeration","push","vectorSourceIds","Array","from","getAll","ScaleControl","maxWidth","unit","events","RENDER_EVENT","event","detail","initializeFromEvent","removeControl","new_draw","polygon","trash","combine_features","uncombine_features","buildDrawPlugin","changed","block","getElementsByClassName","cssText","setComponentReady","setFrameHeight"],"mappings":"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","file":"static/js/main.84debba5.chunk.js","sourcesContent":["export const so_stylish = [\n    {\n      'id': 'fill-it',\n      'type': 'fill',\n      'filter': ['all', ['==', '$type', 'Polygon'], ['!=', 'mode', 'static']],\n      'paint': {\n        'fill-color': ['get', 'user_color'],\n        'fill-outline-color': '#000000',\n        'fill-opacity': 0.3,\n      }\n    },\n\n  // {\n  //   'id': 'gl-draw-polygon-fill-inactive',\n  //   'type': 'fill',\n  //   'filter': ['all',\n  //     ['==', 'active', 'false'],\n  //     ['==', '$type', 'Polygon'],\n  //     ['!=', 'mode', 'static']\n  //   ],\n  //   'paint': {\n  //     'fill-color': '#3bb2d0',\n  //     'fill-outline-color': '#3bb2d0',\n  //     'fill-opacity': 0.1\n  //   }\n  // },\n  {\n    'id': 'gl-draw-polygon-fill-active',\n    'type': 'fill',\n    'filter': ['all', ['==', 'active', 'true'], ['==', '$type', 'Polygon']],\n    'paint': {\n      'fill-color': '#fbb03b',\n      'fill-outline-color': '#fbb03b',\n      'fill-opacity': 0.1\n    }\n  },\n  {\n    'id': 'gl-draw-polygon-midpoint',\n    'type': 'circle',\n    'filter': ['all',\n      ['==', '$type', 'Point'],\n      ['==', 'meta', 'midpoint']],\n    'paint': {\n      'circle-radius': 3,\n      'circle-color': '#fbb03b'\n    }\n  },\n  {\n    'id': 'gl-draw-polygon-stroke-inactive',\n    'type': 'line',\n    'filter': ['all',\n      ['==', 'active', 'false'],\n      ['==', '$type', 'Polygon'],\n      ['!=', 'mode', 'static']\n    ],\n    'layout': {\n      'line-cap': 'round',\n      'line-join': 'round'\n    },\n    'paint': {\n      'line-color': '#000000',\n      'line-width': 1\n    }\n  },\n  {\n    'id': 'gl-draw-polygon-stroke-active',\n    'type': 'line',\n    'filter': ['all', ['==', 'active', 'true'], ['==', '$type', 'Polygon']],\n    'layout': {\n      'line-cap': 'round',\n      'line-join': 'round'\n    },\n    'paint': {\n      'line-color': '#fbb03b',\n      'line-dasharray': [0.2, 2],\n      'line-width': 2\n    }\n  },\n  {\n    'id': 'gl-draw-line-inactive',\n    'type': 'line',\n    'filter': ['all',\n      ['==', 'active', 'false'],\n      ['==', '$type', 'LineString'],\n      ['!=', 'mode', 'static']\n    ],\n    'layout': {\n      'line-cap': 'round',\n      'line-join': 'round'\n    },\n    'paint': {\n      'line-color': '#3bb2d0',\n      'line-width': 2\n    }\n  },\n  {\n    'id': 'gl-draw-line-active',\n    'type': 'line',\n    'filter': ['all',\n      ['==', '$type', 'LineString'],\n      ['==', 'active', 'true']\n    ],\n    'layout': {\n      'line-cap': 'round',\n      'line-join': 'round'\n    },\n    'paint': {\n      'line-color': '#fbb03b',\n      'line-dasharray': [0.2, 2],\n      'line-width': 2\n    }\n  },\n  {\n    'id': 'gl-draw-polygon-and-line-vertex-stroke-inactive',\n    'type': 'circle',\n    'filter': ['all',\n      ['==', 'meta', 'vertex'],\n      ['==', '$type', 'Point'],\n      ['!=', 'mode', 'static']\n    ],\n    'paint': {\n      'circle-radius': 5,\n      'circle-color': '#fff'\n    }\n  },\n  {\n    'id': 'gl-draw-polygon-and-line-vertex-inactive',\n    'type': 'circle',\n    'filter': ['all',\n      ['==', 'meta', 'vertex'],\n      ['==', '$type', 'Point'],\n      ['!=', 'mode', 'static']\n    ],\n    'paint': {\n      'circle-radius': 3,\n      'circle-color': '#fbb03b'\n    }\n  },\n  {\n    'id': 'gl-draw-point-point-stroke-inactive',\n    'type': 'circle',\n    'filter': ['all',\n      ['==', 'active', 'false'],\n      ['==', '$type', 'Point'],\n      ['==', 'meta', 'feature'],\n      ['!=', 'mode', 'static']\n    ],\n    'paint': {\n      'circle-radius': 5,\n      'circle-opacity': 1,\n      'circle-color': '#fff'\n    }\n  },\n  {\n    'id': 'gl-draw-point-inactive',\n    'type': 'circle',\n    'filter': ['all',\n      ['==', 'active', 'false'],\n      ['==', '$type', 'Point'],\n      ['==', 'meta', 'feature'],\n      ['!=', 'mode', 'static']\n    ],\n    'paint': {\n      'circle-radius': 3,\n      'circle-color': ['get', 'user_color'],\n    }\n  },\n  {\n    'id': 'gl-draw-point-stroke-active',\n    'type': 'circle',\n    'filter': ['all',\n      ['==', '$type', 'Point'],\n      ['==', 'active', 'true'],\n      ['!=', 'meta', 'midpoint']\n    ],\n    'paint': {\n      'circle-radius': 7,\n      'circle-color': '#fff'\n    }\n  },\n  {\n    'id': 'gl-draw-point-active',\n    'type': 'circle',\n    'filter': ['all',\n      ['==', '$type', 'Point'],\n      ['!=', 'meta', 'midpoint'],\n      ['==', 'active', 'true']],\n    'paint': {\n      'circle-radius': 5,\n      'circle-color': ['get', 'user_color'],\n    }\n  },\n  {\n    'id': 'gl-draw-polygon-fill-static',\n    'type': 'fill',\n    'filter': ['all', ['==', 'mode', 'static'], ['==', '$type', 'Polygon']],\n    'paint': {\n      'fill-color': '#404040',\n      'fill-outline-color': '#404040',\n      'fill-opacity': 0.1\n    }\n  },\n  {\n    'id': 'gl-draw-polygon-stroke-static',\n    'type': 'line',\n    'filter': ['all', ['==', 'mode', 'static'], ['==', '$type', 'Polygon']],\n    'layout': {\n      'line-cap': 'round',\n      'line-join': 'round'\n    },\n    'paint': {\n      'line-color': '#404040',\n      'line-width': 2\n    }\n  },\n  {\n    'id': 'gl-draw-line-static',\n    'type': 'line',\n    'filter': ['all', ['==', 'mode', 'static'], ['==', '$type', 'LineString']],\n    'layout': {\n      'line-cap': 'round',\n      'line-join': 'round'\n    },\n    'paint': {\n      'line-color': '#404040',\n      'line-width': 2\n    }\n  },\n  {\n    'id': 'gl-draw-point-static',\n    'type': 'circle',\n    'filter': ['all', ['==', 'mode', 'static'], ['==', '$type', 'Point']],\n    'paint': {\n      'circle-radius': 5,\n      'circle-color': '#404040'\n    }\n  }\n];","import mapboxgl from \"mapbox-gl\"\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\"\nimport { RenderData } from \"streamlit-component-lib\"\n\nexport class Raster {\n  constructor(\n    public filename: string,\n    public height: number,\n    public width: number,\n    public src_crs: number,\n    public src_transform: any,\n    public crs: number,\n    public bounds: [number, number, number, number],\n    public base_dir: string,\n    public transform: any,\n    public raster_type: string\n  ) {}\n\n  public __dict__(): any {\n    return {\n      filename: this.filename,\n      height: this.height,\n      width: this.width,\n      crs: this.crs,\n      src_crs: this.src_crs,\n      src_transform: this.src_transform,\n      bounds: this.bounds,\n      base_dir: this.base_dir,\n      transform: this.transform,\n      raster_type: this.raster_type,\n    }\n  }\n\n  get png_filename(): string {\n    return this.filename.replace(/\\.[^/.]+$/, \".png\")\n  }\n}\nexport class CartographerState {\n  private static instance: CartographerState\n\n  public location: GeoJSON.Position\n  public zoom: number\n  public viewport_bounds: number[]\n  public rasters: Raster[]\n  public feature_collection: GeoJSON.FeatureCollection\n  public pointclouds: any[]\n  public unique_labels: string[]\n  public selected_label: string\n\n  private constructor() {\n    // Initialize the properties with default values\n    this.location = [0, 0]\n    this.zoom = 0\n    this.viewport_bounds = [0, 0, 0, 0]\n    this.rasters = []\n    this.feature_collection = { type: \"FeatureCollection\", features: [] }\n    this.pointclouds = []\n    this.unique_labels = []\n    this.selected_label = \"\"\n  }\n\n  public static getInstance(): CartographerState {\n    if (!CartographerState.instance) {\n      CartographerState.instance = new CartographerState()\n    }\n    return CartographerState.instance\n  }\n\n  public static initializeFromEvent(data: RenderData): void {\n    const cartographerData = data.args[\"cartographer_state\"]\n    // Here we perform input validation before assigning the data to the singleton instance\n    if (cartographerData && this.isValidCartographerData(cartographerData)) {\n      const instance = this.getInstance()\n      instance.location = cartographerData.location\n      instance.zoom = cartographerData.zoom\n      instance.viewport_bounds = cartographerData.viewport_bounds\n      instance.rasters = cartographerData.rasters.map(\n        (rasterData: any) =>\n          new Raster(\n            rasterData.filename,\n            rasterData.height,\n            rasterData.width,\n            rasterData.crs,\n            rasterData.src_crs,\n            rasterData.src_transform,\n            rasterData.bounds,\n            rasterData.base_dir,\n            rasterData.transform,\n            rasterData.raster_type\n          )\n      )\n      console.log(cartographerData.feature_collection)\n      instance.feature_collection = cartographerData.feature_collection\n      instance.pointclouds = cartographerData.pointclouds\n      instance.unique_labels = cartographerData.unique_labels\n      instance.selected_label = cartographerData.selected_label\n    } else {\n      throw new Error(\n        \"USER CODE ERROR: Throwing because we received invalid data from the server\" +\n          JSON.stringify(cartographerData)\n      )\n    }\n  }\n\n  private static isValidCartographerData(data: any): boolean {\n    const requiredKeys = [\n      \"location\",\n      \"zoom\",\n      \"viewport_bounds\",\n      \"rasters\",\n      \"feature_collection\",\n      \"pointclouds\",\n      \"unique_labels\",\n      \"selected_label\",\n    ]\n\n    return (\n      data &&\n      requiredKeys.every((key) =>\n        Object.prototype.hasOwnProperty.call(data, key)\n      )\n    )\n  }\n  public updateViewportFromMap(map: any): void {\n    let width = 1024\n    let height = 660\n    var cUR = map.unproject([width, 0]).toArray()\n    var cLL = map.unproject([0, height]).toArray()\n    var coordinates = [cLL, cUR]\n    var center = map.unproject([width / 2, height / 2]).toArray()\n\n    this.location = center as GeoJSON.Position\n    this.zoom = map.getZoom()\n    this.viewport_bounds = coordinates.flat()\n  }\n  public __dict__(): {} {\n    // translate the raster objects to dictionaries\n    return {\n      location: this.location,\n      zoom: this.zoom,\n      viewport_bounds: this.viewport_bounds,\n      rasters: this.rasters.map((raster) => raster.__dict__()),\n      feature_collection: this.feature_collection,\n      pointclouds: this.pointclouds,\n      unique_labels: this.unique_labels,\n      selected_label: this.selected_label,\n    }\n  }\n}\ndeclare global {\n  interface Window {\n    state: CartographerState\n    map_initialized: boolean\n    MAPILLARY_API_KEY: string\n    map: mapboxgl.Map\n    draw: MapboxDraw\n    sources: Set<string>\n    palette: { [str: string]: string }\n    draw_ctrl_visible: boolean\n  }\n}\n","import mapboxgl from \"mapbox-gl\"\n\nclass SliderOverlayControl implements mapboxgl.IControl {\n  private sourceIds: string[]\n  private map: mapboxgl.Map\n  private container: HTMLDivElement\n\n  constructor(sourceIds: string[], map: mapboxgl.Map) {\n    this.sourceIds = sourceIds\n    this.map = map\n    this.container = document.createElement(\"div\")\n    this.container.className = \"mapboxgl-ctrl mapboxgl-ctrl-top-left\"\n\n    this.createSliderOverlays()\n  }\n  private createSliderOverlays() {\n    const sliders: Record<string, HTMLInputElement> = {}\n    const mapOverlay = document.createElement(\"div\")\n    mapOverlay.className = \"map-overlay top\"\n    mapOverlay.style.width = \"200px\"\n    this.sourceIds.forEach((sourceId: string) => {\n      const mapOverlayInner = document.createElement(\"div\")\n      mapOverlayInner.className = \"map-overlay-inner\"\n      mapOverlayInner.style.display = \"block\"\n\n      const label = document.createElement(\"label\")\n      // only add the dots if its too long\n      if (sourceId.length <= 20) {\n        label.textContent = sourceId\n      } else {\n        const shortenedsourceId = sourceId.substring(0, 20) + \"...\"\n        label.textContent = shortenedsourceId\n      }\n      label.title = sourceId\n\n      label.style.display = \"flex\" // Adjust the display style as needed\n\n      const input = document.createElement(\"input\")\n      const sliderId = \"slider-\" + sourceId\n      input.id = sliderId\n      input.type = \"range\"\n      input.min = \"0\"\n      input.max = \"100\"\n      input.step = \"1\"\n      if (sourceId.startsWith(\"maxar\")) {\n        input.value = \"100\"\n      } else {\n        input.value = \"40\"\n      }\n      input.style.width = \"100%\" // Add this line to make the slider element expand to its parent's width\n\n      mapOverlayInner.appendChild(label)\n      mapOverlayInner.appendChild(input)\n\n      mapOverlay.appendChild(mapOverlayInner)\n\n      sliders[sliderId] = input\n\n      input.addEventListener(\"input\", (e) => {\n        const value = (e.target as HTMLInputElement).value\n        if (window.map.getLayer(sourceId).type === \"raster\") {\n          this.map.setPaintProperty(\n            sourceId,\n            \"raster-opacity\",\n            parseInt(value, 10) / 100\n          )\n        } else if (window.map.getLayer(sourceId).type === \"fill\") {\n          this.map.setPaintProperty(\n            sourceId,\n            \"fill-opacity\",\n            parseInt(value, 10) / 100\n          )\n        }\n      })\n    })\n    this.container.appendChild(mapOverlay)\n  }\n\n  onAdd() {\n    return this.container\n  }\n\n  onRemove() {\n    this.container.parentNode?.removeChild(this.container)\n  }\n}\n\nexport { SliderOverlayControl }\n","import mapboxgl from \"mapbox-gl\"\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\"\nimport { so_stylish } from \"./styles\"\nimport { GeoJSON } from \"geojson\"\n\nexport async function addMapillaryFeature(\n  map: mapboxgl.Map,\n  feature_collection: GeoJSON.FeatureCollection,\n  className: string\n) {\n  // Query the features from the source\n  const features = feature_collection.features\n  const filteredFeatures = features.filter(\n    (feature) =>\n      feature.properties &&\n      feature.properties.type === \"mapillary_feature\" &&\n      feature.properties.description === className\n  )\n\n  let featureCollectionSubset = {\n    type: \"FeatureCollection\",\n    features: filteredFeatures,\n  } as GeoJSON.FeatureCollection\n  let source = map.getSource(className)\n\n  if (source) {\n    // @ts-ignore\n    source.setData(featureCollectionSubset)\n  } else {\n    console.log(\"adding source for \" + className)\n    console.log(featureCollectionSubset.features.length)\n    map.addSource(className, {\n      type: \"geojson\",\n      data: featureCollectionSubset,\n    })\n\n    const img = new Image()\n    img.onload = function () {\n      map.addImage(className, img)\n      map.addLayer({\n        id: className + \"-layer\",\n        type: \"symbol\",\n        source: className,\n        layout: {\n          \"icon-image\": className,\n          \"icon-size\": 0.15,\n          \"icon-allow-overlap\": true,\n        },\n      })\n    }\n    var svgUrl = `https://raw.githubusercontent.com/mapillary/mapillary_sprite_source/master/package_objects/${className}.svg`;\n\n    fetch(svgUrl)\n      .then(response => response.text())\n      .then(svgContent => {\n        const encodedSvg = btoa(svgContent);\n        const dataUri = `data:image/svg+xml;base64,${encodedSvg}`;\n        img.src = dataUri;\n      })\n      .catch(error => {\n        console.error(\"Error fetching SVG:\", error);\n      });\n  }\n}\n\nexport function addGeoJSONLayers(\n  map: mapboxgl.Map,\n  sourceIds: string[],\n  featureCollection: GeoJSON.FeatureCollection\n) {\n  var addedSourceIds = new Set<string>()\n  for (const sourceId of sourceIds) {\n    let source = map.getSource(sourceId)\n    let featureCollectionSubset = {\n      type: \"FeatureCollection\",\n      features: featureCollection.features.filter((feature) => {\n        return feature.properties?.description === sourceId\n      }),\n    } as GeoJSON.FeatureCollection\n    if (featureCollectionSubset.features.length == 0) {\n      continue\n    }\n    if (source) {\n      // @ts-ignore\n      source.setData(featureCollectionSubset)\n      addedSourceIds.add(sourceId)\n    } else {\n      map.addSource(sourceId, {\n        type: \"geojson\",\n        data: featureCollectionSubset,\n      })\n      let fillColor = featureCollectionSubset.features[0].properties?.color\n      map.addLayer({\n        id: sourceId,\n        type: \"fill\",\n        source: sourceId,\n        paint: {\n          \"fill-color\": fillColor,\n          \"fill-opacity\": 0.4,\n        },\n        filter: [\"==\", \"$type\", \"Polygon\"],\n      })\n    }\n    addedSourceIds.add(sourceId)\n  }\n  return addedSourceIds\n}\n\nexport function buildDrawPlugin() {\n  window.map.removeControl(window.draw)\n  const new_draw = new MapboxDraw({\n    displayControlsDefault: true,\n    controls: {\n      polygon: true,\n      trash: true,\n      combine_features: false,\n      uncombine_features: false,\n    },\n    styles: so_stylish,\n    userProperties: true,\n  })\n\n  window.map.addControl(new_draw)\n  return new_draw\n}\n","import { GeoJSON } from \"geojson\"\nimport mapboxgl from \"mapbox-gl\"\n\nfunction cornerBounds(bounds: [number, number, number, number]): number[][] {\n  return [\n    // [ (lu), (ru), (rd), (ld) ]\n    [bounds[0], bounds[3]],\n    [bounds[2], bounds[3]],\n    [bounds[2], bounds[1]],\n    [bounds[0], bounds[1]],\n  ]\n}\n\nfunction assignColorsToFeatures(\n  features: GeoJSON.Feature<GeoJSON.Geometry, any>[]\n): void {\n  features.forEach((feature) => {\n    const color = window.palette[feature.properties.description]\n    feature.properties = {\n      ...feature.properties,\n      color,\n    }\n  })\n}\n\nfunction buildColorPalette(unique_labels: string[]): any {\n  const colorList = [\n    \"#FF6F40\", // Coral\n    \"#1CA953\", // Forest Green\n    \"#0077B6\", // Cerulean Blue\n    \"#FFC300\", // Vivid Yellow\n    \"#B7410E\", // Rust\n    \"#2F4F4F\", // Slate Gray\n    \"#800080\", // Purple\n    \"#FF55A3\", // Fuchsia Pink\n  ]\n\n  const palette: { [string: string]: string } = {}\n  unique_labels.forEach((label, index) => {\n    palette[label] = colorList[index % colorList.length]\n  })\n  return palette\n}\nfunction configureServices() {\n  require(\"dotenv\").config()\n  mapboxgl.accessToken =\n    process.env.MAPBOX_API_KEY ||\n    \"pk.eyJ1IjoibXdlaXNzMTAiLCJhIjoiY2xoajl0OGMxMGZwYTNnczZ2OTh1eXRreCJ9.ywUieENhWVdQP3hOP4Hycg\"\n  window.MAPILLARY_API_KEY =\n    process.env.MAPILLARY_API_KEY ||\n    \"MLY|6088287754621284|776bc701a5aebf616cb82964e04a6398\"\n}\n\nexport {\n  cornerBounds,\n  assignColorsToFeatures,\n  buildColorPalette,\n  configureServices,\n}\n","import { RenderData, Streamlit } from \"streamlit-component-lib\"\nimport mapboxgl from \"mapbox-gl\"\nimport \"mapbox-gl/dist/mapbox-gl.css\"\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\"\nimport { so_stylish } from \"./styles\"\nimport { Raster, CartographerState } from \"./types\"\nimport { SliderOverlayControl } from \"./interaction_handling\"\nimport {\n  addGeoJSONLayers,\n  addMapillaryFeature,\n  buildDrawPlugin,\n} from \"./mapbox\"\nimport {\n  cornerBounds,\n  assignColorsToFeatures,\n  buildColorPalette,\n  configureServices,\n} from \"./utilities\"\n\nconfigureServices()\nlet styleLoaded = false\n\nfunction updateBackendWithState(): void {\n  Streamlit.setComponentValue(window.state.__dict__())\n}\n\nfunction addRasterToMap(map: any, raster: Raster) {\n  console.log(process.env.REACT_APP_BASE_URL + \"/app/static/\" + raster.png_filename)\n  map.addSource(raster.png_filename, {\n    type: \"image\",\n    url: process.env.REACT_APP_BASE_URL + \"/app/static/\" + raster.png_filename,\n    coordinates: cornerBounds(raster.bounds),\n  })\n  if (raster.raster_type === \"predicted_overlay\") {\n    map.addLayer({\n      id: raster.png_filename,\n      type: \"raster\",\n      source: raster.png_filename,\n      paint: {\n        \"raster-fade-duration\": 0,\n        \"raster-opacity\": 0.4,\n      },\n    })\n  } else if (raster.raster_type === \"base_satellite_image\") {\n    map.addLayer({\n      id: raster.png_filename,\n      type: \"raster\",\n      source: raster.png_filename,\n      paint: {\n        \"raster-fade-duration\": 0,\n        \"raster-opacity\": 1.0,\n      },\n    })\n  }\n\n  window.sources.add(raster.png_filename)\n}\n\nfunction setMapHeight() {\n  console.log(\"height\" + window.parent.innerHeight)\n  const map = document.getElementById('map');\n  // @ts-ignore\n  map.style.height = window.parent.innerHeight + 'px !important';\n}\n\nfunction removeRasters(map: mapboxgl.Map) {\n  window.sources.forEach((source) => {\n    if (\n      source !== \"mapbox-dem\" &&\n      source !== \"mapillary\" &&\n      source.startsWith(\"prediction\")\n    ) {\n      map.removeLayer(source)\n      map.removeSource(source)\n      window.sources.delete(source)\n    }\n  })\n}\n\nfunction updateMapWithRasters(map: mapboxgl.Map, rasters: Raster[]) {\n  removeRasters(map)\n  for (let i = 0; i < rasters.length; i++) {\n    let raster = rasters[i]\n    // if its the predicted overlay\n    if (raster.raster_type === \"predicted_overlay\") {\n      if (rasters.length === 3 && i === 2) {\n        addRasterToMap(map, raster)\n      } else if (rasters.length === 2 && i === 1) {\n        addRasterToMap(map, raster)\n      }\n    }\n    // if its the ground truth overlay\n    else if (\n      raster.raster_type === \"base_satellite_image\" &&\n      !window.sources.has(raster.png_filename)\n    ) {\n      addRasterToMap(map, raster)\n    }\n  }\n  var rasterSourceIds = rasters.map((raster) => raster.png_filename)\n  const sliderOverlayControl = new SliderOverlayControl(rasterSourceIds, map)\n  map.addControl(sliderOverlayControl, \"top-left\")\n\n  window.state.updateViewportFromMap(map)\n  // updateBackendWithState()\n}\n\nfunction initializeMap(state: CartographerState): mapboxgl.Map {\n  let map = new mapboxgl.Map({\n    container: \"map\",\n    style: \"mapbox://styles/mapbox/satellite-streets-v12\",\n    center: new mapboxgl.LngLat(state.location[0], state.location[1]),\n    zoom: 17,\n  })\n  window.map = map\n\n  window.draw = new MapboxDraw({\n    displayControlsDefault: false,\n    controls: {},\n    styles: so_stylish,\n    userProperties: true,\n  })\n  window.map.addControl(window.draw)\n  window.map_initialized = false\n  window.state.updateViewportFromMap(map)\n  window.palette = {}\n  window.sources = new Set<string>()\n  window.draw_ctrl_visible = false\n\n  map.on(\"load\", () => {\n    styleLoaded = true\n    map.addSource(\"mapbox-dem\", {\n      type: \"raster-dem\",\n      url: \"mapbox://mapbox.mapbox-terrain-dem-v1\",\n      tileSize: 512,\n      maxzoom: 14,\n    })\n    map.setTerrain({ source: \"mapbox-dem\", exaggeration: 1.5 })\n    addMapillaryFeature(\n      map,\n      window.state.feature_collection,\n      \"object--support--utility-pole\"\n    )\n    addMapillaryFeature(\n      map,\n      window.state.feature_collection,\n      \"object--sign--store\"\n    )\n\n    updateMapWithRasters(map, window.state.rasters)\n  })\n  window.palette = buildColorPalette(state.unique_labels)\n\n  assignColorsToFeatures(state.feature_collection.features)\n\n  map.on(\"draw.create\", function (e) {\n    console.log(\"draw.create\")\n    e.features[0].type = \"Feature\"\n    e.features[0].properties = {\n      color: window.palette[window.state.selected_label],\n      description: window.state.selected_label,\n      type: \"click\",\n    }\n    window.draw.add(e.features[0])\n    window.state.feature_collection.features.push(e.features[0])\n    window.state.updateViewportFromMap(map)\n    var vectorSourceIds = addGeoJSONLayers(\n      window.map,\n      window.state.unique_labels,\n      window.state.feature_collection\n    )\n    var rasterSourceIds = window.state.rasters.map(\n      (raster) => raster.png_filename\n    )\n    var sourceIds = [...rasterSourceIds, ...Array.from(vectorSourceIds)]\n\n    const sliderOverlayControl = new SliderOverlayControl(sourceIds, window.map)\n    window.map.addControl(sliderOverlayControl, \"top-left\")\n\n    updateBackendWithState()\n  })\n  map.on(\"draw.update\", function (e) {\n    console.log(\"draw.update\")\n    var features = [\n      ...window.draw.getAll().features,\n      ...window.state.feature_collection.features,\n    ]\n    // make them a set then array to remove duplicates\n    window.state.feature_collection.features = Array.from(new Set(features))\n    window.state.updateViewportFromMap(map)\n    updateBackendWithState()\n  })\n  map.addControl(\n    new mapboxgl.ScaleControl({ maxWidth: 80, unit: \"metric\" }),\n    \"bottom-right\"\n  )\n  return map\n}\n\nfunction onRender(event: Event): void {\n  const data = (event as CustomEvent<RenderData>).detail\n  CartographerState.initializeFromEvent(data)\n  window.state = CartographerState.getInstance()\n  window.palette = buildColorPalette(window.state.unique_labels)\n  if (!window.map_initialized) {\n    window.map = initializeMap(window.state)\n    window.map_initialized = true\n  }\n  if (\n    window.state.unique_labels.length > 0 &&\n    !window.draw_ctrl_visible &&\n    styleLoaded\n  ) {\n    window.draw = buildDrawPlugin()\n    window.draw_ctrl_visible = true\n  }\n\n  // check whether the list of raster png_filenames is the same as those in sources\n  let changed = false\n  for (let i = 0; i < window.state.rasters.length; i++) {\n    let raster = window.state.rasters[i]\n    if (!window.sources.has(raster.png_filename)) {\n      changed = true\n    }\n  }\n  if (styleLoaded && changed) {\n    updateMapWithRasters(window.map, window.state.rasters)\n  }\n\n  if (\n    styleLoaded &&\n    window.map_initialized &&\n    window.state.feature_collection.features.length > 0\n  ) {\n    var vectorSourceIds = addGeoJSONLayers(\n      window.map,\n      window.state.unique_labels,\n      window.state.feature_collection\n    )\n    var rasterSourceIds = window.state.rasters.map(\n      (raster) => raster.png_filename\n    )\n    var sourceIds = [...rasterSourceIds, ...Array.from(vectorSourceIds)]\n\n    const sliderOverlayControl = new SliderOverlayControl(sourceIds, window.map)\n    window.map.addControl(sliderOverlayControl, \"top-left\")\n    window.addEventListener('resize', setMapHeight);\n  }\n  var block = window.parent.document.getElementsByClassName(\"block-container\")[1] as HTMLElement;\n  block.style.cssText = \"padding-left: 0rem !important; padding-right: 0rem !important;\";\n  console.log(block)\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}