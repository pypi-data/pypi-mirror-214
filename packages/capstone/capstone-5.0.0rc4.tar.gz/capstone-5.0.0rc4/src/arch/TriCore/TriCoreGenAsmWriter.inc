/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by Capstone's LLVM TableGen Disassembler Backend. */

/* LLVM-commit: <commit> */
/* LLVM-tag: <tag> */

/* Do not edit. */

/* Capstone's LLVM TableGen Backends: */
/* https://github.com/capstone-engine/llvm-capstone */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
static MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "lt.u %d15, \0"
  /* 112 */ "mov %d15, \0"
  /* 123 */ "jz %d15, \0"
  /* 133 */ "jnz %d15, \0"
  /* 144 */ "sub.a %sp, \0"
  /* 156 */ "ftoq31 \0"
  /* 164 */ "csub.a \0"
  /* 172 */ "subsc.a \0"
  /* 181 */ "addsc.a \0"
  /* 190 */ "difsc.a \0"
  /* 199 */ "cadd.a \0"
  /* 207 */ "ld.a \0"
  /* 213 */ "tlbprobe.a \0"
  /* 225 */ "ge.a \0"
  /* 231 */ "jne.a \0"
  /* 238 */ "addih.a \0"
  /* 247 */ "movh.a \0"
  /* 255 */ "sel.a \0"
  /* 262 */ "csubn.a \0"
  /* 271 */ "caddn.a \0"
  /* 280 */ "seln.a \0"
  /* 288 */ "swap.a \0"
  /* 296 */ "jeq.a \0"
  /* 303 */ "lt.a \0"
  /* 309 */ "st.a \0"
  /* 315 */ "mov.a \0"
  /* 322 */ "nez.a \0"
  /* 329 */ "jz.a \0"
  /* 335 */ "jnz.a \0"
  /* 342 */ "eqz.a \0"
  /* 349 */ "movz.a \0"
  /* 357 */ "mov.aa \0"
  /* 365 */ "ld.da \0"
  /* 372 */ "st.da \0"
  /* 379 */ "lea \0"
  /* 384 */ "lha \0"
  /* 389 */ "sha \0"
  /* 394 */ "ja \0"
  /* 398 */ "jla \0"
  /* 403 */ "fcalla \0"
  /* 411 */ "crc32.b \0"
  /* 420 */ "sha.b \0"
  /* 427 */ "sub.b \0"
  /* 434 */ "add.b \0"
  /* 441 */ "ld.b \0"
  /* 447 */ "absdif.b \0"
  /* 457 */ "sh.b \0"
  /* 463 */ "min.b \0"
  /* 470 */ "clo.b \0"
  /* 477 */ "eq.b \0"
  /* 483 */ "abs.b \0"
  /* 490 */ "subs.b \0"
  /* 498 */ "adds.b \0"
  /* 506 */ "absdifs.b \0"
  /* 517 */ "cls.b \0"
  /* 524 */ "abss.b \0"
  /* 532 */ "sat.b \0"
  /* 539 */ "dvinit.b \0"
  /* 549 */ "lt.b \0"
  /* 555 */ "st.b \0"
  /* 561 */ "max.b \0"
  /* 568 */ "eqany.b \0"
  /* 577 */ "clz.b \0"
  /* 584 */ "csub \0"
  /* 590 */ "msub \0"
  /* 596 */ "rsub \0"
  /* 602 */ "subc \0"
  /* 608 */ "addc \0"
  /* 614 */ "ld.d \0"
  /* 620 */ "st.d \0"
  /* 626 */ "mov.d \0"
  /* 633 */ "cadd \0"
  /* 639 */ "madd \0"
  /* 645 */ "jned \0"
  /* 651 */ "nand \0"
  /* 657 */ "and.ge \0"
  /* 665 */ "sh.ge \0"
  /* 672 */ "xor.ge \0"
  /* 680 */ "jge \0"
  /* 685 */ "bmerge \0"
  /* 693 */ "disable \0"
  /* 702 */ "shuffle \0"
  /* 711 */ "and.ne \0"
  /* 719 */ "sh.ne \0"
  /* 726 */ "xor.ne \0"
  /* 734 */ "jne \0"
  /* 739 */ "restore \0"
  /* 748 */ "msub.f \0"
  /* 756 */ "madd.f \0"
  /* 764 */ "qseed.f \0"
  /* 773 */ "mul.f \0"
  /* 780 */ "cmp.f \0"
  /* 787 */ "div.f \0"
  /* 794 */ "absdif \0"
  /* 802 */ "q31tof \0"
  /* 810 */ "itof \0"
  /* 816 */ "hptof \0"
  /* 823 */ "utof \0"
  /* 829 */ "sha.h \0"
  /* 836 */ "msub.h \0"
  /* 844 */ "msubad.h \0"
  /* 854 */ "madd.h \0"
  /* 862 */ "ld.h \0"
  /* 868 */ "absdif.h \0"
  /* 878 */ "sh.h \0"
  /* 884 */ "mul.h \0"
  /* 891 */ "msubm.h \0"
  /* 900 */ "msubadm.h \0"
  /* 911 */ "maddm.h \0"
  /* 920 */ "mulm.h \0"
  /* 928 */ "maddsum.h \0"
  /* 939 */ "min.h \0"
  /* 946 */ "clo.h \0"
  /* 953 */ "eq.h \0"
  /* 959 */ "msubr.h \0"
  /* 968 */ "msubadr.h \0"
  /* 979 */ "maddr.h \0"
  /* 988 */ "mulr.h \0"
  /* 996 */ "maddsur.h \0"
  /* 1007 */ "abs.h \0"
  /* 1014 */ "msubs.h \0"
  /* 1023 */ "msubads.h \0"
  /* 1034 */ "madds.h \0"
  /* 1043 */ "absdifs.h \0"
  /* 1054 */ "cls.h \0"
  /* 1061 */ "msubms.h \0"
  /* 1071 */ "msubadms.h \0"
  /* 1083 */ "maddms.h \0"
  /* 1093 */ "mulms.h \0"
  /* 1102 */ "maddsums.h \0"
  /* 1114 */ "msubrs.h \0"
  /* 1124 */ "msubadrs.h \0"
  /* 1136 */ "maddrs.h \0"
  /* 1146 */ "maddsurs.h \0"
  /* 1158 */ "abss.h \0"
  /* 1166 */ "maddsus.h \0"
  /* 1177 */ "sat.h \0"
  /* 1184 */ "dvinit.h \0"
  /* 1194 */ "lt.h \0"
  /* 1200 */ "st.h \0"
  /* 1206 */ "maddsu.h \0"
  /* 1216 */ "max.h \0"
  /* 1223 */ "eqany.h \0"
  /* 1232 */ "clz.h \0"
  /* 1239 */ "addih \0"
  /* 1246 */ "sh \0"
  /* 1250 */ "movh \0"
  /* 1256 */ "tlbprobe.i \0"
  /* 1268 */ "addi \0"
  /* 1274 */ "jnei \0"
  /* 1280 */ "ji \0"
  /* 1284 */ "jli \0"
  /* 1289 */ "fcalli \0"
  /* 1297 */ "ftoi \0"
  /* 1303 */ "dvadj \0"
  /* 1310 */ "unpack \0"
  /* 1318 */ "imask \0"
  /* 1325 */ "sel \0"
  /* 1330 */ "updfl \0"
  /* 1337 */ "jl \0"
  /* 1341 */ "fcall \0"
  /* 1348 */ "syscall \0"
  /* 1357 */ "mul \0"
  /* 1362 */ "msubm \0"
  /* 1369 */ "maddm \0"
  /* 1376 */ "mulm \0"
  /* 1382 */ "csubn \0"
  /* 1389 */ "crcn \0"
  /* 1395 */ "caddn \0"
  /* 1402 */ "andn \0"
  /* 1408 */ "ixmin \0"
  /* 1415 */ "seln \0"
  /* 1421 */ "orn \0"
  /* 1426 */ "cmovn \0"
  /* 1433 */ "clo \0"
  /* 1438 */ "tlbmap \0"
  /* 1446 */ "tlbdemap \0"
  /* 1456 */ "dvstep \0"
  /* 1464 */ "ftohp \0"
  /* 1471 */ "loop \0"
  /* 1477 */ "msub.q \0"
  /* 1485 */ "madd.q \0"
  /* 1493 */ "ld.q \0"
  /* 1499 */ "mul.q \0"
  /* 1506 */ "msubm.q \0"
  /* 1515 */ "maddm.q \0"
  /* 1524 */ "msubr.q \0"
  /* 1533 */ "maddr.q \0"
  /* 1542 */ "mulr.q \0"
  /* 1550 */ "msubs.q \0"
  /* 1559 */ "madds.q \0"
  /* 1568 */ "msubrs.q \0"
  /* 1578 */ "maddrs.q \0"
  /* 1588 */ "st.q \0"
  /* 1594 */ "and.eq \0"
  /* 1602 */ "sh.eq \0"
  /* 1609 */ "xor.eq \0"
  /* 1617 */ "jeq \0"
  /* 1622 */ "mfcr \0"
  /* 1628 */ "mtcr \0"
  /* 1634 */ "xnor \0"
  /* 1640 */ "xor \0"
  /* 1645 */ "bisr \0"
  /* 1651 */ "dextr \0"
  /* 1658 */ "shas \0"
  /* 1664 */ "abs \0"
  /* 1669 */ "msubs \0"
  /* 1676 */ "rsubs \0"
  /* 1683 */ "madds \0"
  /* 1690 */ "absdifs \0"
  /* 1699 */ "cls \0"
  /* 1704 */ "muls \0"
  /* 1710 */ "msubms \0"
  /* 1718 */ "maddms \0"
  /* 1726 */ "abss \0"
  /* 1732 */ "and.and.t \0"
  /* 1743 */ "sh.and.t \0"
  /* 1753 */ "or.and.t \0"
  /* 1763 */ "sh.nand.t \0"
  /* 1774 */ "and.andn.t \0"
  /* 1786 */ "sh.andn.t \0"
  /* 1797 */ "or.andn.t \0"
  /* 1808 */ "sh.orn.t \0"
  /* 1818 */ "insn.t \0"
  /* 1826 */ "and.or.t \0"
  /* 1836 */ "sh.or.t \0"
  /* 1845 */ "or.or.t \0"
  /* 1854 */ "and.nor.t \0"
  /* 1865 */ "sh.nor.t \0"
  /* 1875 */ "or.nor.t \0"
  /* 1885 */ "sh.xnor.t \0"
  /* 1896 */ "sh.xor.t \0"
  /* 1906 */ "ins.t \0"
  /* 1913 */ "st.t \0"
  /* 1919 */ "jz.t \0"
  /* 1925 */ "jnz.t \0"
  /* 1932 */ "addsc.at \0"
  /* 1942 */ "bsplit \0"
  /* 1950 */ "dvinit \0"
  /* 1958 */ "and.lt \0"
  /* 1966 */ "sh.lt \0"
  /* 1973 */ "xor.lt \0"
  /* 1981 */ "jlt \0"
  /* 1986 */ "not \0"
  /* 1991 */ "insert \0"
  /* 1999 */ "ldmst \0"
  /* 2006 */ "msub.u \0"
  /* 2014 */ "madd.u \0"
  /* 2022 */ "and.ge.u \0"
  /* 2032 */ "sh.ge.u \0"
  /* 2041 */ "xor.ge.u \0"
  /* 2051 */ "jge.u \0"
  /* 2058 */ "mul.u \0"
  /* 2065 */ "msubm.u \0"
  /* 2074 */ "maddm.u \0"
  /* 2083 */ "mulm.u \0"
  /* 2091 */ "ixmin.u \0"
  /* 2100 */ "dvstep.u \0"
  /* 2110 */ "extr.u \0"
  /* 2118 */ "msubs.u \0"
  /* 2127 */ "rsubs.u \0"
  /* 2136 */ "madds.u \0"
  /* 2145 */ "muls.u \0"
  /* 2153 */ "msubms.u \0"
  /* 2163 */ "maddms.u \0"
  /* 2173 */ "dvinit.u \0"
  /* 2183 */ "and.lt.u \0"
  /* 2193 */ "sh.lt.u \0"
  /* 2202 */ "xor.lt.u \0"
  /* 2212 */ "jlt.u \0"
  /* 2219 */ "div.u \0"
  /* 2226 */ "mov.u \0"
  /* 2233 */ "ixmax.u \0"
  /* 2242 */ "ld.bu \0"
  /* 2249 */ "min.bu \0"
  /* 2257 */ "subs.bu \0"
  /* 2266 */ "adds.bu \0"
  /* 2275 */ "sat.bu \0"
  /* 2283 */ "dvinit.bu \0"
  /* 2294 */ "lt.bu \0"
  /* 2301 */ "max.bu \0"
  /* 2309 */ "ld.hu \0"
  /* 2316 */ "min.hu \0"
  /* 2324 */ "subs.hu \0"
  /* 2333 */ "adds.hu \0"
  /* 2342 */ "sat.hu \0"
  /* 2350 */ "dvinit.hu \0"
  /* 2361 */ "lt.hu \0"
  /* 2368 */ "max.hu \0"
  /* 2376 */ "ftou \0"
  /* 2382 */ "loopu \0"
  /* 2389 */ "lt.wu \0"
  /* 2396 */ "div \0"
  /* 2401 */ "cmov \0"
  /* 2407 */ "crc32b.w \0"
  /* 2417 */ "ld.w \0"
  /* 2423 */ "crc32l.w \0"
  /* 2433 */ "swap.w \0"
  /* 2441 */ "eq.w \0"
  /* 2447 */ "lt.w \0"
  /* 2453 */ "popcnt.w \0"
  /* 2463 */ "st.w \0"
  /* 2469 */ "ixmax \0"
  /* 2476 */ "subx \0"
  /* 2482 */ "ldlcx \0"
  /* 2489 */ "stlcx \0"
  /* 2496 */ "lducx \0"
  /* 2503 */ "stucx \0"
  /* 2510 */ "addx \0"
  /* 2516 */ "parity \0"
  /* 2524 */ "ftoq31z \0"
  /* 2533 */ "jgez \0"
  /* 2539 */ "jlez \0"
  /* 2545 */ "ftoiz \0"
  /* 2552 */ "jz \0"
  /* 2556 */ "clz \0"
  /* 2561 */ "jnz \0"
  /* 2566 */ "jgtz \0"
  /* 2572 */ "jltz \0"
  /* 2578 */ "ftouz \0"
  /* 2585 */ "swap.a [+\0"
  /* 2595 */ "st.a [+\0"
  /* 2603 */ "st.da [+\0"
  /* 2612 */ "st.b [+\0"
  /* 2620 */ "st.d [+\0"
  /* 2628 */ "st.h [+\0"
  /* 2636 */ "cachea.i [+\0"
  /* 2648 */ "cachei.i [+\0"
  /* 2660 */ "cachea.wi [+\0"
  /* 2673 */ "cachei.wi [+\0"
  /* 2686 */ "st.q [+\0"
  /* 2694 */ "ldmst [+\0"
  /* 2703 */ "cachea.w [+\0"
  /* 2715 */ "cachei.w [+\0"
  /* 2727 */ "swapmsk.w [+\0"
  /* 2740 */ "cmpswap.w [+\0"
  /* 2753 */ "st.w [+\0"
  /* 2761 */ "# XRay Function Patchable RET.\0"
  /* 2792 */ "# XRay Typed Event Log.\0"
  /* 2816 */ "# XRay Custom Event Log.\0"
  /* 2841 */ "# XRay Function Enter.\0"
  /* 2864 */ "# XRay Tail Call Exit.\0"
  /* 2887 */ "# XRay Function Exit.\0"
  /* 2909 */ "LIFETIME_END\0"
  /* 2922 */ "PSEUDO_PROBE\0"
  /* 2935 */ "BUNDLE\0"
  /* 2942 */ "DBG_VALUE\0"
  /* 2952 */ "DBG_INSTR_REF\0"
  /* 2966 */ "DBG_PHI\0"
  /* 2974 */ "DBG_LABEL\0"
  /* 2984 */ "LIFETIME_START\0"
  /* 2999 */ "DBG_VALUE_LIST\0"
  /* 3014 */ "ld.a %a15, [\0"
  /* 3027 */ "ld.b %d15, [\0"
  /* 3040 */ "ld.h %d15, [\0"
  /* 3053 */ "ld.bu %d15, [\0"
  /* 3067 */ "ld.w %d15, [\0"
  /* 3080 */ "swap.a [\0"
  /* 3089 */ "st.a [\0"
  /* 3096 */ "st.da [\0"
  /* 3104 */ "st.b [\0"
  /* 3111 */ "st.d [\0"
  /* 3118 */ "st.h [\0"
  /* 3125 */ "cachea.i [\0"
  /* 3136 */ "cachei.i [\0"
  /* 3147 */ "cachea.wi [\0"
  /* 3159 */ "cachei.wi [\0"
  /* 3171 */ "st.q [\0"
  /* 3178 */ "ldmst [\0"
  /* 3186 */ "cachea.w [\0"
  /* 3197 */ "cachei.w [\0"
  /* 3208 */ "swapmsk.w [\0"
  /* 3220 */ "cmpswap.w [\0"
  /* 3232 */ "st.w [\0"
  /* 3239 */ "ldlcx [\0"
  /* 3247 */ "stlcx [\0"
  /* 3255 */ "lducx [\0"
  /* 3263 */ "stucx [\0"
  /* 3271 */ "st.a [%a15]\0"
  /* 3283 */ "st.b [%a15]\0"
  /* 3295 */ "st.h [%a15]\0"
  /* 3307 */ "st.w [%a15]\0"
  /* 3319 */ "ld.a %a15, [%sp]\0"
  /* 3336 */ "ld.w %d15, [%sp]\0"
  /* 3353 */ "st.a [%sp]\0"
  /* 3364 */ "st.w [%sp]\0"
  /* 3375 */ "tlbflush.a\0"
  /* 3386 */ "tlbflush.b\0"
  /* 3397 */ "dsync\0"
  /* 3403 */ "isync\0"
  /* 3409 */ "rfe\0"
  /* 3413 */ "enable\0"
  /* 3420 */ "disable\0"
  /* 3428 */ "debug\0"
  /* 3434 */ "# FEntry call\0"
  /* 3448 */ "rfm\0"
  /* 3452 */ "nop\0"
  /* 3456 */ "fret\0"
  /* 3461 */ "wait\0"
  /* 3466 */ "trapv\0"
  /* 3472 */ "trapsv\0"
  /* 3479 */ "rstv\0"
  /* 3484 */ "rslcx\0"
  /* 3490 */ "svlcx\0"
};
#endif // CAPSTONE_DIET

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2943U,	// DBG_VALUE
    3000U,	// DBG_VALUE_LIST
    2953U,	// DBG_INSTR_REF
    2967U,	// DBG_PHI
    2975U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2936U,	// BUNDLE
    2985U,	// LIFETIME_START
    2910U,	// LIFETIME_END
    2923U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3435U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2842U,	// PATCHABLE_FUNCTION_ENTER
    2762U,	// PATCHABLE_RET
    2888U,	// PATCHABLE_FUNCTION_EXIT
    2865U,	// PATCHABLE_TAIL_CALL
    2817U,	// PATCHABLE_EVENT_CALL
    2793U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4603U,	// ABSDIFS_B_rr_v110
    5140U,	// ABSDIFS_H_rr
    5787U,	// ABSDIFS_rc
    5787U,	// ABSDIFS_rr
    4544U,	// ABSDIF_B_rr
    4965U,	// ABSDIF_H_rr
    536875803U,	// ABSDIF_rc
    4891U,	// ABSDIF_rr
    34607629U,	// ABSS_B_rr_v110
    34608263U,	// ABSS_H_rr
    34608831U,	// ABSS_rr
    33559012U,	// ABS_B_rr
    33559536U,	// ABS_H_rr
    33560193U,	// ABS_rr
    536875617U,	// ADDC_rc
    4705U,	// ADDC_rr
    1073746159U,	// ADDIH_A_rlc
    1073747160U,	// ADDIH_rlc
    1610618101U,	// ADDI_rlc
    2148538253U,	// ADDSC_AT_rr
    6029U,	// ADDSC_AT_rr_v110
    2148536502U,	// ADDSC_A_rr
    4278U,	// ADDSC_A_rr_v110
    67113142U,	// ADDSC_A_srrs
    2684358838U,	// ADDSC_A_srrs_v110
    6363U,	// ADDS_BU_rr_v110
    4595U,	// ADDS_B_rr
    5132U,	// ADDS_H
    6430U,	// ADDS_HU
    6234U,	// ADDS_U
    536877146U,	// ADDS_U_rc
    536876693U,	// ADDS_rc
    5781U,	// ADDS_rr
    33560213U,	// ADDS_srr
    536877519U,	// ADDX_rc
    6607U,	// ADDX_rr
    4297U,	// ADD_A_rr
    35655881U,	// ADD_A_src
    33558729U,	// ADD_A_srr
    4531U,	// ADD_B_rr
    3325039350U,	// ADD_F_rrr
    4952U,	// ADD_H_rr
    536875643U,	// ADD_rc
    4731U,	// ADD_rr
    35656315U,	// ADD_src
    35655692U,	// ADD_src_15a
    35721851U,	// ADD_src_a15
    33559163U,	// ADD_srr
    33558540U,	// ADD_srr_15a
    33624699U,	// ADD_srr_a15
    3758102259U,	// ANDN_T
    536876411U,	// ANDN_rc
    5499U,	// ANDN_rr
    3758102255U,	// AND_ANDN_T
    3758102213U,	// AND_AND_T
    536876603U,	// AND_EQ_rc
    5691U,	// AND_EQ_rr
    536877031U,	// AND_GE_U_rc
    6119U,	// AND_GE_U_rr
    536875666U,	// AND_GE_rc
    4754U,	// AND_GE_rr
    536877192U,	// AND_LT_U_rc
    6280U,	// AND_LT_U_rr
    536876967U,	// AND_LT_rc
    6055U,	// AND_LT_rr
    536875720U,	// AND_NE_rc
    4808U,	// AND_NE_rr
    3758102335U,	// AND_NOR_T
    3758102307U,	// AND_OR_T
    3758102217U,	// AND_T
    536875661U,	// AND_rc
    4749U,	// AND_rr
    139287U,	// AND_sc
    139287U,	// AND_sc_v110
    33559181U,	// AND_srr
    33559181U,	// AND_srr_v110
    13934U,	// BISR_rc
    13934U,	// BISR_rc_v161
    140910U,	// BISR_sc
    140910U,	// BISR_sc_v110
    4782U,	// BMERGAE_rr_v110
    4782U,	// BMERGE_rr
    33560471U,	// BSPLIT_rr
    33560471U,	// BSPLIT_rr_v110
    4398134U,	// CACHEA_I_bo_bso
    4463670U,	// CACHEA_I_bo_c
    4529206U,	// CACHEA_I_bo_pos
    4397645U,	// CACHEA_I_bo_pre
    400438U,	// CACHEA_I_bo_r
    4398156U,	// CACHEA_WI_bo_bso
    4463692U,	// CACHEA_WI_bo_c
    4529228U,	// CACHEA_WI_bo_pos
    4397669U,	// CACHEA_WI_bo_pre
    400460U,	// CACHEA_WI_bo_r
    4398195U,	// CACHEA_W_bo_bso
    4463731U,	// CACHEA_W_bo_c
    4529267U,	// CACHEA_W_bo_pos
    4397712U,	// CACHEA_W_bo_pre
    400499U,	// CACHEA_W_bo_r
    4398145U,	// CACHEI_I_bo_bso
    4529217U,	// CACHEI_I_bo_pos
    4397657U,	// CACHEI_I_bo_pre
    4398168U,	// CACHEI_WI_bo_bso
    4529240U,	// CACHEI_WI_bo_pos
    4397682U,	// CACHEI_WI_bo_pre
    4398206U,	// CACHEI_W_bo_bso
    4529278U,	// CACHEI_W_bo_pos
    4397724U,	// CACHEI_W_bo_pre
    2148536592U,	// CADDN_A_rcr_v110
    103813392U,	// CADDN_A_rrr_v110
    2148537716U,	// CADDN_rcr
    103814516U,	// CADDN_rrr
    35722612U,	// CADDN_src
    33625460U,	// CADDN_srr_v110
    2148536520U,	// CADD_A_rcr_v110
    103813320U,	// CADD_A_rrr_v110
    2148536954U,	// CADD_rcr
    103813754U,	// CADD_rrr
    35721850U,	// CADD_src
    33624698U,	// CADD_srr_v110
    16789U,	// CALLA_b
    136459U,	// CALLI_rr
    136459U,	// CALLI_rr_v110
    17727U,	// CALL_b
    21823U,	// CALL_sb
    33558999U,	// CLO_B_rr_v110
    33559475U,	// CLO_H_rr
    33559962U,	// CLO_rr
    33559046U,	// CLS_B_rr_v110
    33559583U,	// CLS_H_rr
    33560228U,	// CLS_rr
    33559106U,	// CLZ_B_rr_v110
    33559761U,	// CLZ_H_rr
    33561085U,	// CLZ_rr
    35722643U,	// CMOVN_src
    33625491U,	// CMOVN_srr
    35723618U,	// CMOV_src
    33626466U,	// CMOV_srr
    139685013U,	// CMPSWAP_W_bo_bso
    139750549U,	// CMPSWAP_W_bo_c
    139816085U,	// CMPSWAP_W_bo_pos
    139684533U,	// CMPSWAP_W_bo_pre
    6778005U,	// CMPSWAP_W_bo_r
    4877U,	// CMP_F_rr
    2148538728U,	// CRC32B_W_rr
    2148538744U,	// CRC32L_W_rr
    2148536732U,	// CRC32_B_rr
    103814510U,	// CRCN_rrr
    103813383U,	// CSUBN_A__rrr_v110
    103814503U,	// CSUBN_rrr
    103813285U,	// CSUB_A__rrr_v110
    103813705U,	// CSUB_rrr
    3429U,	// DEBUG_sr
    3429U,	// DEBUG_sys
    5748U,	// DEXTR_rrpw
    5748U,	// DEXTR_rrrr
    4287U,	// DIFSC_A_rr_v110
    3421U,	// DISABLE_sys
    135862U,	// DISABLE_sys_1
    4884U,	// DIV_F_rr
    6316U,	// DIV_U_rr
    6493U,	// DIV_rr
    3398U,	// DSYNC_sys
    3392148760U,	// DVADJ_rrr
    3392148760U,	// DVADJ_rrr_v110
    33559832U,	// DVADJ_srr_v110
    6380U,	// DVINIT_BU_rr
    6380U,	// DVINIT_BU_rr_v110
    4636U,	// DVINIT_B_rr
    4636U,	// DVINIT_B_rr_v110
    6447U,	// DVINIT_HU_rr
    6447U,	// DVINIT_HU_rr_v110
    5281U,	// DVINIT_H_rr
    5281U,	// DVINIT_H_rr_v110
    6270U,	// DVINIT_U_rr
    6270U,	// DVINIT_U_rr_v110
    6047U,	// DVINIT_rr
    6047U,	// DVINIT_rr_v110
    3392149557U,	// DVSTEP_U_rrr
    3392149557U,	// DVSTEP_U_rrrv110
    33560629U,	// DVSTEP_Uv110
    3392148913U,	// DVSTEP_rrr
    3392148913U,	// DVSTEP_rrrv110
    33559985U,	// DVSTEPv110
    3414U,	// ENABLE_sys
    536875577U,	// EQANY_B_rc
    4665U,	// EQANY_B_rr
    536876232U,	// EQANY_H_rc
    5320U,	// EQANY_H_rr
    33558871U,	// EQZ_A_rr
    4394U,	// EQ_A_rr
    4574U,	// EQ_B_rr
    5050U,	// EQ_H_rr
    6538U,	// EQ_W_rr
    536876607U,	// EQ_rc
    5695U,	// EQ_rr
    35655726U,	// EQ_src
    33558574U,	// EQ_srr
    536877119U,	// EXTR_U_rrpw
    6207U,	// EXTR_U_rrrr
    536877119U,	// EXTR_U_rrrw
    536876661U,	// EXTR_rrpw
    5749U,	// EXTR_rrrr
    536876661U,	// EXTR_rrrw
    16788U,	// FCALLA_b
    136458U,	// FCALLA_i
    17726U,	// FCALL_b
    3457U,	// FRET_sr
    3457U,	// FRET_sys
    33559993U,	// FTOHP_rr
    33561074U,	// FTOIZ_rr
    33559826U,	// FTOI_rr
    6621U,	// FTOQ31Z_rr
    4253U,	// FTOQ31_rr
    33561107U,	// FTOUZ_rr
    33560905U,	// FTOU_rr
    4322U,	// GE_A_rr
    536877035U,	// GE_U_rc
    6123U,	// GE_U_rr
    536875670U,	// GE_rc
    4758U,	// GE_rr
    33559345U,	// HPTOF_rr
    537924903U,	// IMASK_rcpw
    170923303U,	// IMASK_rcrw
    537924903U,	// IMASK_rrpw
    537924903U,	// IMASK_rrrw
    6088U,	// INSERT_rcpw
    6088U,	// INSERT_rcrr
    536877000U,	// INSERT_rcrw
    6088U,	// INSERT_rrpw
    6088U,	// INSERT_rrrr
    6088U,	// INSERT_rrrw
    3758102299U,	// INSN_T
    3758102387U,	// INS_T
    3404U,	// ISYNC_sys
    33559339U,	// ITOF_rr
    3392149690U,	// IXMAX_U_rrr
    3392149926U,	// IXMAX_rrr
    3392149548U,	// IXMIN_U_rrr
    3392148865U,	// IXMIN_rrr
    16779U,	// JA_b
    1073746217U,	// JEQ_A_brr
    1075844690U,	// JEQ_brc
    1073747538U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    28717U,	// JEQ_sbc_v110
    7344173U,	// JEQ_sbr1
    7344173U,	// JEQ_sbr2
    7344173U,	// JEQ_sbr_v110
    7346662U,	// JGEZ_sbr
    7346662U,	// JGEZ_sbr_v110
    1082136580U,	// JGE_U_brc
    1073747972U,	// JGE_U_brr
    1075843753U,	// JGE_brc
    1073746601U,	// JGE_brr
    7346695U,	// JGTZ_sbr
    7346695U,	// JGTZ_sbr_v110
    136449U,	// JI_rr
    136449U,	// JI_rr_v110
    136449U,	// JI_sbr_v110
    136449U,	// JI_sr
    16783U,	// JLA_b
    7346668U,	// JLEZ_sbr
    7346668U,	// JLEZ_sbr_v110
    136453U,	// JLI_rr
    136453U,	// JLI_rr_v110
    7346701U,	// JLTZ_sbr
    7346701U,	// JLTZ_sbr_v110
    1082136741U,	// JLT_U_brc
    1073748133U,	// JLT_U_brr
    1082136510U,	// JLT_brc
    1073747902U,	// JLT_brr
    17722U,	// JL_b
    1082135174U,	// JNED_brc
    1073746566U,	// JNED_brr
    1082135803U,	// JNEI_brc
    1073747195U,	// JNEI_brr
    1073746152U,	// JNE_A_brr
    1075843807U,	// JNE_brc
    1073746655U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    28706U,	// JNE_sbc_v110
    7344162U,	// JNE_sbr1
    7344162U,	// JNE_sbr2
    7344162U,	// JNE_sbr_v110
    9441616U,	// JNZ_A_brr
    7344464U,	// JNZ_A_sbr
    1073747846U,	// JNZ_T_brn
    7344206U,	// JNZ_T_sbrn
    7344206U,	// JNZ_T_sbrn_v110
    20614U,	// JNZ_sb
    20614U,	// JNZ_sb_v110
    7346690U,	// JNZ_sbr
    7346690U,	// JNZ_sbr_v110
    9441610U,	// JZ_A_brr
    7344458U,	// JZ_A_sbr
    1073747840U,	// JZ_T_brn
    7344194U,	// JZ_T_sbrn
    7344194U,	// JZ_T_sbrn_v110
    20604U,	// JZ_sb
    20604U,	// JZ_sb_v110
    7346681U,	// JZ_sbr
    7346681U,	// JZ_sbr_v110
    17692U,	// J_b
    21788U,	// J_sb
    21788U,	// J_sb_v110
    166323U,	// LDLCX_abs
    4398248U,	// LDLCX_bo_bso
    38864U,	// LDMST_abs
    139684971U,	// LDMST_bo_bso
    139750507U,	// LDMST_bo_c
    139816043U,	// LDMST_bo_pos
    139684487U,	// LDMST_bo_pre
    6777963U,	// LDMST_bo_r
    166337U,	// LDUCX_abs
    4398264U,	// LDUCX_bo_bso
    10490064U,	// LD_A_abs
    213389520U,	// LD_A_bo_bso
    13111504U,	// LD_A_bo_c
    215486672U,	// LD_A_bo_pos
    594128U,	// LD_A_bo_pre
    15208656U,	// LD_A_bo_r
    246943952U,	// LD_A_bol
    142584U,	// LD_A_sc
    45617360U,	// LD_A_slr
    47714512U,	// LD_A_slr_post
    47714512U,	// LD_A_slr_post_v110
    45617360U,	// LD_A_slr_v110
    659664U,	// LD_A_slro
    659664U,	// LD_A_slro_v110
    42146759U,	// LD_A_sro
    42146759U,	// LD_A_sro_v110
    10492099U,	// LD_BU_abs
    213391555U,	// LD_BU_bo_bso
    13113539U,	// LD_BU_bo_c
    215488707U,	// LD_BU_bo_pos
    596163U,	// LD_BU_bo_pre
    15210691U,	// LD_BU_bo_r
    246945987U,	// LD_BU_bol
    45619395U,	// LD_BU_slr
    47716547U,	// LD_BU_slr_post
    47716547U,	// LD_BU_slr_post_v110
    45619395U,	// LD_BU_slr_v110
    661699U,	// LD_BU_slro
    661699U,	// LD_BU_slro_v110
    42146798U,	// LD_BU_sro
    42146798U,	// LD_BU_sro_v110
    10490298U,	// LD_B_abs
    213389754U,	// LD_B_bo_bso
    13111738U,	// LD_B_bo_c
    215486906U,	// LD_B_bo_pos
    594362U,	// LD_B_bo_pre
    15208890U,	// LD_B_bo_r
    246944186U,	// LD_B_bol
    47714746U,	// LD_B_slr_post_v110
    45617594U,	// LD_B_slr_v110
    659898U,	// LD_B_slro_v110
    42146772U,	// LD_B_sro_v110
    10490222U,	// LD_DA_abs
    213389678U,	// LD_DA_bo_bso
    13111662U,	// LD_DA_bo_c
    215486830U,	// LD_DA_bo_pos
    594286U,	// LD_DA_bo_pre
    15208814U,	// LD_DA_bo_r
    10490471U,	// LD_D_abs
    213389927U,	// LD_D_bo_bso
    13111911U,	// LD_D_bo_c
    215487079U,	// LD_D_bo_pos
    594535U,	// LD_D_bo_pre
    15209063U,	// LD_D_bo_r
    10492166U,	// LD_HU_abs
    213391622U,	// LD_HU_bo_bso
    13113606U,	// LD_HU_bo_c
    215488774U,	// LD_HU_bo_pos
    596230U,	// LD_HU_bo_pre
    15210758U,	// LD_HU_bo_r
    246946054U,	// LD_HU_bol
    10490719U,	// LD_H_abs
    213390175U,	// LD_H_bo_bso
    13112159U,	// LD_H_bo_c
    215487327U,	// LD_H_bo_pos
    594783U,	// LD_H_bo_pre
    15209311U,	// LD_H_bo_r
    246944607U,	// LD_H_bol
    45618015U,	// LD_H_slr
    47715167U,	// LD_H_slr_post
    47715167U,	// LD_H_slr_post_v110
    45618015U,	// LD_H_slr_v110
    660319U,	// LD_H_slro
    660319U,	// LD_H_slro_v110
    42146785U,	// LD_H_sro
    42146785U,	// LD_H_sro_v110
    10491350U,	// LD_Q_abs
    213390806U,	// LD_Q_bo_bso
    13112790U,	// LD_Q_bo_c
    215487958U,	// LD_Q_bo_pos
    595414U,	// LD_Q_bo_pre
    15209942U,	// LD_Q_bo_r
    10492274U,	// LD_W_abs
    213391730U,	// LD_W_bo_bso
    13113714U,	// LD_W_bo_c
    215488882U,	// LD_W_bo_pos
    596338U,	// LD_W_bo_pre
    15210866U,	// LD_W_bo_r
    246946162U,	// LD_W_bol
    142601U,	// LD_W_sc
    45619570U,	// LD_W_slr
    47716722U,	// LD_W_slr_post
    47716722U,	// LD_W_slr_post_v110
    45619570U,	// LD_W_slr_v110
    661874U,	// LD_W_slro
    661874U,	// LD_W_slro_v110
    42146812U,	// LD_W_sro
    42146812U,	// LD_W_sro_v110
    10490236U,	// LEA_abs
    213389692U,	// LEA_bo_bso
    246944124U,	// LEA_bol
    10490241U,	// LHA_abs
    43343U,	// LOOPU_brr
    9442752U,	// LOOP_brr
    15734208U,	// LOOP_sbr
    4400U,	// LT_A_rr
    4646U,	// LT_B
    6391U,	// LT_BU
    5291U,	// LT_H
    6458U,	// LT_HU
    536877196U,	// LT_U_rc
    6284U,	// LT_U_rr
    41947237U,	// LT_U_srcv110
    33558629U,	// LT_U_srrv110
    6544U,	// LT_W
    6486U,	// LT_WU
    536876971U,	// LT_rc
    6059U,	// LT_rr
    35655771U,	// LT_src
    33558619U,	// LT_srr
    103814204U,	// MADDMS_H_rrr1_LL
    103814204U,	// MADDMS_H_rrr1_LU
    103814204U,	// MADDMS_H_rrr1_UL
    103814204U,	// MADDMS_H_rrr1_UU
    2148538484U,	// MADDMS_U_rcr_v110
    103815284U,	// MADDMS_U_rrr2_v110
    2148538039U,	// MADDMS_rcr_v110
    103814839U,	// MADDMS_rrr2_v110
    103814032U,	// MADDM_H_rrr1_LL
    103814032U,	// MADDM_H_rrr1_LU
    103814032U,	// MADDM_H_rrr1_UL
    103814032U,	// MADDM_H_rrr1_UU
    103814032U,	// MADDM_H_rrr1_v110
    103814636U,	// MADDM_Q_rrr1_v110
    2148538395U,	// MADDM_U_rcr_v110
    103815195U,	// MADDM_U_rrr2_v110
    2148537690U,	// MADDM_rcr_v110
    103814490U,	// MADDM_rrr2_v110
    103814257U,	// MADDRS_H_rrr1_LL
    103814257U,	// MADDRS_H_rrr1_LU
    103814257U,	// MADDRS_H_rrr1_UL
    103814257U,	// MADDRS_H_rrr1_UL_2
    103814257U,	// MADDRS_H_rrr1_UU
    103814257U,	// MADDRS_H_rrr1_v110
    1714427435U,	// MADDRS_Q_rrr1_L_L
    2251298347U,	// MADDRS_Q_rrr1_U_U
    103814699U,	// MADDRS_Q_rrr1_v110
    103814100U,	// MADDR_H_rrr1_LL
    103814100U,	// MADDR_H_rrr1_LU
    103814100U,	// MADDR_H_rrr1_UL
    103814100U,	// MADDR_H_rrr1_UL_2
    103814100U,	// MADDR_H_rrr1_UU
    103814100U,	// MADDR_H_rrr1_v110
    1714427390U,	// MADDR_Q_rrr1_L_L
    2251298302U,	// MADDR_Q_rrr1_U_U
    103814654U,	// MADDR_Q_rrr1_v110
    103814223U,	// MADDSUMS_H_rrr1_LL
    103814223U,	// MADDSUMS_H_rrr1_LU
    103814223U,	// MADDSUMS_H_rrr1_UL
    103814223U,	// MADDSUMS_H_rrr1_UU
    103814049U,	// MADDSUM_H_rrr1_LL
    103814049U,	// MADDSUM_H_rrr1_LU
    103814049U,	// MADDSUM_H_rrr1_UL
    103814049U,	// MADDSUM_H_rrr1_UU
    103814267U,	// MADDSURS_H_rrr1_LL
    103814267U,	// MADDSURS_H_rrr1_LU
    103814267U,	// MADDSURS_H_rrr1_UL
    103814267U,	// MADDSURS_H_rrr1_UU
    103814117U,	// MADDSUR_H_rrr1_LL
    103814117U,	// MADDSUR_H_rrr1_LU
    103814117U,	// MADDSUR_H_rrr1_UL
    103814117U,	// MADDSUR_H_rrr1_UU
    103814287U,	// MADDSUS_H_rrr1_LL
    103814287U,	// MADDSUS_H_rrr1_LU
    103814287U,	// MADDSUS_H_rrr1_UL
    103814287U,	// MADDSUS_H_rrr1_UU
    103814327U,	// MADDSU_H_rrr1_LL
    103814327U,	// MADDSU_H_rrr1_LU
    103814327U,	// MADDSU_H_rrr1_UL
    103814327U,	// MADDSU_H_rrr1_UU
    103814155U,	// MADDS_H_rrr1_LL
    103814155U,	// MADDS_H_rrr1_LU
    103814155U,	// MADDS_H_rrr1_UL
    103814155U,	// MADDS_H_rrr1_UU
    103814155U,	// MADDS_H_rrr1_v110
    103814680U,	// MADDS_Q_rrr1
    103814680U,	// MADDS_Q_rrr1_L
    1714427416U,	// MADDS_Q_rrr1_L_L
    103814680U,	// MADDS_Q_rrr1_U
    103814680U,	// MADDS_Q_rrr1_UU2_v110
    2251298328U,	// MADDS_Q_rrr1_U_U
    103814680U,	// MADDS_Q_rrr1_e
    103814680U,	// MADDS_Q_rrr1_e_L
    1714427416U,	// MADDS_Q_rrr1_e_L_L
    103814680U,	// MADDS_Q_rrr1_e_U
    2251298328U,	// MADDS_Q_rrr1_e_U_U
    2148538457U,	// MADDS_U_rcr
    2148538457U,	// MADDS_U_rcr_e
    103815257U,	// MADDS_U_rrr2
    103815257U,	// MADDS_U_rrr2_e
    2148538004U,	// MADDS_rcr
    2148538004U,	// MADDS_rcr_e
    103814804U,	// MADDS_rrr2
    103814804U,	// MADDS_rrr2_e
    103813877U,	// MADD_F_rrr
    103813975U,	// MADD_H_rrr1_LL
    103813975U,	// MADD_H_rrr1_LU
    103813975U,	// MADD_H_rrr1_UL
    103813975U,	// MADD_H_rrr1_UU
    103813975U,	// MADD_H_rrr1_v110
    103814606U,	// MADD_Q_rrr1
    103814606U,	// MADD_Q_rrr1_L
    1714427342U,	// MADD_Q_rrr1_L_L
    103814606U,	// MADD_Q_rrr1_U
    103814606U,	// MADD_Q_rrr1_UU2_v110
    2251298254U,	// MADD_Q_rrr1_U_U
    103814606U,	// MADD_Q_rrr1_e
    103814606U,	// MADD_Q_rrr1_e_L
    1714427342U,	// MADD_Q_rrr1_e_L_L
    103814606U,	// MADD_Q_rrr1_e_U
    2251298254U,	// MADD_Q_rrr1_e_U_U
    2148538335U,	// MADD_U_rcr
    103815135U,	// MADD_U_rrr2
    2148536960U,	// MADD_rcr
    2148536960U,	// MADD_rcr_e
    103813760U,	// MADD_rrr2
    103813760U,	// MADD_rrr2_e
    4658U,	// MAX_B
    6398U,	// MAX_BU
    5313U,	// MAX_H
    6465U,	// MAX_HU
    536877244U,	// MAX_U_rc
    6332U,	// MAX_U_rr
    536877480U,	// MAX_rc
    6568U,	// MAX_rr
    16782935U,	// MFCR_rlc
    4560U,	// MIN_B
    6346U,	// MIN_BU
    5036U,	// MIN_H
    6413U,	// MIN_HU
    536877102U,	// MIN_U_rc
    6190U,	// MIN_U_rr
    536876419U,	// MIN_rc
    5507U,	// MIN_rr
    16781560U,	// MOVH_A_rlc
    16782563U,	// MOVH_rlc
    135518U,	// MOVZ_A_sr
    34607462U,	// MOV_AA_rr
    33558886U,	// MOV_AA_srr_srr
    33558886U,	// MOV_AA_srr_srr_v110
    34607420U,	// MOV_A_rr
    41947452U,	// MOV_A_src
    33558844U,	// MOV_A_srr
    33558844U,	// MOV_A_srr_v110
    34607731U,	// MOV_D_rr
    33559155U,	// MOV_D_srr_srr
    33559155U,	// MOV_D_srr_srr_v110
    16783539U,	// MOV_U_rlc
    17832291U,	// MOV_rlc
    16783715U,	// MOV_rlc_e
    34609507U,	// MOV_rr
    34609507U,	// MOV_rr_e
    6499U,	// MOV_rr_eab
    139377U,	// MOV_sc
    139377U,	// MOV_sc_v110
    35658083U,	// MOV_src
    35658083U,	// MOV_src_e
    33560931U,	// MOV_srr
    103814192U,	// MSUBADMS_H_rrr1_LL
    103814192U,	// MSUBADMS_H_rrr1_LU
    103814192U,	// MSUBADMS_H_rrr1_UL
    103814192U,	// MSUBADMS_H_rrr1_UU
    103814021U,	// MSUBADM_H_rrr1_LL
    103814021U,	// MSUBADM_H_rrr1_LU
    103814021U,	// MSUBADM_H_rrr1_UL
    103814021U,	// MSUBADM_H_rrr1_UU
    103814245U,	// MSUBADRS_H_rrr1_LL
    103814245U,	// MSUBADRS_H_rrr1_LU
    103814245U,	// MSUBADRS_H_rrr1_UL
    103814245U,	// MSUBADRS_H_rrr1_UU
    103814245U,	// MSUBADRS_H_rrr1_v110
    103814089U,	// MSUBADR_H_rrr1_LL
    103814089U,	// MSUBADR_H_rrr1_LU
    103814089U,	// MSUBADR_H_rrr1_UL
    103814089U,	// MSUBADR_H_rrr1_UU
    103814089U,	// MSUBADR_H_rrr1_v110
    103814144U,	// MSUBADS_H_rrr1_LL
    103814144U,	// MSUBADS_H_rrr1_LU
    103814144U,	// MSUBADS_H_rrr1_UL
    103814144U,	// MSUBADS_H_rrr1_UU
    103813965U,	// MSUBAD_H_rrr1_LL
    103813965U,	// MSUBAD_H_rrr1_LU
    103813965U,	// MSUBAD_H_rrr1_UL
    103813965U,	// MSUBAD_H_rrr1_UU
    103814182U,	// MSUBMS_H_rrr1_LL
    103814182U,	// MSUBMS_H_rrr1_LU
    103814182U,	// MSUBMS_H_rrr1_UL
    103814182U,	// MSUBMS_H_rrr1_UU
    2148538474U,	// MSUBMS_U_rcrv110
    103815274U,	// MSUBMS_U_rrr2v110
    2148538031U,	// MSUBMS_rcrv110
    103814831U,	// MSUBMS_rrr2v110
    103814012U,	// MSUBM_H_rrr1_LL
    103814012U,	// MSUBM_H_rrr1_LU
    103814012U,	// MSUBM_H_rrr1_UL
    103814012U,	// MSUBM_H_rrr1_UU
    103814012U,	// MSUBM_H_rrr1_v110
    103814627U,	// MSUBM_Q_rrr1_v110
    2148538386U,	// MSUBM_U_rcrv110
    103815186U,	// MSUBM_U_rrr2v110
    2148537683U,	// MSUBM_rcrv110
    103814483U,	// MSUBM_rrr2v110
    103814235U,	// MSUBRS_H_rrr1_LL
    103814235U,	// MSUBRS_H_rrr1_LU
    103814235U,	// MSUBRS_H_rrr1_UL
    103814235U,	// MSUBRS_H_rrr1_UL_2
    103814235U,	// MSUBRS_H_rrr1_UU
    103814235U,	// MSUBRS_H_rrr1_v110
    1714427425U,	// MSUBRS_Q_rrr1_L_L
    2251298337U,	// MSUBRS_Q_rrr1_U_U
    103814689U,	// MSUBRS_Q_rrr1_v110
    103814080U,	// MSUBR_H_rrr1_LL
    103814080U,	// MSUBR_H_rrr1_LU
    103814080U,	// MSUBR_H_rrr1_UL
    103814080U,	// MSUBR_H_rrr1_UL_2
    103814080U,	// MSUBR_H_rrr1_UU
    103814080U,	// MSUBR_H_rrr1_v110
    1714427381U,	// MSUBR_Q_rrr1_L_L
    2251298293U,	// MSUBR_Q_rrr1_U_U
    103814645U,	// MSUBR_Q_rrr1_v110
    103814135U,	// MSUBS_H_rrr1_LL
    103814135U,	// MSUBS_H_rrr1_LU
    103814135U,	// MSUBS_H_rrr1_UL
    103814135U,	// MSUBS_H_rrr1_UU
    103814135U,	// MSUBS_H_rrr1_v110
    103814671U,	// MSUBS_Q_rrr1
    103814671U,	// MSUBS_Q_rrr1_L
    1714427407U,	// MSUBS_Q_rrr1_L_L
    103814671U,	// MSUBS_Q_rrr1_U
    103814671U,	// MSUBS_Q_rrr1_UU2_v110
    2251298319U,	// MSUBS_Q_rrr1_U_U
    103814671U,	// MSUBS_Q_rrr1_e
    103814671U,	// MSUBS_Q_rrr1_e_L
    1714427407U,	// MSUBS_Q_rrr1_e_L_L
    103814671U,	// MSUBS_Q_rrr1_e_U
    2251298319U,	// MSUBS_Q_rrr1_e_U_U
    2148538439U,	// MSUBS_U_rcr
    2148538439U,	// MSUBS_U_rcr_e
    103815239U,	// MSUBS_U_rrr2
    103815239U,	// MSUBS_U_rrr2_e
    2148537990U,	// MSUBS_rcr
    2148537990U,	// MSUBS_rcr_e
    103814790U,	// MSUBS_rrr2
    103814790U,	// MSUBS_rrr2_e
    103813869U,	// MSUB_F_rrr
    103813957U,	// MSUB_H_rrr1_LL
    103813957U,	// MSUB_H_rrr1_LU
    103813957U,	// MSUB_H_rrr1_UL
    103813957U,	// MSUB_H_rrr1_UU
    103813957U,	// MSUB_H_rrr1_v110
    103814598U,	// MSUB_Q_rrr1
    103814598U,	// MSUB_Q_rrr1_L
    1714427334U,	// MSUB_Q_rrr1_L_L
    103814598U,	// MSUB_Q_rrr1_U
    103814598U,	// MSUB_Q_rrr1_UU2_v110
    2251298246U,	// MSUB_Q_rrr1_U_U
    103814598U,	// MSUB_Q_rrr1_e
    103814598U,	// MSUB_Q_rrr1_e_L
    1714427334U,	// MSUB_Q_rrr1_e_L_L
    103814598U,	// MSUB_Q_rrr1_e_U
    2251298246U,	// MSUB_Q_rrr1_e_U_U
    2148538327U,	// MSUB_U_rcr
    103815127U,	// MSUB_U_rrr2
    2148536911U,	// MSUB_rcr
    2148536911U,	// MSUB_rcr_e
    103813711U,	// MSUB_rrr2
    103813711U,	// MSUB_rrr2_e
    46685U,	// MTCR_rlc
    5190U,	// MULMS_H_rr1_LL2e
    5190U,	// MULMS_H_rr1_LU2e
    5190U,	// MULMS_H_rr1_UL2e
    5190U,	// MULMS_H_rr1_UU2e
    5017U,	// MULM_H_rr1_LL2e
    5017U,	// MULM_H_rr1_LU2e
    5017U,	// MULM_H_rr1_UL2e
    5017U,	// MULM_H_rr1_UU2e
    536877092U,	// MULM_U_rc
    6180U,	// MULM_U_rr
    536876385U,	// MULM_rc
    5473U,	// MULM_rr
    5085U,	// MULR_H_rr1_LL2e
    5085U,	// MULR_H_rr1_LU2e
    5085U,	// MULR_H_rr1_UL2e
    5085U,	// MULR_H_rr1_UU2e
    5085U,	// MULR_H_rr_v110
    268441095U,	// MULR_Q_rr1_2LL
    301995527U,	// MULR_Q_rr1_2UU
    5639U,	// MULR_Q_rr_v110
    536877154U,	// MULS_U_rc
    6242U,	// MULS_U_rr2
    6242U,	// MULS_U_rr_v110
    536876713U,	// MULS_rc
    5801U,	// MULS_rr2
    5801U,	// MULS_rr_v110
    4870U,	// MUL_F_rrr
    4981U,	// MUL_H_rr1_LL2e
    4981U,	// MUL_H_rr1_LU2e
    4981U,	// MUL_H_rr1_UL2e
    4981U,	// MUL_H_rr1_UU2e
    4981U,	// MUL_H_rr_v110
    5596U,	// MUL_Q_rr1_2
    268441052U,	// MUL_Q_rr1_2LL
    301995484U,	// MUL_Q_rr1_2UU
    5596U,	// MUL_Q_rr1_2_L
    5596U,	// MUL_Q_rr1_2_Le
    5596U,	// MUL_Q_rr1_2_U
    5596U,	// MUL_Q_rr1_2_Ue
    5596U,	// MUL_Q_rr1_2__e
    5596U,	// MUL_Q_rr_v110
    536877067U,	// MUL_U_rc
    6155U,	// MUL_U_rr2
    536876366U,	// MUL_rc
    536876366U,	// MUL_rc_e
    5454U,	// MUL_rr2
    5454U,	// MUL_rr2_e
    5454U,	// MUL_rr_v110
    33559886U,	// MUL_srr
    3758102247U,	// NAND_T
    536875660U,	// NAND_rc
    4748U,	// NAND_rr
    33558851U,	// NEZ_A
    4329U,	// NE_A
    536875724U,	// NE_rc
    4812U,	// NE_rr
    3453U,	// NOP_sr
    3453U,	// NOP_sys
    3758102339U,	// NOR_T
    536876644U,	// NOR_rc
    5732U,	// NOR_rr
    136804U,	// NOR_sr
    136804U,	// NOR_sr_v110
    137155U,	// NOT_sr_v162
    3758102292U,	// ORN_T
    536876430U,	// ORN_rc
    5518U,	// ORN_rr
    3758102278U,	// OR_ANDN_T
    3758102234U,	// OR_AND_T
    536876619U,	// OR_EQ_rc
    5707U,	// OR_EQ_rr
    536877051U,	// OR_GE_U_rc
    6139U,	// OR_GE_U_rr
    536875682U,	// OR_GE_rc
    4770U,	// OR_GE_rr
    536877212U,	// OR_LT_U_rc
    6300U,	// OR_LT_U_rr
    536876983U,	// OR_LT_rc
    6071U,	// OR_LT_rr
    536875736U,	// OR_NE_rc
    4824U,	// OR_NE_rr
    3758102356U,	// OR_NOR_T
    3758102326U,	// OR_OR_T
    3758102311U,	// OR_T
    2684360293U,	// OR_rc
    5733U,	// OR_rr
    139320U,	// OR_sc
    139320U,	// OR_sc_v110
    33560165U,	// OR_srr
    33560165U,	// OR_srr_v110
    3325039905U,	// PACK_rrr
    33561045U,	// PARITY_rr
    33561045U,	// PARITY_rr_v110
    33560982U,	// POPCNT_W_rr
    4899U,	// Q31TOF_rr
    33559293U,	// QSEED_F_rr
    135908U,	// RESTORE_sys
    3458U,	// RET_sr
    3458U,	// RET_sys
    3458U,	// RET_sys_v110
    3410U,	// RFE_sr
    3410U,	// RFE_sys_sys
    3410U,	// RFE_sys_sys_v110
    3449U,	// RFM_sys
    3485U,	// RSLCX_sys
    3480U,	// RSTV_sys
    536877136U,	// RSUBS_U_rc
    536876685U,	// RSUBS_rc
    536875605U,	// RSUB_rc
    135765U,	// RSUB_sr_sr
    135765U,	// RSUB_sr_sr_v110
    33560804U,	// SAT_BU_rr
    137444U,	// SAT_BU_sr
    137444U,	// SAT_BU_sr_v110
    33559061U,	// SAT_B_rr
    135701U,	// SAT_B_sr
    135701U,	// SAT_B_sr_v110
    33560871U,	// SAT_HU_rr
    137511U,	// SAT_HU_sr
    137511U,	// SAT_HU_sr_v110
    33559706U,	// SAT_H_rr
    136346U,	// SAT_H_sr
    136346U,	// SAT_H_sr_v110
    2148536601U,	// SELN_A_rcr_v110
    103813401U,	// SELN_A_rrr_v110
    2148537736U,	// SELN_rcr
    103814536U,	// SELN_rrr
    2148536576U,	// SEL_A_rcr_v110
    103813376U,	// SEL_A_rrr_v110
    2148537646U,	// SEL_rcr
    103814446U,	// SEL_rrr
    536876667U,	// SHAS_rc
    5755U,	// SHAS_rr
    536875429U,	// SHA_B_rc
    4517U,	// SHA_B_rr
    536875838U,	// SHA_H_rc
    4926U,	// SHA_H_rr
    536875398U,	// SHA_rc
    4486U,	// SHA_rr
    35656070U,	// SHA_src
    35656070U,	// SHA_src_v110
    536875711U,	// SHUFFLE_rc
    3758102267U,	// SH_ANDN_T
    3758102224U,	// SH_AND_T
    536875466U,	// SH_B_rc
    4554U,	// SH_B_rr
    536876611U,	// SH_EQ_rc
    5699U,	// SH_EQ_rr
    536877041U,	// SH_GE_U_rc
    6129U,	// SH_GE_U_rr
    536875674U,	// SH_GE_rc
    4762U,	// SH_GE_rr
    536875887U,	// SH_H_rc
    4975U,	// SH_H_rr
    536877202U,	// SH_LT_U_rc
    6290U,	// SH_LT_U_rr
    536876975U,	// SH_LT_rc
    6063U,	// SH_LT_rr
    3758102244U,	// SH_NAND_T
    536875728U,	// SH_NE_rc
    4816U,	// SH_NE_rr
    3758102346U,	// SH_NOR_T
    3758102289U,	// SH_ORN_T
    3758102317U,	// SH_OR_T
    3758102366U,	// SH_XNOR_T
    3758102377U,	// SH_XOR_T
    536876255U,	// SH_rc
    5343U,	// SH_rr
    35656927U,	// SH_src
    35656927U,	// SH_src_v110
    166330U,	// STLCX_abs
    4398256U,	// STLCX_bo_bso
    166344U,	// STUCX_abs
    4398272U,	// STUCX_bo_bso
    37174U,	// ST_A_abs
    139684882U,	// ST_A_bo_bso
    3327400978U,	// ST_A_bo_c
    139815954U,	// ST_A_bo_pos
    139684388U,	// ST_A_bo_pre
    34020370U,	// ST_A_bo_r
    19078162U,	// ST_A_bol
    732442U,	// ST_A_sc
    344136722U,	// ST_A_sro
    344136722U,	// ST_A_sro_v110
    793618U,	// ST_A_ssr
    859154U,	// ST_A_ssr_pos
    859154U,	// ST_A_ssr_pos_v110
    793618U,	// ST_A_ssr_v110
    52424U,	// ST_A_ssro
    52424U,	// ST_A_ssro_v110
    37420U,	// ST_B_abs
    139684897U,	// ST_B_bo_bso
    3327400993U,	// ST_B_bo_c
    139815969U,	// ST_B_bo_pos
    139684405U,	// ST_B_bo_pre
    34020385U,	// ST_B_bo_r
    19078177U,	// ST_B_bol
    377691169U,	// ST_B_sro
    377691169U,	// ST_B_sro_v110
    793633U,	// ST_B_ssr
    859169U,	// ST_B_ssr_pos
    859169U,	// ST_B_ssr_pos_v110
    793633U,	// ST_B_ssr_v110
    52436U,	// ST_B_ssro
    52436U,	// ST_B_ssro_v110
    37237U,	// ST_DA_abs
    139684889U,	// ST_DA_bo_bso
    3327400985U,	// ST_DA_bo_c
    139815961U,	// ST_DA_bo_pos
    139684396U,	// ST_DA_bo_pre
    34020377U,	// ST_DA_bo_r
    37485U,	// ST_D_abs
    139684904U,	// ST_D_bo_bso
    3327401000U,	// ST_D_bo_c
    139815976U,	// ST_D_bo_pos
    139684413U,	// ST_D_bo_pre
    34020392U,	// ST_D_bo_r
    38065U,	// ST_H_abs
    139684911U,	// ST_H_bo_bso
    3327401007U,	// ST_H_bo_c
    139815983U,	// ST_H_bo_pos
    139684421U,	// ST_H_bo_pre
    34020399U,	// ST_H_bo_r
    19078191U,	// ST_H_bol
    377691183U,	// ST_H_sro
    377691183U,	// ST_H_sro_v110
    793647U,	// ST_H_ssr
    859183U,	// ST_H_ssr_pos
    859183U,	// ST_H_ssr_pos_v110
    793647U,	// ST_H_ssr_v110
    52448U,	// ST_H_ssro
    52448U,	// ST_H_ssro_v110
    38453U,	// ST_Q_abs
    139684964U,	// ST_Q_bo_bso
    3327401060U,	// ST_Q_bo_c
    139816036U,	// ST_Q_bo_pos
    139684479U,	// ST_Q_bo_pre
    34020452U,	// ST_Q_bo_r
    34682U,	// ST_T
    39328U,	// ST_W_abs
    139685025U,	// ST_W_bo_bso
    3327401121U,	// ST_W_bo_c
    139816097U,	// ST_W_bo_pos
    139684546U,	// ST_W_bo_pre
    34020513U,	// ST_W_bo_r
    19078305U,	// ST_W_bol
    929061U,	// ST_W_sc
    377691297U,	// ST_W_sro
    377691297U,	// ST_W_sro_v110
    793761U,	// ST_W_ssr
    859297U,	// ST_W_ssr_pos
    859297U,	// ST_W_ssr_pos_v110
    793761U,	// ST_W_ssr_v110
    52460U,	// ST_W_ssro
    52460U,	// ST_W_ssro_v110
    4699U,	// SUBC_rr
    4269U,	// SUBSC_A_rr
    6354U,	// SUBS_BU_rr
    4587U,	// SUBS_B_rr
    6421U,	// SUBS_HU_rr
    5112U,	// SUBS_H_rr
    6216U,	// SUBS_U_rr
    5767U,	// SUBS_rr
    33560199U,	// SUBS_srr
    6573U,	// SUBX_rr
    4262U,	// SUB_A_rr
    139409U,	// SUB_A_sc
    139409U,	// SUB_A_sc_v110
    4524U,	// SUB_B_rr
    3325039342U,	// SUB_F_rrr
    4934U,	// SUB_H_rr
    4682U,	// SUB_rr
    33559114U,	// SUB_srr
    33558529U,	// SUB_srr_15a
    33624650U,	// SUB_srr_a15
    3491U,	// SVLCX_sys
    139685001U,	// SWAPMSK_W_bo_bso
    3327401097U,	// SWAPMSK_W_bo_c
    1010825U,	// SWAPMSK_W_bo_i
    139816073U,	// SWAPMSK_W_bo_pos
    139684520U,	// SWAPMSK_W_bo_pre
    34020489U,	// SWAPMSK_W_bo_r
    37153U,	// SWAP_A_abs
    139684873U,	// SWAP_A_bo_bso
    3327400969U,	// SWAP_A_bo_c
    139815945U,	// SWAP_A_bo_pos
    139684378U,	// SWAP_A_bo_pre
    34020361U,	// SWAP_A_bo_r
    39298U,	// SWAP_W_abs
    139685016U,	// SWAP_W_bo_bso
    3327401112U,	// SWAP_W_bo_c
    1010840U,	// SWAP_W_bo_i
    139816088U,	// SWAP_W_bo_pos
    139684536U,	// SWAP_W_bo_pre
    34020504U,	// SWAP_W_bo_r
    13637U,	// SYSCALL_rc
    136615U,	// TLBDEMAP_rr
    3376U,	// TLBFLUSH_A_rr
    3387U,	// TLBFLUSH_B_rr
    136607U,	// TLBMAP_rr
    135382U,	// TLBPROBE_A_rr
    136425U,	// TLBPROBE_I_rr
    3473U,	// TRAPSV_sys
    3467U,	// TRAPV_sys
    33559839U,	// UNPACK_rr_rr
    33559839U,	// UNPACK_rr_rr_v110
    136499U,	// UPDFL_rr
    33559352U,	// UTOF_rr
    3462U,	// WAIT_sys
    3758102369U,	// XNOR_T
    536876643U,	// XNOR_rc
    5731U,	// XNOR_rr
    536876618U,	// XOR_EQ_rc
    5706U,	// XOR_EQ_rr
    536877050U,	// XOR_GE_U_rc
    6138U,	// XOR_GE_U_rr
    536875681U,	// XOR_GE_rc
    4769U,	// XOR_GE_rr
    536877211U,	// XOR_LT_U_rc
    6299U,	// XOR_LT_U_rr
    536876982U,	// XOR_LT_rc
    6070U,	// XOR_LT_rr
    536875735U,	// XOR_NE_rc
    4823U,	// XOR_NE_rr
    3758102380U,	// XOR_T
    536876649U,	// XOR_rc
    5737U,	// XOR_rr
    33560169U,	// XOR_srr
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    2U,	// ADDSC_A_rr
    2U,	// ADDSC_A_rr_v110
    0U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    34U,	// CADDN_A_rcr_v110
    69U,	// CADDN_A_rrr_v110
    34U,	// CADDN_rcr
    69U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    34U,	// CADD_A_rcr_v110
    69U,	// CADD_A_rrr_v110
    34U,	// CADD_rcr
    69U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    69U,	// CRCN_rrr
    69U,	// CSUBN_A__rrr_v110
    69U,	// CSUBN_rrr
    69U,	// CSUB_A__rrr_v110
    69U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    98U,	// DEXTR_rrpw
    98U,	// DEXTR_rrrr
    2U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    7U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    7U,	// EXTR_U_rrrw
    7U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    7U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    7U,	// IMASK_rcpw
    7U,	// IMASK_rcrw
    7U,	// IMASK_rrpw
    7U,	// IMASK_rrrw
    610U,	// INSERT_rcpw
    98U,	// INSERT_rcrr
    1157U,	// INSERT_rcrw
    610U,	// INSERT_rrpw
    98U,	// INSERT_rrrr
    610U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    1U,	// JEQ_A_brr
    1U,	// JEQ_brc
    1U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    1U,	// JGE_U_brc
    1U,	// JGE_U_brr
    1U,	// JGE_brc
    1U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    1U,	// JLT_U_brc
    1U,	// JLT_U_brr
    1U,	// JLT_brc
    1U,	// JLT_brr
    0U,	// JL_b
    1U,	// JNED_brc
    1U,	// JNED_brr
    1U,	// JNEI_brc
    1U,	// JNEI_brr
    1U,	// JNE_A_brr
    1U,	// JNE_brc
    1U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    1U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    1U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    165U,	// MADDMS_H_rrr1_LL
    197U,	// MADDMS_H_rrr1_LU
    229U,	// MADDMS_H_rrr1_UL
    261U,	// MADDMS_H_rrr1_UU
    290U,	// MADDMS_U_rcr_v110
    69U,	// MADDMS_U_rrr2_v110
    34U,	// MADDMS_rcr_v110
    69U,	// MADDMS_rrr2_v110
    165U,	// MADDM_H_rrr1_LL
    197U,	// MADDM_H_rrr1_LU
    229U,	// MADDM_H_rrr1_UL
    261U,	// MADDM_H_rrr1_UU
    69U,	// MADDM_H_rrr1_v110
    69U,	// MADDM_Q_rrr1_v110
    290U,	// MADDM_U_rcr_v110
    69U,	// MADDM_U_rrr2_v110
    34U,	// MADDM_rcr_v110
    69U,	// MADDM_rrr2_v110
    165U,	// MADDRS_H_rrr1_LL
    197U,	// MADDRS_H_rrr1_LU
    229U,	// MADDRS_H_rrr1_UL
    229U,	// MADDRS_H_rrr1_UL_2
    261U,	// MADDRS_H_rrr1_UU
    1669U,	// MADDRS_H_rrr1_v110
    1U,	// MADDRS_Q_rrr1_L_L
    1U,	// MADDRS_Q_rrr1_U_U
    1669U,	// MADDRS_Q_rrr1_v110
    165U,	// MADDR_H_rrr1_LL
    197U,	// MADDR_H_rrr1_LU
    229U,	// MADDR_H_rrr1_UL
    229U,	// MADDR_H_rrr1_UL_2
    261U,	// MADDR_H_rrr1_UU
    1669U,	// MADDR_H_rrr1_v110
    1U,	// MADDR_Q_rrr1_L_L
    1U,	// MADDR_Q_rrr1_U_U
    1669U,	// MADDR_Q_rrr1_v110
    165U,	// MADDSUMS_H_rrr1_LL
    197U,	// MADDSUMS_H_rrr1_LU
    229U,	// MADDSUMS_H_rrr1_UL
    261U,	// MADDSUMS_H_rrr1_UU
    165U,	// MADDSUM_H_rrr1_LL
    197U,	// MADDSUM_H_rrr1_LU
    229U,	// MADDSUM_H_rrr1_UL
    261U,	// MADDSUM_H_rrr1_UU
    165U,	// MADDSURS_H_rrr1_LL
    197U,	// MADDSURS_H_rrr1_LU
    229U,	// MADDSURS_H_rrr1_UL
    261U,	// MADDSURS_H_rrr1_UU
    165U,	// MADDSUR_H_rrr1_LL
    197U,	// MADDSUR_H_rrr1_LU
    229U,	// MADDSUR_H_rrr1_UL
    261U,	// MADDSUR_H_rrr1_UU
    165U,	// MADDSUS_H_rrr1_LL
    197U,	// MADDSUS_H_rrr1_LU
    229U,	// MADDSUS_H_rrr1_UL
    261U,	// MADDSUS_H_rrr1_UU
    165U,	// MADDSU_H_rrr1_LL
    197U,	// MADDSU_H_rrr1_LU
    229U,	// MADDSU_H_rrr1_UL
    261U,	// MADDSU_H_rrr1_UU
    165U,	// MADDS_H_rrr1_LL
    197U,	// MADDS_H_rrr1_LU
    229U,	// MADDS_H_rrr1_UL
    261U,	// MADDS_H_rrr1_UU
    1669U,	// MADDS_H_rrr1_v110
    1669U,	// MADDS_Q_rrr1
    325U,	// MADDS_Q_rrr1_L
    1U,	// MADDS_Q_rrr1_L_L
    357U,	// MADDS_Q_rrr1_U
    1669U,	// MADDS_Q_rrr1_UU2_v110
    1U,	// MADDS_Q_rrr1_U_U
    1669U,	// MADDS_Q_rrr1_e
    325U,	// MADDS_Q_rrr1_e_L
    1U,	// MADDS_Q_rrr1_e_L_L
    357U,	// MADDS_Q_rrr1_e_U
    1U,	// MADDS_Q_rrr1_e_U_U
    34U,	// MADDS_U_rcr
    34U,	// MADDS_U_rcr_e
    69U,	// MADDS_U_rrr2
    69U,	// MADDS_U_rrr2_e
    34U,	// MADDS_rcr
    34U,	// MADDS_rcr_e
    69U,	// MADDS_rrr2
    69U,	// MADDS_rrr2_e
    69U,	// MADD_F_rrr
    165U,	// MADD_H_rrr1_LL
    197U,	// MADD_H_rrr1_LU
    229U,	// MADD_H_rrr1_UL
    261U,	// MADD_H_rrr1_UU
    1669U,	// MADD_H_rrr1_v110
    1669U,	// MADD_Q_rrr1
    325U,	// MADD_Q_rrr1_L
    1U,	// MADD_Q_rrr1_L_L
    357U,	// MADD_Q_rrr1_U
    1669U,	// MADD_Q_rrr1_UU2_v110
    1U,	// MADD_Q_rrr1_U_U
    1669U,	// MADD_Q_rrr1_e
    325U,	// MADD_Q_rrr1_e_L
    1U,	// MADD_Q_rrr1_e_L_L
    357U,	// MADD_Q_rrr1_e_U
    1U,	// MADD_Q_rrr1_e_U_U
    290U,	// MADD_U_rcr
    69U,	// MADD_U_rrr2
    34U,	// MADD_rcr
    34U,	// MADD_rcr_e
    69U,	// MADD_rrr2
    69U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOVZ_A_sr
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr_srr
    0U,	// MOV_AA_srr_srr_v110
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_A_srr_v110
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr_srr
    0U,	// MOV_D_srr_srr_v110
    0U,	// MOV_U_rlc
    0U,	// MOV_rlc
    0U,	// MOV_rlc_e
    0U,	// MOV_rr
    0U,	// MOV_rr_e
    0U,	// MOV_rr_eab
    0U,	// MOV_sc
    0U,	// MOV_sc_v110
    0U,	// MOV_src
    0U,	// MOV_src_e
    0U,	// MOV_srr
    165U,	// MSUBADMS_H_rrr1_LL
    197U,	// MSUBADMS_H_rrr1_LU
    229U,	// MSUBADMS_H_rrr1_UL
    261U,	// MSUBADMS_H_rrr1_UU
    165U,	// MSUBADM_H_rrr1_LL
    197U,	// MSUBADM_H_rrr1_LU
    229U,	// MSUBADM_H_rrr1_UL
    261U,	// MSUBADM_H_rrr1_UU
    165U,	// MSUBADRS_H_rrr1_LL
    197U,	// MSUBADRS_H_rrr1_LU
    229U,	// MSUBADRS_H_rrr1_UL
    261U,	// MSUBADRS_H_rrr1_UU
    1669U,	// MSUBADRS_H_rrr1_v110
    165U,	// MSUBADR_H_rrr1_LL
    197U,	// MSUBADR_H_rrr1_LU
    229U,	// MSUBADR_H_rrr1_UL
    261U,	// MSUBADR_H_rrr1_UU
    1669U,	// MSUBADR_H_rrr1_v110
    165U,	// MSUBADS_H_rrr1_LL
    197U,	// MSUBADS_H_rrr1_LU
    229U,	// MSUBADS_H_rrr1_UL
    261U,	// MSUBADS_H_rrr1_UU
    165U,	// MSUBAD_H_rrr1_LL
    197U,	// MSUBAD_H_rrr1_LU
    229U,	// MSUBAD_H_rrr1_UL
    261U,	// MSUBAD_H_rrr1_UU
    165U,	// MSUBMS_H_rrr1_LL
    197U,	// MSUBMS_H_rrr1_LU
    229U,	// MSUBMS_H_rrr1_UL
    261U,	// MSUBMS_H_rrr1_UU
    34U,	// MSUBMS_U_rcrv110
    69U,	// MSUBMS_U_rrr2v110
    34U,	// MSUBMS_rcrv110
    69U,	// MSUBMS_rrr2v110
    165U,	// MSUBM_H_rrr1_LL
    197U,	// MSUBM_H_rrr1_LU
    229U,	// MSUBM_H_rrr1_UL
    261U,	// MSUBM_H_rrr1_UU
    69U,	// MSUBM_H_rrr1_v110
    69U,	// MSUBM_Q_rrr1_v110
    34U,	// MSUBM_U_rcrv110
    69U,	// MSUBM_U_rrr2v110
    34U,	// MSUBM_rcrv110
    69U,	// MSUBM_rrr2v110
    165U,	// MSUBRS_H_rrr1_LL
    197U,	// MSUBRS_H_rrr1_LU
    229U,	// MSUBRS_H_rrr1_UL
    229U,	// MSUBRS_H_rrr1_UL_2
    261U,	// MSUBRS_H_rrr1_UU
    1669U,	// MSUBRS_H_rrr1_v110
    1U,	// MSUBRS_Q_rrr1_L_L
    1U,	// MSUBRS_Q_rrr1_U_U
    1669U,	// MSUBRS_Q_rrr1_v110
    165U,	// MSUBR_H_rrr1_LL
    197U,	// MSUBR_H_rrr1_LU
    229U,	// MSUBR_H_rrr1_UL
    229U,	// MSUBR_H_rrr1_UL_2
    261U,	// MSUBR_H_rrr1_UU
    1669U,	// MSUBR_H_rrr1_v110
    1U,	// MSUBR_Q_rrr1_L_L
    1U,	// MSUBR_Q_rrr1_U_U
    1669U,	// MSUBR_Q_rrr1_v110
    165U,	// MSUBS_H_rrr1_LL
    197U,	// MSUBS_H_rrr1_LU
    229U,	// MSUBS_H_rrr1_UL
    261U,	// MSUBS_H_rrr1_UU
    1669U,	// MSUBS_H_rrr1_v110
    1669U,	// MSUBS_Q_rrr1
    325U,	// MSUBS_Q_rrr1_L
    1U,	// MSUBS_Q_rrr1_L_L
    357U,	// MSUBS_Q_rrr1_U
    1669U,	// MSUBS_Q_rrr1_UU2_v110
    1U,	// MSUBS_Q_rrr1_U_U
    1669U,	// MSUBS_Q_rrr1_e
    325U,	// MSUBS_Q_rrr1_e_L
    1U,	// MSUBS_Q_rrr1_e_L_L
    357U,	// MSUBS_Q_rrr1_e_U
    1U,	// MSUBS_Q_rrr1_e_U_U
    34U,	// MSUBS_U_rcr
    34U,	// MSUBS_U_rcr_e
    69U,	// MSUBS_U_rrr2
    69U,	// MSUBS_U_rrr2_e
    34U,	// MSUBS_rcr
    34U,	// MSUBS_rcr_e
    69U,	// MSUBS_rrr2
    69U,	// MSUBS_rrr2_e
    69U,	// MSUB_F_rrr
    165U,	// MSUB_H_rrr1_LL
    197U,	// MSUB_H_rrr1_LU
    229U,	// MSUB_H_rrr1_UL
    261U,	// MSUB_H_rrr1_UU
    1669U,	// MSUB_H_rrr1_v110
    1669U,	// MSUB_Q_rrr1
    325U,	// MSUB_Q_rrr1_L
    1U,	// MSUB_Q_rrr1_L_L
    357U,	// MSUB_Q_rrr1_U
    1669U,	// MSUB_Q_rrr1_UU2_v110
    1U,	// MSUB_Q_rrr1_U_U
    1669U,	// MSUB_Q_rrr1_e
    325U,	// MSUB_Q_rrr1_e_L
    1U,	// MSUB_Q_rrr1_e_L_L
    357U,	// MSUB_Q_rrr1_e_U
    1U,	// MSUB_Q_rrr1_e_U_U
    290U,	// MSUB_U_rcr
    69U,	// MSUB_U_rrr2
    34U,	// MSUB_rcr
    34U,	// MSUB_rcr_e
    69U,	// MSUB_rrr2
    69U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    8U,	// MULMS_H_rr1_LL2e
    10U,	// MULMS_H_rr1_LU2e
    12U,	// MULMS_H_rr1_UL2e
    14U,	// MULMS_H_rr1_UU2e
    8U,	// MULM_H_rr1_LL2e
    10U,	// MULM_H_rr1_LU2e
    12U,	// MULM_H_rr1_UL2e
    14U,	// MULM_H_rr1_UU2e
    0U,	// MULM_U_rc
    0U,	// MULM_U_rr
    0U,	// MULM_rc
    0U,	// MULM_rr
    8U,	// MULR_H_rr1_LL2e
    10U,	// MULR_H_rr1_LU2e
    12U,	// MULR_H_rr1_UL2e
    14U,	// MULR_H_rr1_UU2e
    2U,	// MULR_H_rr_v110
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    2U,	// MULR_Q_rr_v110
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_U_rr_v110
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MULS_rr_v110
    0U,	// MUL_F_rrr
    8U,	// MUL_H_rr1_LL2e
    10U,	// MUL_H_rr1_LU2e
    12U,	// MUL_H_rr1_UL2e
    14U,	// MUL_H_rr1_UU2e
    2U,	// MUL_H_rr_v110
    2U,	// MUL_Q_rr1_2
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    16U,	// MUL_Q_rr1_2_L
    16U,	// MUL_Q_rr1_2_Le
    18U,	// MUL_Q_rr1_2_U
    18U,	// MUL_Q_rr1_2_Ue
    2U,	// MUL_Q_rr1_2__e
    2U,	// MUL_Q_rr_v110
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_rr_v110
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOR_sr
    0U,	// NOR_sr_v110
    0U,	// NOT_sr_v162
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    1U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_sc_v110
    0U,	// OR_srr
    0U,	// OR_srr_v110
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// PARITY_rr_v110
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RET_sys_v110
    0U,	// RFE_sr
    0U,	// RFE_sys_sys
    0U,	// RFE_sys_sys_v110
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr_sr
    0U,	// RSUB_sr_sr_v110
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_BU_sr_v110
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_B_sr_v110
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_HU_sr_v110
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SAT_H_sr_v110
    34U,	// SELN_A_rcr_v110
    69U,	// SELN_A_rrr_v110
    34U,	// SELN_rcr
    69U,	// SELN_rrr
    34U,	// SEL_A_rcr_v110
    69U,	// SEL_A_rrr_v110
    34U,	// SEL_rcr
    69U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_B_rc
    0U,	// SHA_B_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHA_src_v110
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_B_rc
    0U,	// SH_B_rr
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// SH_src_v110
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_sro_v110
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssr_pos_v110
    0U,	// ST_A_ssr_v110
    0U,	// ST_A_ssro
    0U,	// ST_A_ssro_v110
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_sro_v110
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssr_pos_v110
    0U,	// ST_B_ssr_v110
    0U,	// ST_B_ssro
    0U,	// ST_B_ssro_v110
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_sro_v110
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssr_pos_v110
    0U,	// ST_H_ssr_v110
    0U,	// ST_H_ssro
    0U,	// ST_H_ssro_v110
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sc
    0U,	// ST_W_sro
    0U,	// ST_W_sro_v110
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssr_pos_v110
    0U,	// ST_W_ssr_v110
    0U,	// ST_W_ssro
    0U,	// ST_W_ssro_v110
    0U,	// SUBC_rr
    2U,	// SUBSC_A_rr
    0U,	// SUBS_BU_rr
    0U,	// SUBS_B_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_A_sc_v110
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_i
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_A_abs
    0U,	// SWAP_A_bo_bso
    0U,	// SWAP_A_bo_c
    0U,	// SWAP_A_bo_pos
    0U,	// SWAP_A_bo_pre
    0U,	// SWAP_A_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_i
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TLBDEMAP_rr
    0U,	// TLBFLUSH_A_rr
    0U,	// TLBFLUSH_B_rr
    0U,	// TLBMAP_rr
    0U,	// TLBPROBE_A_rr
    0U,	// TLBPROBE_I_rr
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr_rr
    0U,	// UNPACK_rr_rr_v110
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {
#ifndef CAPSTONE_DIET
    AsmStrs+(Bits & 4095)-1,
#else
    NULL,
#endif // CAPSTONE_DIET
    Bits
  };
  return MBI;
}

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, LD_A_sc, LD_W_sc, MOV_sc, ...
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_A_ssro_v110, ST_B_ssro, ST_B_ssro_v110, ST_H_ssro, ST_H_...
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADDN_srr_v110, CADD_src, CADD_sr...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, CALLI_rr, CALLI_rr_v110, D...
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CMPSWAP_W_bo_c, LDMST_bo...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    break;
  case 5:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_r, ST_B_bo_r, ST_DA_bo_r, ST_D_bo_...
    SStream_concat0(O, "+r], ");
    set_mem_access(MI, false);
    break;
  case 8:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    printOperand(MI, 1, O);
    break;
  case 9:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    printOperand(MI, 1, O);
    SStream_concat1(O, ']');
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 10:
    // LD_A_slro, LD_A_slro_v110, LD_BU_slro, LD_BU_slro_v110, LD_B_slro_v110...
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 12:
    // ST_A_ssr, ST_A_ssr_v110, ST_B_ssr, ST_B_ssr_v110, ST_H_ssr, ST_H_ssr_v...
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_ssr_pos, ST_A_ssr_pos_v110, ST_B_ssr_pos, ST_B_ssr_pos_v110, ST_H...
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // ST_W_sc
    SStream_concat0(O, ", %d15");
    return;
    break;
  case 15:
    // SWAPMSK_W_bo_i, SWAP_W_bo_i
    SStream_concat0(O, "+i], ");
    set_mem_access(MI, false);
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 20) & 31) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_H_rr, ABSS_rr, ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_r...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 4:
    // CACHEA_I_bo_bso, CACHEA_I_bo_c, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACH...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, J...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 8:
    // JGE_U_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, LD_A_sro, LD_A_sro_...
    printZExtImm_4(MI, 1, O);
    break;
  case 9:
    // JNZ_A_brr, JZ_A_brr, LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 11:
    // LD_A_bo_bso, LD_A_bol, LD_A_slr, LD_A_slr_v110, LD_BU_bo_bso, LD_BU_bo...
    SStream_concat1(O, ']');
    break;
  case 12:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 13:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 14:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 15:
    // LOOP_sbr
    printOExtImm_4(MI, 1, O);
    return;
    break;
  case 16:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlc_e
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 17:
    // MOV_rlc
    printSExtImm_16(MI, 1, O);
    return;
    break;
  case 18:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 25) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_H_rr, ABSS_rr, ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_s...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 1, O);
    break;
  case 4:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 0, O);
    return;
    break;
  case 5:
    // DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, DVSTEP_rrr,...
    printOperand(MI, 2, O);
    break;
  case 6:
    // LD_A_bo_bso, LD_A_bo_pos, LD_BU_bo_bso, LD_BU_bo_pos, LD_B_bo_bso, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_bol, LD_BU_bol, LD_B_bol, LD_HU_bol, LD_H_bol, LD_W_bol, LEA_bol
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 8:
    // MULR_Q_rr1_2LL, MUL_Q_rr1_2LL
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 9:
    // MULR_Q_rr1_2UU, MUL_Q_rr1_2UU
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // ST_A_sro, ST_A_sro_v110
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 11:
    // ST_B_sro, ST_B_sro_v110, ST_H_sro, ST_H_sro_v110, ST_W_sro, ST_W_sro_v...
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 29) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc
    printZExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 4:
    // ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110,...
    printOperand(MI, 1, O);
    break;
  case 5:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 6:
    // ADD_F_rrr, DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, ...
    return;
    break;
  case 7:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 8:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    SStream_concat0(O, ", ");
    break;
  case 9:
    // EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw, IMASK_rcpw, IMASK_rrpw...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 10:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 11:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 12:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 13:
    // OR_rc
    printZExtImm_9(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 33) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    printOperand(MI, 2, O);
    break;
  case 3:
    // EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw, IMASK_rcpw, IMASK_rcrw...
    printOperand(MI, 4, O);
    return;
    break;
  case 4:
    // MULMS_H_rr1_LL2e, MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "ll, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 5:
    // MULMS_H_rr1_LU2e, MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "lu, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 6:
    // MULMS_H_rr1_UL2e, MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "ul, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 7:
    // MULMS_H_rr1_UU2e, MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "uu, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 8:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 9:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 37) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, DIFSC_A_rr_v110, MULR_H_rr_v110, MULR_Q_r...
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    return;
    break;
  case 3:
    // DEXTR_rrpw, DEXTR_rrrr, INSERT_rcpw, INSERT_rcrr, INSERT_rrpw, INSERT_...
    printOperand(MI, 3, O);
    break;
  case 4:
    // INSERT_rcrw, MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110...
    SStream_concat0(O, ", ");
    break;
  case 5:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, "ll, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, "lu, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDRS_H_rrr1_UL_...
    SStream_concat0(O, "ul, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, "uu, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  case 10:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 11:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 41) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DEXTR_rrpw, DEXTR_rrrr, INSERT_rcrr, INSERT_rrrr
    return;
    break;
  case 1:
    // INSERT_rcpw, INSERT_rrpw, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
    break;
  case 2:
    // INSERT_rcrw
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110, MADDR_Q_rrr...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
#ifndef CAPSTONE_DIET
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif // CAPSTONE_DIET
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
#ifndef CAPSTONE_DIET
  return false;
#endif // CAPSTONE_DIET
}

#endif // PRINT_ALIAS_INSTR
