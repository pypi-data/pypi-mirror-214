# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAviatrixFirenetFirewallManagerResult',
    'AwaitableGetAviatrixFirenetFirewallManagerResult',
    'get_aviatrix_firenet_firewall_manager',
    'get_aviatrix_firenet_firewall_manager_output',
]

@pulumi.output_type
class GetAviatrixFirenetFirewallManagerResult:
    """
    A collection of values returned by getAviatrixFirenetFirewallManager.
    """
    def __init__(__self__, gateway_name=None, id=None, number_of_retries=None, password=None, public_ip=None, retry_interval=None, route_table=None, save=None, synchronize=None, template=None, template_stack=None, username=None, vendor_type=None, vpc_id=None):
        if gateway_name and not isinstance(gateway_name, str):
            raise TypeError("Expected argument 'gateway_name' to be a str")
        pulumi.set(__self__, "gateway_name", gateway_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if number_of_retries and not isinstance(number_of_retries, int):
            raise TypeError("Expected argument 'number_of_retries' to be a int")
        pulumi.set(__self__, "number_of_retries", number_of_retries)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if retry_interval and not isinstance(retry_interval, int):
            raise TypeError("Expected argument 'retry_interval' to be a int")
        pulumi.set(__self__, "retry_interval", retry_interval)
        if route_table and not isinstance(route_table, str):
            raise TypeError("Expected argument 'route_table' to be a str")
        pulumi.set(__self__, "route_table", route_table)
        if save and not isinstance(save, bool):
            raise TypeError("Expected argument 'save' to be a bool")
        pulumi.set(__self__, "save", save)
        if synchronize and not isinstance(synchronize, bool):
            raise TypeError("Expected argument 'synchronize' to be a bool")
        pulumi.set(__self__, "synchronize", synchronize)
        if template and not isinstance(template, str):
            raise TypeError("Expected argument 'template' to be a str")
        pulumi.set(__self__, "template", template)
        if template_stack and not isinstance(template_stack, str):
            raise TypeError("Expected argument 'template_stack' to be a str")
        pulumi.set(__self__, "template_stack", template_stack)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if vendor_type and not isinstance(vendor_type, str):
            raise TypeError("Expected argument 'vendor_type' to be a str")
        pulumi.set(__self__, "vendor_type", vendor_type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="gatewayName")
    def gateway_name(self) -> str:
        return pulumi.get(self, "gateway_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="numberOfRetries")
    def number_of_retries(self) -> Optional[int]:
        return pulumi.get(self, "number_of_retries")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="routeTable")
    def route_table(self) -> Optional[str]:
        return pulumi.get(self, "route_table")

    @property
    @pulumi.getter
    def save(self) -> Optional[bool]:
        return pulumi.get(self, "save")

    @property
    @pulumi.getter
    def synchronize(self) -> Optional[bool]:
        return pulumi.get(self, "synchronize")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateStack")
    def template_stack(self) -> Optional[str]:
        return pulumi.get(self, "template_stack")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> str:
        return pulumi.get(self, "vendor_type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


class AwaitableGetAviatrixFirenetFirewallManagerResult(GetAviatrixFirenetFirewallManagerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAviatrixFirenetFirewallManagerResult(
            gateway_name=self.gateway_name,
            id=self.id,
            number_of_retries=self.number_of_retries,
            password=self.password,
            public_ip=self.public_ip,
            retry_interval=self.retry_interval,
            route_table=self.route_table,
            save=self.save,
            synchronize=self.synchronize,
            template=self.template,
            template_stack=self.template_stack,
            username=self.username,
            vendor_type=self.vendor_type,
            vpc_id=self.vpc_id)


def get_aviatrix_firenet_firewall_manager(gateway_name: Optional[str] = None,
                                          number_of_retries: Optional[int] = None,
                                          password: Optional[str] = None,
                                          public_ip: Optional[str] = None,
                                          retry_interval: Optional[int] = None,
                                          route_table: Optional[str] = None,
                                          save: Optional[bool] = None,
                                          synchronize: Optional[bool] = None,
                                          template: Optional[str] = None,
                                          template_stack: Optional[str] = None,
                                          username: Optional[str] = None,
                                          vendor_type: Optional[str] = None,
                                          vpc_id: Optional[str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAviatrixFirenetFirewallManagerResult:
    """
    Use this data source to do 'save' or 'sync' for Aviatrix FireNet firewall manager.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_firenet_firewall_manager(gateway_name="transit",
        password="password",
        public_ip="1.2.3.4",
        route_table="router",
        save=True,
        template="template",
        template_stack="templatestack",
        username="admin-api",
        vendor_type="Palo Alto Networks Panorama",
        vpc_id="vpc-abcd123")
    ```


    :param str gateway_name: The FireNet gateway name.
    :param int number_of_retries: Number of retries for `save` or `synchronize`. Example: 1. Default value: 0.
    :param str password: Panorama login password for API calls. Required for vendor type "Palo Alto Networks Panorama".
    :param str public_ip: The public IP address of the Panorama instance. Required for vendor type "Palo Alto Networks Panorama".
    :param int retry_interval: Retry interval in seconds for `save` or `synchronize`. Example: 120. Default value: 300.
    :param str route_table: The name of firewall virtual router to program. If left unspecified, the Controller programs the Panorama templateâ€™s first router.
    :param bool save: Switch to save or not.
    :param bool synchronize: Switch to sync or not.
    :param str template: Panorama template for each FireNet gateway. Required for vendor type "Palo Alto Networks Panorama".
    :param str template_stack: Panorama template stack for each FireNet gateway. Required for vendor type "Palo Alto Networks Panorama".
    :param str username: Panorama login name for API calls from the Controller. Required for vendor type "Palo Alto Networks Panorama".
    :param str vendor_type: Vendor type. Valid values: "Generic" and "Palo Alto Networks Panorama".
    :param str vpc_id: VPC ID.
    """
    __args__ = dict()
    __args__['gatewayName'] = gateway_name
    __args__['numberOfRetries'] = number_of_retries
    __args__['password'] = password
    __args__['publicIp'] = public_ip
    __args__['retryInterval'] = retry_interval
    __args__['routeTable'] = route_table
    __args__['save'] = save
    __args__['synchronize'] = synchronize
    __args__['template'] = template
    __args__['templateStack'] = template_stack
    __args__['username'] = username
    __args__['vendorType'] = vendor_type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aviatrix:index/getAviatrixFirenetFirewallManager:getAviatrixFirenetFirewallManager', __args__, opts=opts, typ=GetAviatrixFirenetFirewallManagerResult).value

    return AwaitableGetAviatrixFirenetFirewallManagerResult(
        gateway_name=__ret__.gateway_name,
        id=__ret__.id,
        number_of_retries=__ret__.number_of_retries,
        password=__ret__.password,
        public_ip=__ret__.public_ip,
        retry_interval=__ret__.retry_interval,
        route_table=__ret__.route_table,
        save=__ret__.save,
        synchronize=__ret__.synchronize,
        template=__ret__.template,
        template_stack=__ret__.template_stack,
        username=__ret__.username,
        vendor_type=__ret__.vendor_type,
        vpc_id=__ret__.vpc_id)


@_utilities.lift_output_func(get_aviatrix_firenet_firewall_manager)
def get_aviatrix_firenet_firewall_manager_output(gateway_name: Optional[pulumi.Input[str]] = None,
                                                 number_of_retries: Optional[pulumi.Input[Optional[int]]] = None,
                                                 password: Optional[pulumi.Input[Optional[str]]] = None,
                                                 public_ip: Optional[pulumi.Input[Optional[str]]] = None,
                                                 retry_interval: Optional[pulumi.Input[Optional[int]]] = None,
                                                 route_table: Optional[pulumi.Input[Optional[str]]] = None,
                                                 save: Optional[pulumi.Input[Optional[bool]]] = None,
                                                 synchronize: Optional[pulumi.Input[Optional[bool]]] = None,
                                                 template: Optional[pulumi.Input[Optional[str]]] = None,
                                                 template_stack: Optional[pulumi.Input[Optional[str]]] = None,
                                                 username: Optional[pulumi.Input[Optional[str]]] = None,
                                                 vendor_type: Optional[pulumi.Input[str]] = None,
                                                 vpc_id: Optional[pulumi.Input[str]] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAviatrixFirenetFirewallManagerResult]:
    """
    Use this data source to do 'save' or 'sync' for Aviatrix FireNet firewall manager.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_firenet_firewall_manager(gateway_name="transit",
        password="password",
        public_ip="1.2.3.4",
        route_table="router",
        save=True,
        template="template",
        template_stack="templatestack",
        username="admin-api",
        vendor_type="Palo Alto Networks Panorama",
        vpc_id="vpc-abcd123")
    ```


    :param str gateway_name: The FireNet gateway name.
    :param int number_of_retries: Number of retries for `save` or `synchronize`. Example: 1. Default value: 0.
    :param str password: Panorama login password for API calls. Required for vendor type "Palo Alto Networks Panorama".
    :param str public_ip: The public IP address of the Panorama instance. Required for vendor type "Palo Alto Networks Panorama".
    :param int retry_interval: Retry interval in seconds for `save` or `synchronize`. Example: 120. Default value: 300.
    :param str route_table: The name of firewall virtual router to program. If left unspecified, the Controller programs the Panorama templateâ€™s first router.
    :param bool save: Switch to save or not.
    :param bool synchronize: Switch to sync or not.
    :param str template: Panorama template for each FireNet gateway. Required for vendor type "Palo Alto Networks Panorama".
    :param str template_stack: Panorama template stack for each FireNet gateway. Required for vendor type "Palo Alto Networks Panorama".
    :param str username: Panorama login name for API calls from the Controller. Required for vendor type "Palo Alto Networks Panorama".
    :param str vendor_type: Vendor type. Valid values: "Generic" and "Palo Alto Networks Panorama".
    :param str vpc_id: VPC ID.
    """
    ...
