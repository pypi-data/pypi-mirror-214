# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAviatrixFirenetVendorIntegrationResult',
    'AwaitableGetAviatrixFirenetVendorIntegrationResult',
    'get_aviatrix_firenet_vendor_integration',
    'get_aviatrix_firenet_vendor_integration_output',
]

@pulumi.output_type
class GetAviatrixFirenetVendorIntegrationResult:
    """
    A collection of values returned by getAviatrixFirenetVendorIntegration.
    """
    def __init__(__self__, api_token=None, firewall_name=None, id=None, instance_id=None, number_of_retries=None, password=None, private_key_file=None, public_ip=None, retry_interval=None, route_table=None, save=None, synchronize=None, username=None, vendor_type=None, vpc_id=None):
        if api_token and not isinstance(api_token, str):
            raise TypeError("Expected argument 'api_token' to be a str")
        pulumi.set(__self__, "api_token", api_token)
        if firewall_name and not isinstance(firewall_name, str):
            raise TypeError("Expected argument 'firewall_name' to be a str")
        pulumi.set(__self__, "firewall_name", firewall_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if number_of_retries and not isinstance(number_of_retries, int):
            raise TypeError("Expected argument 'number_of_retries' to be a int")
        pulumi.set(__self__, "number_of_retries", number_of_retries)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if private_key_file and not isinstance(private_key_file, str):
            raise TypeError("Expected argument 'private_key_file' to be a str")
        pulumi.set(__self__, "private_key_file", private_key_file)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if retry_interval and not isinstance(retry_interval, int):
            raise TypeError("Expected argument 'retry_interval' to be a int")
        pulumi.set(__self__, "retry_interval", retry_interval)
        if route_table and not isinstance(route_table, str):
            raise TypeError("Expected argument 'route_table' to be a str")
        pulumi.set(__self__, "route_table", route_table)
        if save and not isinstance(save, bool):
            raise TypeError("Expected argument 'save' to be a bool")
        pulumi.set(__self__, "save", save)
        if synchronize and not isinstance(synchronize, bool):
            raise TypeError("Expected argument 'synchronize' to be a bool")
        pulumi.set(__self__, "synchronize", synchronize)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if vendor_type and not isinstance(vendor_type, str):
            raise TypeError("Expected argument 'vendor_type' to be a str")
        pulumi.set(__self__, "vendor_type", vendor_type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[str]:
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="firewallName")
    def firewall_name(self) -> Optional[str]:
        return pulumi.get(self, "firewall_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="numberOfRetries")
    def number_of_retries(self) -> Optional[int]:
        return pulumi.get(self, "number_of_retries")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> Optional[str]:
        return pulumi.get(self, "private_key_file")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="routeTable")
    def route_table(self) -> Optional[str]:
        return pulumi.get(self, "route_table")

    @property
    @pulumi.getter
    def save(self) -> Optional[bool]:
        return pulumi.get(self, "save")

    @property
    @pulumi.getter
    def synchronize(self) -> Optional[bool]:
        return pulumi.get(self, "synchronize")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> str:
        return pulumi.get(self, "vendor_type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


class AwaitableGetAviatrixFirenetVendorIntegrationResult(GetAviatrixFirenetVendorIntegrationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAviatrixFirenetVendorIntegrationResult(
            api_token=self.api_token,
            firewall_name=self.firewall_name,
            id=self.id,
            instance_id=self.instance_id,
            number_of_retries=self.number_of_retries,
            password=self.password,
            private_key_file=self.private_key_file,
            public_ip=self.public_ip,
            retry_interval=self.retry_interval,
            route_table=self.route_table,
            save=self.save,
            synchronize=self.synchronize,
            username=self.username,
            vendor_type=self.vendor_type,
            vpc_id=self.vpc_id)


def get_aviatrix_firenet_vendor_integration(api_token: Optional[str] = None,
                                            firewall_name: Optional[str] = None,
                                            instance_id: Optional[str] = None,
                                            number_of_retries: Optional[int] = None,
                                            password: Optional[str] = None,
                                            private_key_file: Optional[str] = None,
                                            public_ip: Optional[str] = None,
                                            retry_interval: Optional[int] = None,
                                            route_table: Optional[str] = None,
                                            save: Optional[bool] = None,
                                            synchronize: Optional[bool] = None,
                                            username: Optional[str] = None,
                                            vendor_type: Optional[str] = None,
                                            vpc_id: Optional[str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAviatrixFirenetVendorIntegrationResult:
    """
    Use this data source to do 'save' or 'sync' for vendor integration purposes for Aviatrix FireNet.

    > **NOTE:** FireNet with Panorama should be set up using the **aviatrix_firenet_firewall_manager** data source. Do not use `save` or `sync` options listed below.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_firenet_vendor_integration(firewall_name="Avx-Firewall-Instance",
        instance_id="i-09ade2592661316f8",
        password="Avx123456#",
        public_ip="10.11.12.13",
        save=True,
        username="admin",
        vendor_type="Palo Alto Networks VM-Series",
        vpc_id="vpc-abcd123")
    ```


    :param str api_token: API token for API calls. Required and valid only for vendor type "Fortinet FortiGate".
    :param str firewall_name: Name of firewall instance.
    :param str instance_id: ID of Firewall instance.
    :param int number_of_retries: Number of retries for `save` or `synchronize`. Example: 1. Default value: 0.
    :param str password: Firewall login password for API calls. Required for vendor type "Generic", "Palo Alto Networks VM-Series" and "Aviatrix FQDN Gateway".
    :param str private_key_file: Private key file. Valid only for vendor type "Check Point Cloud Guard". Use the `file` function to read from a file.
    :param str public_ip: The IP address of the firewall management interface for API calls from the Aviatrix Controller. If not set, the public IP of the firewall instance will be used. If the private IP is provided, please make sure that the controller can access the firewall.
    :param int retry_interval: Retry interval in seconds for `save` or `synchronize`. Example: 120. Default value: 300.
    :param str route_table: Specify the firewall virtual Router name you wish the Controller to program. If left unspecified, the Controller programs the firewallâ€™s default router.
    :param bool save: Switch to save or not.
    :param bool synchronize: Switch to sync or not.
    :param str username: Firewall login name for API calls from the Controller. Required for vendor type "Generic", "Palo Alto Networks VM-Series" and "Aviatrix FQDN Gateway".
    :param str vendor_type: Select PAN. Valid values: "Generic", "Palo Alto Networks VM-Series", "Aviatrix FQDN Gateway" and "Fortinet FortiGate".
    :param str vpc_id: VPC ID.
    """
    __args__ = dict()
    __args__['apiToken'] = api_token
    __args__['firewallName'] = firewall_name
    __args__['instanceId'] = instance_id
    __args__['numberOfRetries'] = number_of_retries
    __args__['password'] = password
    __args__['privateKeyFile'] = private_key_file
    __args__['publicIp'] = public_ip
    __args__['retryInterval'] = retry_interval
    __args__['routeTable'] = route_table
    __args__['save'] = save
    __args__['synchronize'] = synchronize
    __args__['username'] = username
    __args__['vendorType'] = vendor_type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aviatrix:index/getAviatrixFirenetVendorIntegration:getAviatrixFirenetVendorIntegration', __args__, opts=opts, typ=GetAviatrixFirenetVendorIntegrationResult).value

    return AwaitableGetAviatrixFirenetVendorIntegrationResult(
        api_token=__ret__.api_token,
        firewall_name=__ret__.firewall_name,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        number_of_retries=__ret__.number_of_retries,
        password=__ret__.password,
        private_key_file=__ret__.private_key_file,
        public_ip=__ret__.public_ip,
        retry_interval=__ret__.retry_interval,
        route_table=__ret__.route_table,
        save=__ret__.save,
        synchronize=__ret__.synchronize,
        username=__ret__.username,
        vendor_type=__ret__.vendor_type,
        vpc_id=__ret__.vpc_id)


@_utilities.lift_output_func(get_aviatrix_firenet_vendor_integration)
def get_aviatrix_firenet_vendor_integration_output(api_token: Optional[pulumi.Input[Optional[str]]] = None,
                                                   firewall_name: Optional[pulumi.Input[Optional[str]]] = None,
                                                   instance_id: Optional[pulumi.Input[str]] = None,
                                                   number_of_retries: Optional[pulumi.Input[Optional[int]]] = None,
                                                   password: Optional[pulumi.Input[Optional[str]]] = None,
                                                   private_key_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                   public_ip: Optional[pulumi.Input[Optional[str]]] = None,
                                                   retry_interval: Optional[pulumi.Input[Optional[int]]] = None,
                                                   route_table: Optional[pulumi.Input[Optional[str]]] = None,
                                                   save: Optional[pulumi.Input[Optional[bool]]] = None,
                                                   synchronize: Optional[pulumi.Input[Optional[bool]]] = None,
                                                   username: Optional[pulumi.Input[Optional[str]]] = None,
                                                   vendor_type: Optional[pulumi.Input[str]] = None,
                                                   vpc_id: Optional[pulumi.Input[str]] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAviatrixFirenetVendorIntegrationResult]:
    """
    Use this data source to do 'save' or 'sync' for vendor integration purposes for Aviatrix FireNet.

    > **NOTE:** FireNet with Panorama should be set up using the **aviatrix_firenet_firewall_manager** data source. Do not use `save` or `sync` options listed below.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_firenet_vendor_integration(firewall_name="Avx-Firewall-Instance",
        instance_id="i-09ade2592661316f8",
        password="Avx123456#",
        public_ip="10.11.12.13",
        save=True,
        username="admin",
        vendor_type="Palo Alto Networks VM-Series",
        vpc_id="vpc-abcd123")
    ```


    :param str api_token: API token for API calls. Required and valid only for vendor type "Fortinet FortiGate".
    :param str firewall_name: Name of firewall instance.
    :param str instance_id: ID of Firewall instance.
    :param int number_of_retries: Number of retries for `save` or `synchronize`. Example: 1. Default value: 0.
    :param str password: Firewall login password for API calls. Required for vendor type "Generic", "Palo Alto Networks VM-Series" and "Aviatrix FQDN Gateway".
    :param str private_key_file: Private key file. Valid only for vendor type "Check Point Cloud Guard". Use the `file` function to read from a file.
    :param str public_ip: The IP address of the firewall management interface for API calls from the Aviatrix Controller. If not set, the public IP of the firewall instance will be used. If the private IP is provided, please make sure that the controller can access the firewall.
    :param int retry_interval: Retry interval in seconds for `save` or `synchronize`. Example: 120. Default value: 300.
    :param str route_table: Specify the firewall virtual Router name you wish the Controller to program. If left unspecified, the Controller programs the firewallâ€™s default router.
    :param bool save: Switch to save or not.
    :param bool synchronize: Switch to sync or not.
    :param str username: Firewall login name for API calls from the Controller. Required for vendor type "Generic", "Palo Alto Networks VM-Series" and "Aviatrix FQDN Gateway".
    :param str vendor_type: Select PAN. Valid values: "Generic", "Palo Alto Networks VM-Series", "Aviatrix FQDN Gateway" and "Fortinet FortiGate".
    :param str vpc_id: VPC ID.
    """
    ...
