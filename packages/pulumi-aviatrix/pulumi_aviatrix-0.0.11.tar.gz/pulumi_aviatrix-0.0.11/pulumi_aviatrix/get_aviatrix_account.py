# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAviatrixAccountResult',
    'AwaitableGetAviatrixAccountResult',
    'get_aviatrix_account',
    'get_aviatrix_account_output',
]

@pulumi.output_type
class GetAviatrixAccountResult:
    """
    A collection of values returned by getAviatrixAccount.
    """
    def __init__(__self__, account_name=None, alicloud_account_id=None, arm_subscription_id=None, aws_account_number=None, aws_ca_cert_path=None, aws_gateway_role_app=None, aws_gateway_role_ec2=None, aws_role_arn=None, aws_role_ec2=None, awschina_account_number=None, awschina_iam=None, awschina_role_app=None, awschina_role_ec2=None, awsgov_account_number=None, awsgov_iam=None, awsgov_role_app=None, awsgov_role_ec2=None, awss_account_number=None, awss_cap_account_name=None, awss_cap_agency=None, awss_cap_cert_key_path=None, awss_cap_cert_path=None, awss_cap_role_name=None, awss_cap_url=None, awsts_account_number=None, awsts_cap_agency=None, awsts_cap_cert_key_path=None, awsts_cap_cert_path=None, awsts_cap_mission=None, awsts_cap_role_name=None, awsts_cap_url=None, azurechina_subscription_id=None, azuregov_subscription_id=None, cloud_type=None, gcloud_project_id=None, id=None):
        if account_name and not isinstance(account_name, str):
            raise TypeError("Expected argument 'account_name' to be a str")
        pulumi.set(__self__, "account_name", account_name)
        if alicloud_account_id and not isinstance(alicloud_account_id, str):
            raise TypeError("Expected argument 'alicloud_account_id' to be a str")
        pulumi.set(__self__, "alicloud_account_id", alicloud_account_id)
        if arm_subscription_id and not isinstance(arm_subscription_id, str):
            raise TypeError("Expected argument 'arm_subscription_id' to be a str")
        pulumi.set(__self__, "arm_subscription_id", arm_subscription_id)
        if aws_account_number and not isinstance(aws_account_number, str):
            raise TypeError("Expected argument 'aws_account_number' to be a str")
        pulumi.set(__self__, "aws_account_number", aws_account_number)
        if aws_ca_cert_path and not isinstance(aws_ca_cert_path, str):
            raise TypeError("Expected argument 'aws_ca_cert_path' to be a str")
        pulumi.set(__self__, "aws_ca_cert_path", aws_ca_cert_path)
        if aws_gateway_role_app and not isinstance(aws_gateway_role_app, str):
            raise TypeError("Expected argument 'aws_gateway_role_app' to be a str")
        pulumi.set(__self__, "aws_gateway_role_app", aws_gateway_role_app)
        if aws_gateway_role_ec2 and not isinstance(aws_gateway_role_ec2, str):
            raise TypeError("Expected argument 'aws_gateway_role_ec2' to be a str")
        pulumi.set(__self__, "aws_gateway_role_ec2", aws_gateway_role_ec2)
        if aws_role_arn and not isinstance(aws_role_arn, str):
            raise TypeError("Expected argument 'aws_role_arn' to be a str")
        pulumi.set(__self__, "aws_role_arn", aws_role_arn)
        if aws_role_ec2 and not isinstance(aws_role_ec2, str):
            raise TypeError("Expected argument 'aws_role_ec2' to be a str")
        pulumi.set(__self__, "aws_role_ec2", aws_role_ec2)
        if awschina_account_number and not isinstance(awschina_account_number, str):
            raise TypeError("Expected argument 'awschina_account_number' to be a str")
        pulumi.set(__self__, "awschina_account_number", awschina_account_number)
        if awschina_iam and not isinstance(awschina_iam, bool):
            raise TypeError("Expected argument 'awschina_iam' to be a bool")
        pulumi.set(__self__, "awschina_iam", awschina_iam)
        if awschina_role_app and not isinstance(awschina_role_app, str):
            raise TypeError("Expected argument 'awschina_role_app' to be a str")
        pulumi.set(__self__, "awschina_role_app", awschina_role_app)
        if awschina_role_ec2 and not isinstance(awschina_role_ec2, str):
            raise TypeError("Expected argument 'awschina_role_ec2' to be a str")
        pulumi.set(__self__, "awschina_role_ec2", awschina_role_ec2)
        if awsgov_account_number and not isinstance(awsgov_account_number, str):
            raise TypeError("Expected argument 'awsgov_account_number' to be a str")
        pulumi.set(__self__, "awsgov_account_number", awsgov_account_number)
        if awsgov_iam and not isinstance(awsgov_iam, bool):
            raise TypeError("Expected argument 'awsgov_iam' to be a bool")
        pulumi.set(__self__, "awsgov_iam", awsgov_iam)
        if awsgov_role_app and not isinstance(awsgov_role_app, str):
            raise TypeError("Expected argument 'awsgov_role_app' to be a str")
        pulumi.set(__self__, "awsgov_role_app", awsgov_role_app)
        if awsgov_role_ec2 and not isinstance(awsgov_role_ec2, str):
            raise TypeError("Expected argument 'awsgov_role_ec2' to be a str")
        pulumi.set(__self__, "awsgov_role_ec2", awsgov_role_ec2)
        if awss_account_number and not isinstance(awss_account_number, str):
            raise TypeError("Expected argument 'awss_account_number' to be a str")
        pulumi.set(__self__, "awss_account_number", awss_account_number)
        if awss_cap_account_name and not isinstance(awss_cap_account_name, str):
            raise TypeError("Expected argument 'awss_cap_account_name' to be a str")
        pulumi.set(__self__, "awss_cap_account_name", awss_cap_account_name)
        if awss_cap_agency and not isinstance(awss_cap_agency, str):
            raise TypeError("Expected argument 'awss_cap_agency' to be a str")
        pulumi.set(__self__, "awss_cap_agency", awss_cap_agency)
        if awss_cap_cert_key_path and not isinstance(awss_cap_cert_key_path, str):
            raise TypeError("Expected argument 'awss_cap_cert_key_path' to be a str")
        pulumi.set(__self__, "awss_cap_cert_key_path", awss_cap_cert_key_path)
        if awss_cap_cert_path and not isinstance(awss_cap_cert_path, str):
            raise TypeError("Expected argument 'awss_cap_cert_path' to be a str")
        pulumi.set(__self__, "awss_cap_cert_path", awss_cap_cert_path)
        if awss_cap_role_name and not isinstance(awss_cap_role_name, str):
            raise TypeError("Expected argument 'awss_cap_role_name' to be a str")
        pulumi.set(__self__, "awss_cap_role_name", awss_cap_role_name)
        if awss_cap_url and not isinstance(awss_cap_url, str):
            raise TypeError("Expected argument 'awss_cap_url' to be a str")
        pulumi.set(__self__, "awss_cap_url", awss_cap_url)
        if awsts_account_number and not isinstance(awsts_account_number, str):
            raise TypeError("Expected argument 'awsts_account_number' to be a str")
        pulumi.set(__self__, "awsts_account_number", awsts_account_number)
        if awsts_cap_agency and not isinstance(awsts_cap_agency, str):
            raise TypeError("Expected argument 'awsts_cap_agency' to be a str")
        pulumi.set(__self__, "awsts_cap_agency", awsts_cap_agency)
        if awsts_cap_cert_key_path and not isinstance(awsts_cap_cert_key_path, str):
            raise TypeError("Expected argument 'awsts_cap_cert_key_path' to be a str")
        pulumi.set(__self__, "awsts_cap_cert_key_path", awsts_cap_cert_key_path)
        if awsts_cap_cert_path and not isinstance(awsts_cap_cert_path, str):
            raise TypeError("Expected argument 'awsts_cap_cert_path' to be a str")
        pulumi.set(__self__, "awsts_cap_cert_path", awsts_cap_cert_path)
        if awsts_cap_mission and not isinstance(awsts_cap_mission, str):
            raise TypeError("Expected argument 'awsts_cap_mission' to be a str")
        pulumi.set(__self__, "awsts_cap_mission", awsts_cap_mission)
        if awsts_cap_role_name and not isinstance(awsts_cap_role_name, str):
            raise TypeError("Expected argument 'awsts_cap_role_name' to be a str")
        pulumi.set(__self__, "awsts_cap_role_name", awsts_cap_role_name)
        if awsts_cap_url and not isinstance(awsts_cap_url, str):
            raise TypeError("Expected argument 'awsts_cap_url' to be a str")
        pulumi.set(__self__, "awsts_cap_url", awsts_cap_url)
        if azurechina_subscription_id and not isinstance(azurechina_subscription_id, str):
            raise TypeError("Expected argument 'azurechina_subscription_id' to be a str")
        pulumi.set(__self__, "azurechina_subscription_id", azurechina_subscription_id)
        if azuregov_subscription_id and not isinstance(azuregov_subscription_id, str):
            raise TypeError("Expected argument 'azuregov_subscription_id' to be a str")
        pulumi.set(__self__, "azuregov_subscription_id", azuregov_subscription_id)
        if cloud_type and not isinstance(cloud_type, int):
            raise TypeError("Expected argument 'cloud_type' to be a int")
        pulumi.set(__self__, "cloud_type", cloud_type)
        if gcloud_project_id and not isinstance(gcloud_project_id, str):
            raise TypeError("Expected argument 'gcloud_project_id' to be a str")
        pulumi.set(__self__, "gcloud_project_id", gcloud_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="alicloudAccountId")
    def alicloud_account_id(self) -> str:
        """
        Alibaba Cloud Account ID.
        """
        return pulumi.get(self, "alicloud_account_id")

    @property
    @pulumi.getter(name="armSubscriptionId")
    def arm_subscription_id(self) -> str:
        """
        Azure ARM Subscription ID.
        """
        return pulumi.get(self, "arm_subscription_id")

    @property
    @pulumi.getter(name="awsAccountNumber")
    def aws_account_number(self) -> str:
        """
        AWS Account number.
        """
        return pulumi.get(self, "aws_account_number")

    @property
    @pulumi.getter(name="awsCaCertPath")
    def aws_ca_cert_path(self) -> str:
        """
        AWS Top Secret Region or Secret Region Custom Certificate Authority file name on the controller. Available as of provider R2.19.5+.
        """
        return pulumi.get(self, "aws_ca_cert_path")

    @property
    @pulumi.getter(name="awsGatewayRoleApp")
    def aws_gateway_role_app(self) -> str:
        """
        A separate AWS App role ARN to assign to gateways created by the controller. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "aws_gateway_role_app")

    @property
    @pulumi.getter(name="awsGatewayRoleEc2")
    def aws_gateway_role_ec2(self) -> str:
        """
        A separate AWS EC2 role ARN to assign to gateways created by the controller. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "aws_gateway_role_ec2")

    @property
    @pulumi.getter(name="awsRoleArn")
    def aws_role_arn(self) -> str:
        """
        AWS App role ARN.
        """
        return pulumi.get(self, "aws_role_arn")

    @property
    @pulumi.getter(name="awsRoleEc2")
    def aws_role_ec2(self) -> str:
        """
        AWS EC2 role ARN.
        """
        return pulumi.get(self, "aws_role_ec2")

    @property
    @pulumi.getter(name="awschinaAccountNumber")
    def awschina_account_number(self) -> str:
        """
        AWSChina Account number. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "awschina_account_number")

    @property
    @pulumi.getter(name="awschinaIam")
    def awschina_iam(self) -> bool:
        """
        If enabled, `awschina_role_app` and `awschina_role_ec2` will be set. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "awschina_iam")

    @property
    @pulumi.getter(name="awschinaRoleApp")
    def awschina_role_app(self) -> str:
        """
        AWSChina App role ARN. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "awschina_role_app")

    @property
    @pulumi.getter(name="awschinaRoleEc2")
    def awschina_role_ec2(self) -> str:
        """
        AWSChina EC2 role ARN. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "awschina_role_ec2")

    @property
    @pulumi.getter(name="awsgovAccountNumber")
    def awsgov_account_number(self) -> str:
        """
        AWSGov Account number.
        """
        return pulumi.get(self, "awsgov_account_number")

    @property
    @pulumi.getter(name="awsgovIam")
    def awsgov_iam(self) -> bool:
        """
        If enabled, `awsgov_role_app` and `awschina_role_ec2` will be set. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "awsgov_iam")

    @property
    @pulumi.getter(name="awsgovRoleApp")
    def awsgov_role_app(self) -> str:
        """
        AWSGov App role ARN. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "awsgov_role_app")

    @property
    @pulumi.getter(name="awsgovRoleEc2")
    def awsgov_role_ec2(self) -> str:
        """
        AWSGov EC2 role ARN. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "awsgov_role_ec2")

    @property
    @pulumi.getter(name="awssAccountNumber")
    def awss_account_number(self) -> str:
        """
        AWS Secret Region Account Number. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awss_account_number")

    @property
    @pulumi.getter(name="awssCapAccountName")
    def awss_cap_account_name(self) -> str:
        """
        AWS Secret Region Account Name. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awss_cap_account_name")

    @property
    @pulumi.getter(name="awssCapAgency")
    def awss_cap_agency(self) -> str:
        """
        AWS Secret Region CAP Agency. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awss_cap_agency")

    @property
    @pulumi.getter(name="awssCapCertKeyPath")
    def awss_cap_cert_key_path(self) -> str:
        """
        AWS Secret Region CAP Certificate Key file name on the controller. Available as of provider R2.19.5+.
        """
        return pulumi.get(self, "awss_cap_cert_key_path")

    @property
    @pulumi.getter(name="awssCapCertPath")
    def awss_cap_cert_path(self) -> str:
        """
        AWS Secret Region CAP Certificate file name on the controller. Available as of provider R2.19.5+.
        """
        return pulumi.get(self, "awss_cap_cert_path")

    @property
    @pulumi.getter(name="awssCapRoleName")
    def awss_cap_role_name(self) -> str:
        """
        AWS Secret Region Role Name. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awss_cap_role_name")

    @property
    @pulumi.getter(name="awssCapUrl")
    def awss_cap_url(self) -> str:
        """
        AWS Secret Region CAP Url. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awss_cap_url")

    @property
    @pulumi.getter(name="awstsAccountNumber")
    def awsts_account_number(self) -> str:
        """
        AWS Top Secret Region Account Number. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awsts_account_number")

    @property
    @pulumi.getter(name="awstsCapAgency")
    def awsts_cap_agency(self) -> str:
        """
        AWS Top Secret Region CAP Agency. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awsts_cap_agency")

    @property
    @pulumi.getter(name="awstsCapCertKeyPath")
    def awsts_cap_cert_key_path(self) -> str:
        """
        AWS Top Secret Region CAP Certificate Key file name on the controller. Available as of provider R2.19.5+.
        """
        return pulumi.get(self, "awsts_cap_cert_key_path")

    @property
    @pulumi.getter(name="awstsCapCertPath")
    def awsts_cap_cert_path(self) -> str:
        return pulumi.get(self, "awsts_cap_cert_path")

    @property
    @pulumi.getter(name="awstsCapMission")
    def awsts_cap_mission(self) -> str:
        """
        AWS Top Secret Region Mission. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awsts_cap_mission")

    @property
    @pulumi.getter(name="awstsCapRoleName")
    def awsts_cap_role_name(self) -> str:
        """
        AWS Top Secret Region Role Name. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.
        `awsts_cap_cert_path` - AWS Top Secret Region CAP Certificate file name on the controller. Available as of provider R2.19.5+.
        """
        return pulumi.get(self, "awsts_cap_role_name")

    @property
    @pulumi.getter(name="awstsCapUrl")
    def awsts_cap_url(self) -> str:
        """
        AWS Top Secret Region CAP Url. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.
        """
        return pulumi.get(self, "awsts_cap_url")

    @property
    @pulumi.getter(name="azurechinaSubscriptionId")
    def azurechina_subscription_id(self) -> str:
        """
        AzureChina ARM Subscription ID. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "azurechina_subscription_id")

    @property
    @pulumi.getter(name="azuregovSubscriptionId")
    def azuregov_subscription_id(self) -> str:
        """
        AzureGov ARM Subscription ID.
        """
        return pulumi.get(self, "azuregov_subscription_id")

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> int:
        """
        Type of cloud service provider.
        """
        return pulumi.get(self, "cloud_type")

    @property
    @pulumi.getter(name="gcloudProjectId")
    def gcloud_project_id(self) -> str:
        """
        GCloud Project ID.
        """
        return pulumi.get(self, "gcloud_project_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetAviatrixAccountResult(GetAviatrixAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAviatrixAccountResult(
            account_name=self.account_name,
            alicloud_account_id=self.alicloud_account_id,
            arm_subscription_id=self.arm_subscription_id,
            aws_account_number=self.aws_account_number,
            aws_ca_cert_path=self.aws_ca_cert_path,
            aws_gateway_role_app=self.aws_gateway_role_app,
            aws_gateway_role_ec2=self.aws_gateway_role_ec2,
            aws_role_arn=self.aws_role_arn,
            aws_role_ec2=self.aws_role_ec2,
            awschina_account_number=self.awschina_account_number,
            awschina_iam=self.awschina_iam,
            awschina_role_app=self.awschina_role_app,
            awschina_role_ec2=self.awschina_role_ec2,
            awsgov_account_number=self.awsgov_account_number,
            awsgov_iam=self.awsgov_iam,
            awsgov_role_app=self.awsgov_role_app,
            awsgov_role_ec2=self.awsgov_role_ec2,
            awss_account_number=self.awss_account_number,
            awss_cap_account_name=self.awss_cap_account_name,
            awss_cap_agency=self.awss_cap_agency,
            awss_cap_cert_key_path=self.awss_cap_cert_key_path,
            awss_cap_cert_path=self.awss_cap_cert_path,
            awss_cap_role_name=self.awss_cap_role_name,
            awss_cap_url=self.awss_cap_url,
            awsts_account_number=self.awsts_account_number,
            awsts_cap_agency=self.awsts_cap_agency,
            awsts_cap_cert_key_path=self.awsts_cap_cert_key_path,
            awsts_cap_cert_path=self.awsts_cap_cert_path,
            awsts_cap_mission=self.awsts_cap_mission,
            awsts_cap_role_name=self.awsts_cap_role_name,
            awsts_cap_url=self.awsts_cap_url,
            azurechina_subscription_id=self.azurechina_subscription_id,
            azuregov_subscription_id=self.azuregov_subscription_id,
            cloud_type=self.cloud_type,
            gcloud_project_id=self.gcloud_project_id,
            id=self.id)


def get_aviatrix_account(account_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAviatrixAccountResult:
    """
    The **aviatrix_account** data source provides details about a specific cloud account created by the Aviatrix Controller.

    This data source can prove useful when a module accepts an account's detail as an input variable.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_account(account_name="username")
    ```


    :param str account_name: Account name. This can be used for logging in to CloudN console or UserConnect controller.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aviatrix:index/getAviatrixAccount:getAviatrixAccount', __args__, opts=opts, typ=GetAviatrixAccountResult).value

    return AwaitableGetAviatrixAccountResult(
        account_name=__ret__.account_name,
        alicloud_account_id=__ret__.alicloud_account_id,
        arm_subscription_id=__ret__.arm_subscription_id,
        aws_account_number=__ret__.aws_account_number,
        aws_ca_cert_path=__ret__.aws_ca_cert_path,
        aws_gateway_role_app=__ret__.aws_gateway_role_app,
        aws_gateway_role_ec2=__ret__.aws_gateway_role_ec2,
        aws_role_arn=__ret__.aws_role_arn,
        aws_role_ec2=__ret__.aws_role_ec2,
        awschina_account_number=__ret__.awschina_account_number,
        awschina_iam=__ret__.awschina_iam,
        awschina_role_app=__ret__.awschina_role_app,
        awschina_role_ec2=__ret__.awschina_role_ec2,
        awsgov_account_number=__ret__.awsgov_account_number,
        awsgov_iam=__ret__.awsgov_iam,
        awsgov_role_app=__ret__.awsgov_role_app,
        awsgov_role_ec2=__ret__.awsgov_role_ec2,
        awss_account_number=__ret__.awss_account_number,
        awss_cap_account_name=__ret__.awss_cap_account_name,
        awss_cap_agency=__ret__.awss_cap_agency,
        awss_cap_cert_key_path=__ret__.awss_cap_cert_key_path,
        awss_cap_cert_path=__ret__.awss_cap_cert_path,
        awss_cap_role_name=__ret__.awss_cap_role_name,
        awss_cap_url=__ret__.awss_cap_url,
        awsts_account_number=__ret__.awsts_account_number,
        awsts_cap_agency=__ret__.awsts_cap_agency,
        awsts_cap_cert_key_path=__ret__.awsts_cap_cert_key_path,
        awsts_cap_cert_path=__ret__.awsts_cap_cert_path,
        awsts_cap_mission=__ret__.awsts_cap_mission,
        awsts_cap_role_name=__ret__.awsts_cap_role_name,
        awsts_cap_url=__ret__.awsts_cap_url,
        azurechina_subscription_id=__ret__.azurechina_subscription_id,
        azuregov_subscription_id=__ret__.azuregov_subscription_id,
        cloud_type=__ret__.cloud_type,
        gcloud_project_id=__ret__.gcloud_project_id,
        id=__ret__.id)


@_utilities.lift_output_func(get_aviatrix_account)
def get_aviatrix_account_output(account_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAviatrixAccountResult]:
    """
    The **aviatrix_account** data source provides details about a specific cloud account created by the Aviatrix Controller.

    This data source can prove useful when a module accepts an account's detail as an input variable.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_account(account_name="username")
    ```


    :param str account_name: Account name. This can be used for logging in to CloudN console or UserConnect controller.
    """
    ...
