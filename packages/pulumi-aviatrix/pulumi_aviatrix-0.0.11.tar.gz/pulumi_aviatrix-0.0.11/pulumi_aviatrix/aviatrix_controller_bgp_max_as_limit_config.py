# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AviatrixControllerBgpMaxAsLimitConfigArgs', 'AviatrixControllerBgpMaxAsLimitConfig']

@pulumi.input_type
class AviatrixControllerBgpMaxAsLimitConfigArgs:
    def __init__(__self__, *,
                 max_as_limit: pulumi.Input[int]):
        """
        The set of arguments for constructing a AviatrixControllerBgpMaxAsLimitConfig resource.
        :param pulumi.Input[int] max_as_limit: The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation. Must be a number in the range [1-254].
        """
        pulumi.set(__self__, "max_as_limit", max_as_limit)

    @property
    @pulumi.getter(name="maxAsLimit")
    def max_as_limit(self) -> pulumi.Input[int]:
        """
        The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation. Must be a number in the range [1-254].
        """
        return pulumi.get(self, "max_as_limit")

    @max_as_limit.setter
    def max_as_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_as_limit", value)


@pulumi.input_type
class _AviatrixControllerBgpMaxAsLimitConfigState:
    def __init__(__self__, *,
                 max_as_limit: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AviatrixControllerBgpMaxAsLimitConfig resources.
        :param pulumi.Input[int] max_as_limit: The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation. Must be a number in the range [1-254].
        """
        if max_as_limit is not None:
            pulumi.set(__self__, "max_as_limit", max_as_limit)

    @property
    @pulumi.getter(name="maxAsLimit")
    def max_as_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation. Must be a number in the range [1-254].
        """
        return pulumi.get(self, "max_as_limit")

    @max_as_limit.setter
    def max_as_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_as_limit", value)


class AviatrixControllerBgpMaxAsLimitConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 max_as_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        The **aviatrix_controller_bgp_max_as_limit_config** resource allows management of an Aviatrix Controller's BGP max AS limit for transit gateways. This resource is available as of provider version R2.18.1+.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aviatrix as aviatrix

        # Create an Aviatrix Controller BGP max AS limit config
        test_max_as_limit = aviatrix.AviatrixControllerBgpMaxAsLimitConfig("testMaxAsLimit", max_as_limit=1)
        ```

        ## Import

        **aviatrix_controller_bgp_max_as_limit_config** can be imported using controller IP, e.g. controller IP is 10.11.12.13

        ```sh
         $ pulumi import aviatrix:index/aviatrixControllerBgpMaxAsLimitConfig:AviatrixControllerBgpMaxAsLimitConfig test_max_as_limit 10-11-12-13
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] max_as_limit: The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation. Must be a number in the range [1-254].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AviatrixControllerBgpMaxAsLimitConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **aviatrix_controller_bgp_max_as_limit_config** resource allows management of an Aviatrix Controller's BGP max AS limit for transit gateways. This resource is available as of provider version R2.18.1+.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aviatrix as aviatrix

        # Create an Aviatrix Controller BGP max AS limit config
        test_max_as_limit = aviatrix.AviatrixControllerBgpMaxAsLimitConfig("testMaxAsLimit", max_as_limit=1)
        ```

        ## Import

        **aviatrix_controller_bgp_max_as_limit_config** can be imported using controller IP, e.g. controller IP is 10.11.12.13

        ```sh
         $ pulumi import aviatrix:index/aviatrixControllerBgpMaxAsLimitConfig:AviatrixControllerBgpMaxAsLimitConfig test_max_as_limit 10-11-12-13
        ```

        :param str resource_name: The name of the resource.
        :param AviatrixControllerBgpMaxAsLimitConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AviatrixControllerBgpMaxAsLimitConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 max_as_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AviatrixControllerBgpMaxAsLimitConfigArgs.__new__(AviatrixControllerBgpMaxAsLimitConfigArgs)

            if max_as_limit is None and not opts.urn:
                raise TypeError("Missing required property 'max_as_limit'")
            __props__.__dict__["max_as_limit"] = max_as_limit
        super(AviatrixControllerBgpMaxAsLimitConfig, __self__).__init__(
            'aviatrix:index/aviatrixControllerBgpMaxAsLimitConfig:AviatrixControllerBgpMaxAsLimitConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            max_as_limit: Optional[pulumi.Input[int]] = None) -> 'AviatrixControllerBgpMaxAsLimitConfig':
        """
        Get an existing AviatrixControllerBgpMaxAsLimitConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] max_as_limit: The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation. Must be a number in the range [1-254].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AviatrixControllerBgpMaxAsLimitConfigState.__new__(_AviatrixControllerBgpMaxAsLimitConfigState)

        __props__.__dict__["max_as_limit"] = max_as_limit
        return AviatrixControllerBgpMaxAsLimitConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="maxAsLimit")
    def max_as_limit(self) -> pulumi.Output[int]:
        """
        The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation. Must be a number in the range [1-254].
        """
        return pulumi.get(self, "max_as_limit")

