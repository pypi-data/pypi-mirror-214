# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAviatrixFirenetResult',
    'AwaitableGetAviatrixFirenetResult',
    'get_aviatrix_firenet',
    'get_aviatrix_firenet_output',
]

@pulumi.output_type
class GetAviatrixFirenetResult:
    """
    A collection of values returned by getAviatrixFirenet.
    """
    def __init__(__self__, egress_enabled=None, egress_static_cidrs=None, firewall_instance_associations=None, hashing_algorithm=None, id=None, inspection_enabled=None, keep_alive_via_lan_interface_enabled=None, tgw_segmentation_for_egress_enabled=None, vpc_id=None):
        if egress_enabled and not isinstance(egress_enabled, bool):
            raise TypeError("Expected argument 'egress_enabled' to be a bool")
        pulumi.set(__self__, "egress_enabled", egress_enabled)
        if egress_static_cidrs and not isinstance(egress_static_cidrs, list):
            raise TypeError("Expected argument 'egress_static_cidrs' to be a list")
        pulumi.set(__self__, "egress_static_cidrs", egress_static_cidrs)
        if firewall_instance_associations and not isinstance(firewall_instance_associations, list):
            raise TypeError("Expected argument 'firewall_instance_associations' to be a list")
        pulumi.set(__self__, "firewall_instance_associations", firewall_instance_associations)
        if hashing_algorithm and not isinstance(hashing_algorithm, str):
            raise TypeError("Expected argument 'hashing_algorithm' to be a str")
        pulumi.set(__self__, "hashing_algorithm", hashing_algorithm)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inspection_enabled and not isinstance(inspection_enabled, bool):
            raise TypeError("Expected argument 'inspection_enabled' to be a bool")
        pulumi.set(__self__, "inspection_enabled", inspection_enabled)
        if keep_alive_via_lan_interface_enabled and not isinstance(keep_alive_via_lan_interface_enabled, bool):
            raise TypeError("Expected argument 'keep_alive_via_lan_interface_enabled' to be a bool")
        pulumi.set(__self__, "keep_alive_via_lan_interface_enabled", keep_alive_via_lan_interface_enabled)
        if tgw_segmentation_for_egress_enabled and not isinstance(tgw_segmentation_for_egress_enabled, bool):
            raise TypeError("Expected argument 'tgw_segmentation_for_egress_enabled' to be a bool")
        pulumi.set(__self__, "tgw_segmentation_for_egress_enabled", tgw_segmentation_for_egress_enabled)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="egressEnabled")
    def egress_enabled(self) -> bool:
        """
        Enable/Disable egress through firewall.
        """
        return pulumi.get(self, "egress_enabled")

    @property
    @pulumi.getter(name="egressStaticCidrs")
    def egress_static_cidrs(self) -> Sequence[str]:
        """
        List of egress static CIDRs.
        """
        return pulumi.get(self, "egress_static_cidrs")

    @property
    @pulumi.getter(name="firewallInstanceAssociations")
    def firewall_instance_associations(self) -> Optional[Sequence['outputs.GetAviatrixFirenetFirewallInstanceAssociationResult']]:
        """
        List of firewall instances associated with fireNet.
        """
        return pulumi.get(self, "firewall_instance_associations")

    @property
    @pulumi.getter(name="hashingAlgorithm")
    def hashing_algorithm(self) -> str:
        """
        (Optional) Hashing algorithm to load balance traffic across the firewall.
        """
        return pulumi.get(self, "hashing_algorithm")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inspectionEnabled")
    def inspection_enabled(self) -> bool:
        """
        Enable/Disable traffic inspection.
        """
        return pulumi.get(self, "inspection_enabled")

    @property
    @pulumi.getter(name="keepAliveViaLanInterfaceEnabled")
    def keep_alive_via_lan_interface_enabled(self) -> bool:
        """
        (Optional) Enable Keep Alive via Firewall LAN Interface.
        """
        return pulumi.get(self, "keep_alive_via_lan_interface_enabled")

    @property
    @pulumi.getter(name="tgwSegmentationForEgressEnabled")
    def tgw_segmentation_for_egress_enabled(self) -> bool:
        """
        Enable TGW segmentation for egress.
        """
        return pulumi.get(self, "tgw_segmentation_for_egress_enabled")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the Security VPC.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetAviatrixFirenetResult(GetAviatrixFirenetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAviatrixFirenetResult(
            egress_enabled=self.egress_enabled,
            egress_static_cidrs=self.egress_static_cidrs,
            firewall_instance_associations=self.firewall_instance_associations,
            hashing_algorithm=self.hashing_algorithm,
            id=self.id,
            inspection_enabled=self.inspection_enabled,
            keep_alive_via_lan_interface_enabled=self.keep_alive_via_lan_interface_enabled,
            tgw_segmentation_for_egress_enabled=self.tgw_segmentation_for_egress_enabled,
            vpc_id=self.vpc_id)


def get_aviatrix_firenet(firewall_instance_associations: Optional[Sequence[pulumi.InputType['GetAviatrixFirenetFirewallInstanceAssociationArgs']]] = None,
                         vpc_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAviatrixFirenetResult:
    """
    The **aviatrix_firenet** data source provides details about a specific FireNet created by the Aviatrix Controller.

    This data source can prove useful when a module accepts a FireNet's detail as an input variable.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_firenet(vpc_id="vpc-abcdef")
    ```


    :param Sequence[pulumi.InputType['GetAviatrixFirenetFirewallInstanceAssociationArgs']] firewall_instance_associations: List of firewall instances associated with fireNet.
    :param str vpc_id: ID of the Security VPC.
    """
    __args__ = dict()
    __args__['firewallInstanceAssociations'] = firewall_instance_associations
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aviatrix:index/getAviatrixFirenet:getAviatrixFirenet', __args__, opts=opts, typ=GetAviatrixFirenetResult).value

    return AwaitableGetAviatrixFirenetResult(
        egress_enabled=__ret__.egress_enabled,
        egress_static_cidrs=__ret__.egress_static_cidrs,
        firewall_instance_associations=__ret__.firewall_instance_associations,
        hashing_algorithm=__ret__.hashing_algorithm,
        id=__ret__.id,
        inspection_enabled=__ret__.inspection_enabled,
        keep_alive_via_lan_interface_enabled=__ret__.keep_alive_via_lan_interface_enabled,
        tgw_segmentation_for_egress_enabled=__ret__.tgw_segmentation_for_egress_enabled,
        vpc_id=__ret__.vpc_id)


@_utilities.lift_output_func(get_aviatrix_firenet)
def get_aviatrix_firenet_output(firewall_instance_associations: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAviatrixFirenetFirewallInstanceAssociationArgs']]]]] = None,
                                vpc_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAviatrixFirenetResult]:
    """
    The **aviatrix_firenet** data source provides details about a specific FireNet created by the Aviatrix Controller.

    This data source can prove useful when a module accepts a FireNet's detail as an input variable.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_firenet(vpc_id="vpc-abcdef")
    ```


    :param Sequence[pulumi.InputType['GetAviatrixFirenetFirewallInstanceAssociationArgs']] firewall_instance_associations: List of firewall instances associated with fireNet.
    :param str vpc_id: ID of the Security VPC.
    """
    ...
