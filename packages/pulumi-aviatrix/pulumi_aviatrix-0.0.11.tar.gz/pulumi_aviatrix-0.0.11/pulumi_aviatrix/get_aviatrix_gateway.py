# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAviatrixGatewayResult',
    'AwaitableGetAviatrixGatewayResult',
    'get_aviatrix_gateway',
    'get_aviatrix_gateway_output',
]

@pulumi.output_type
class GetAviatrixGatewayResult:
    """
    A collection of values returned by getAviatrixGateway.
    """
    def __init__(__self__, account_name=None, additional_cidrs=None, additional_cidrs_designated_gateway=None, allocate_new_eip=None, availability_domain=None, azure_eip_name_resource_group=None, cloud_instance_id=None, cloud_type=None, duo_api_hostname=None, duo_integration_key=None, duo_push_mode=None, elb_dns_name=None, elb_name=None, enable_designated_gateway=None, enable_elb=None, enable_encrypt_volume=None, enable_jumbo_frame=None, enable_ldap=None, enable_monitor_gateway_subnets=None, enable_public_subnet_filtering=None, enable_spot_instance=None, enable_vpc_dns_server=None, enable_vpn_nat=None, fault_domain=None, fqdn_lan_cidr=None, fqdn_lan_interface=None, fqdn_lan_vpc_id=None, gw_name=None, gw_size=None, id=None, idle_timeout=None, image_version=None, insane_mode=None, insane_mode_az=None, ldap_base_dn=None, ldap_bind_dn=None, ldap_server=None, ldap_username_attribute=None, max_vpn_conn=None, monitor_exclude_lists=None, name_servers=None, okta_url=None, okta_username_suffix=None, otp_mode=None, peering_ha_availability_domain=None, peering_ha_azure_eip_name_resource_group=None, peering_ha_cloud_instance_id=None, peering_ha_fault_domain=None, peering_ha_gw_name=None, peering_ha_gw_size=None, peering_ha_image_version=None, peering_ha_insane_mode_az=None, peering_ha_private_ip=None, peering_ha_public_ip=None, peering_ha_security_group_id=None, peering_ha_software_version=None, peering_ha_subnet=None, peering_ha_zone=None, private_ip=None, public_dns_server=None, public_ip=None, public_subnet_filtering_guard_duty_enforced=None, public_subnet_filtering_ha_route_tables=None, public_subnet_filtering_route_tables=None, renegotiation_interval=None, saml_enabled=None, search_domains=None, security_group_id=None, single_az_ha=None, single_ip_snat=None, software_version=None, split_tunnel=None, spot_price=None, subnet=None, tag_lists=None, tags=None, tunnel_detection_time=None, vpc_id=None, vpc_reg=None, vpn_access=None, vpn_cidr=None, vpn_protocol=None, zone=None):
        if account_name and not isinstance(account_name, str):
            raise TypeError("Expected argument 'account_name' to be a str")
        pulumi.set(__self__, "account_name", account_name)
        if additional_cidrs and not isinstance(additional_cidrs, str):
            raise TypeError("Expected argument 'additional_cidrs' to be a str")
        pulumi.set(__self__, "additional_cidrs", additional_cidrs)
        if additional_cidrs_designated_gateway and not isinstance(additional_cidrs_designated_gateway, str):
            raise TypeError("Expected argument 'additional_cidrs_designated_gateway' to be a str")
        pulumi.set(__self__, "additional_cidrs_designated_gateway", additional_cidrs_designated_gateway)
        if allocate_new_eip and not isinstance(allocate_new_eip, bool):
            raise TypeError("Expected argument 'allocate_new_eip' to be a bool")
        pulumi.set(__self__, "allocate_new_eip", allocate_new_eip)
        if availability_domain and not isinstance(availability_domain, str):
            raise TypeError("Expected argument 'availability_domain' to be a str")
        pulumi.set(__self__, "availability_domain", availability_domain)
        if azure_eip_name_resource_group and not isinstance(azure_eip_name_resource_group, str):
            raise TypeError("Expected argument 'azure_eip_name_resource_group' to be a str")
        pulumi.set(__self__, "azure_eip_name_resource_group", azure_eip_name_resource_group)
        if cloud_instance_id and not isinstance(cloud_instance_id, str):
            raise TypeError("Expected argument 'cloud_instance_id' to be a str")
        pulumi.set(__self__, "cloud_instance_id", cloud_instance_id)
        if cloud_type and not isinstance(cloud_type, int):
            raise TypeError("Expected argument 'cloud_type' to be a int")
        pulumi.set(__self__, "cloud_type", cloud_type)
        if duo_api_hostname and not isinstance(duo_api_hostname, str):
            raise TypeError("Expected argument 'duo_api_hostname' to be a str")
        pulumi.set(__self__, "duo_api_hostname", duo_api_hostname)
        if duo_integration_key and not isinstance(duo_integration_key, str):
            raise TypeError("Expected argument 'duo_integration_key' to be a str")
        pulumi.set(__self__, "duo_integration_key", duo_integration_key)
        if duo_push_mode and not isinstance(duo_push_mode, str):
            raise TypeError("Expected argument 'duo_push_mode' to be a str")
        pulumi.set(__self__, "duo_push_mode", duo_push_mode)
        if elb_dns_name and not isinstance(elb_dns_name, str):
            raise TypeError("Expected argument 'elb_dns_name' to be a str")
        pulumi.set(__self__, "elb_dns_name", elb_dns_name)
        if elb_name and not isinstance(elb_name, str):
            raise TypeError("Expected argument 'elb_name' to be a str")
        pulumi.set(__self__, "elb_name", elb_name)
        if enable_designated_gateway and not isinstance(enable_designated_gateway, bool):
            raise TypeError("Expected argument 'enable_designated_gateway' to be a bool")
        pulumi.set(__self__, "enable_designated_gateway", enable_designated_gateway)
        if enable_elb and not isinstance(enable_elb, bool):
            raise TypeError("Expected argument 'enable_elb' to be a bool")
        pulumi.set(__self__, "enable_elb", enable_elb)
        if enable_encrypt_volume and not isinstance(enable_encrypt_volume, bool):
            raise TypeError("Expected argument 'enable_encrypt_volume' to be a bool")
        pulumi.set(__self__, "enable_encrypt_volume", enable_encrypt_volume)
        if enable_jumbo_frame and not isinstance(enable_jumbo_frame, bool):
            raise TypeError("Expected argument 'enable_jumbo_frame' to be a bool")
        pulumi.set(__self__, "enable_jumbo_frame", enable_jumbo_frame)
        if enable_ldap and not isinstance(enable_ldap, bool):
            raise TypeError("Expected argument 'enable_ldap' to be a bool")
        pulumi.set(__self__, "enable_ldap", enable_ldap)
        if enable_monitor_gateway_subnets and not isinstance(enable_monitor_gateway_subnets, bool):
            raise TypeError("Expected argument 'enable_monitor_gateway_subnets' to be a bool")
        pulumi.set(__self__, "enable_monitor_gateway_subnets", enable_monitor_gateway_subnets)
        if enable_public_subnet_filtering and not isinstance(enable_public_subnet_filtering, bool):
            raise TypeError("Expected argument 'enable_public_subnet_filtering' to be a bool")
        pulumi.set(__self__, "enable_public_subnet_filtering", enable_public_subnet_filtering)
        if enable_spot_instance and not isinstance(enable_spot_instance, bool):
            raise TypeError("Expected argument 'enable_spot_instance' to be a bool")
        pulumi.set(__self__, "enable_spot_instance", enable_spot_instance)
        if enable_vpc_dns_server and not isinstance(enable_vpc_dns_server, bool):
            raise TypeError("Expected argument 'enable_vpc_dns_server' to be a bool")
        pulumi.set(__self__, "enable_vpc_dns_server", enable_vpc_dns_server)
        if enable_vpn_nat and not isinstance(enable_vpn_nat, bool):
            raise TypeError("Expected argument 'enable_vpn_nat' to be a bool")
        pulumi.set(__self__, "enable_vpn_nat", enable_vpn_nat)
        if fault_domain and not isinstance(fault_domain, str):
            raise TypeError("Expected argument 'fault_domain' to be a str")
        pulumi.set(__self__, "fault_domain", fault_domain)
        if fqdn_lan_cidr and not isinstance(fqdn_lan_cidr, str):
            raise TypeError("Expected argument 'fqdn_lan_cidr' to be a str")
        pulumi.set(__self__, "fqdn_lan_cidr", fqdn_lan_cidr)
        if fqdn_lan_interface and not isinstance(fqdn_lan_interface, str):
            raise TypeError("Expected argument 'fqdn_lan_interface' to be a str")
        pulumi.set(__self__, "fqdn_lan_interface", fqdn_lan_interface)
        if fqdn_lan_vpc_id and not isinstance(fqdn_lan_vpc_id, str):
            raise TypeError("Expected argument 'fqdn_lan_vpc_id' to be a str")
        pulumi.set(__self__, "fqdn_lan_vpc_id", fqdn_lan_vpc_id)
        if gw_name and not isinstance(gw_name, str):
            raise TypeError("Expected argument 'gw_name' to be a str")
        pulumi.set(__self__, "gw_name", gw_name)
        if gw_size and not isinstance(gw_size, str):
            raise TypeError("Expected argument 'gw_size' to be a str")
        pulumi.set(__self__, "gw_size", gw_size)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idle_timeout and not isinstance(idle_timeout, int):
            raise TypeError("Expected argument 'idle_timeout' to be a int")
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        if image_version and not isinstance(image_version, str):
            raise TypeError("Expected argument 'image_version' to be a str")
        pulumi.set(__self__, "image_version", image_version)
        if insane_mode and not isinstance(insane_mode, bool):
            raise TypeError("Expected argument 'insane_mode' to be a bool")
        pulumi.set(__self__, "insane_mode", insane_mode)
        if insane_mode_az and not isinstance(insane_mode_az, str):
            raise TypeError("Expected argument 'insane_mode_az' to be a str")
        pulumi.set(__self__, "insane_mode_az", insane_mode_az)
        if ldap_base_dn and not isinstance(ldap_base_dn, str):
            raise TypeError("Expected argument 'ldap_base_dn' to be a str")
        pulumi.set(__self__, "ldap_base_dn", ldap_base_dn)
        if ldap_bind_dn and not isinstance(ldap_bind_dn, str):
            raise TypeError("Expected argument 'ldap_bind_dn' to be a str")
        pulumi.set(__self__, "ldap_bind_dn", ldap_bind_dn)
        if ldap_server and not isinstance(ldap_server, str):
            raise TypeError("Expected argument 'ldap_server' to be a str")
        pulumi.set(__self__, "ldap_server", ldap_server)
        if ldap_username_attribute and not isinstance(ldap_username_attribute, str):
            raise TypeError("Expected argument 'ldap_username_attribute' to be a str")
        pulumi.set(__self__, "ldap_username_attribute", ldap_username_attribute)
        if max_vpn_conn and not isinstance(max_vpn_conn, str):
            raise TypeError("Expected argument 'max_vpn_conn' to be a str")
        pulumi.set(__self__, "max_vpn_conn", max_vpn_conn)
        if monitor_exclude_lists and not isinstance(monitor_exclude_lists, list):
            raise TypeError("Expected argument 'monitor_exclude_lists' to be a list")
        pulumi.set(__self__, "monitor_exclude_lists", monitor_exclude_lists)
        if name_servers and not isinstance(name_servers, str):
            raise TypeError("Expected argument 'name_servers' to be a str")
        pulumi.set(__self__, "name_servers", name_servers)
        if okta_url and not isinstance(okta_url, str):
            raise TypeError("Expected argument 'okta_url' to be a str")
        pulumi.set(__self__, "okta_url", okta_url)
        if okta_username_suffix and not isinstance(okta_username_suffix, str):
            raise TypeError("Expected argument 'okta_username_suffix' to be a str")
        pulumi.set(__self__, "okta_username_suffix", okta_username_suffix)
        if otp_mode and not isinstance(otp_mode, str):
            raise TypeError("Expected argument 'otp_mode' to be a str")
        pulumi.set(__self__, "otp_mode", otp_mode)
        if peering_ha_availability_domain and not isinstance(peering_ha_availability_domain, str):
            raise TypeError("Expected argument 'peering_ha_availability_domain' to be a str")
        pulumi.set(__self__, "peering_ha_availability_domain", peering_ha_availability_domain)
        if peering_ha_azure_eip_name_resource_group and not isinstance(peering_ha_azure_eip_name_resource_group, str):
            raise TypeError("Expected argument 'peering_ha_azure_eip_name_resource_group' to be a str")
        pulumi.set(__self__, "peering_ha_azure_eip_name_resource_group", peering_ha_azure_eip_name_resource_group)
        if peering_ha_cloud_instance_id and not isinstance(peering_ha_cloud_instance_id, str):
            raise TypeError("Expected argument 'peering_ha_cloud_instance_id' to be a str")
        pulumi.set(__self__, "peering_ha_cloud_instance_id", peering_ha_cloud_instance_id)
        if peering_ha_fault_domain and not isinstance(peering_ha_fault_domain, str):
            raise TypeError("Expected argument 'peering_ha_fault_domain' to be a str")
        pulumi.set(__self__, "peering_ha_fault_domain", peering_ha_fault_domain)
        if peering_ha_gw_name and not isinstance(peering_ha_gw_name, str):
            raise TypeError("Expected argument 'peering_ha_gw_name' to be a str")
        pulumi.set(__self__, "peering_ha_gw_name", peering_ha_gw_name)
        if peering_ha_gw_size and not isinstance(peering_ha_gw_size, str):
            raise TypeError("Expected argument 'peering_ha_gw_size' to be a str")
        pulumi.set(__self__, "peering_ha_gw_size", peering_ha_gw_size)
        if peering_ha_image_version and not isinstance(peering_ha_image_version, str):
            raise TypeError("Expected argument 'peering_ha_image_version' to be a str")
        pulumi.set(__self__, "peering_ha_image_version", peering_ha_image_version)
        if peering_ha_insane_mode_az and not isinstance(peering_ha_insane_mode_az, str):
            raise TypeError("Expected argument 'peering_ha_insane_mode_az' to be a str")
        pulumi.set(__self__, "peering_ha_insane_mode_az", peering_ha_insane_mode_az)
        if peering_ha_private_ip and not isinstance(peering_ha_private_ip, str):
            raise TypeError("Expected argument 'peering_ha_private_ip' to be a str")
        pulumi.set(__self__, "peering_ha_private_ip", peering_ha_private_ip)
        if peering_ha_public_ip and not isinstance(peering_ha_public_ip, str):
            raise TypeError("Expected argument 'peering_ha_public_ip' to be a str")
        pulumi.set(__self__, "peering_ha_public_ip", peering_ha_public_ip)
        if peering_ha_security_group_id and not isinstance(peering_ha_security_group_id, str):
            raise TypeError("Expected argument 'peering_ha_security_group_id' to be a str")
        pulumi.set(__self__, "peering_ha_security_group_id", peering_ha_security_group_id)
        if peering_ha_software_version and not isinstance(peering_ha_software_version, str):
            raise TypeError("Expected argument 'peering_ha_software_version' to be a str")
        pulumi.set(__self__, "peering_ha_software_version", peering_ha_software_version)
        if peering_ha_subnet and not isinstance(peering_ha_subnet, str):
            raise TypeError("Expected argument 'peering_ha_subnet' to be a str")
        pulumi.set(__self__, "peering_ha_subnet", peering_ha_subnet)
        if peering_ha_zone and not isinstance(peering_ha_zone, str):
            raise TypeError("Expected argument 'peering_ha_zone' to be a str")
        pulumi.set(__self__, "peering_ha_zone", peering_ha_zone)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if public_dns_server and not isinstance(public_dns_server, str):
            raise TypeError("Expected argument 'public_dns_server' to be a str")
        pulumi.set(__self__, "public_dns_server", public_dns_server)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if public_subnet_filtering_guard_duty_enforced and not isinstance(public_subnet_filtering_guard_duty_enforced, bool):
            raise TypeError("Expected argument 'public_subnet_filtering_guard_duty_enforced' to be a bool")
        pulumi.set(__self__, "public_subnet_filtering_guard_duty_enforced", public_subnet_filtering_guard_duty_enforced)
        if public_subnet_filtering_ha_route_tables and not isinstance(public_subnet_filtering_ha_route_tables, list):
            raise TypeError("Expected argument 'public_subnet_filtering_ha_route_tables' to be a list")
        pulumi.set(__self__, "public_subnet_filtering_ha_route_tables", public_subnet_filtering_ha_route_tables)
        if public_subnet_filtering_route_tables and not isinstance(public_subnet_filtering_route_tables, list):
            raise TypeError("Expected argument 'public_subnet_filtering_route_tables' to be a list")
        pulumi.set(__self__, "public_subnet_filtering_route_tables", public_subnet_filtering_route_tables)
        if renegotiation_interval and not isinstance(renegotiation_interval, int):
            raise TypeError("Expected argument 'renegotiation_interval' to be a int")
        pulumi.set(__self__, "renegotiation_interval", renegotiation_interval)
        if saml_enabled and not isinstance(saml_enabled, bool):
            raise TypeError("Expected argument 'saml_enabled' to be a bool")
        pulumi.set(__self__, "saml_enabled", saml_enabled)
        if search_domains and not isinstance(search_domains, str):
            raise TypeError("Expected argument 'search_domains' to be a str")
        pulumi.set(__self__, "search_domains", search_domains)
        if security_group_id and not isinstance(security_group_id, str):
            raise TypeError("Expected argument 'security_group_id' to be a str")
        pulumi.set(__self__, "security_group_id", security_group_id)
        if single_az_ha and not isinstance(single_az_ha, bool):
            raise TypeError("Expected argument 'single_az_ha' to be a bool")
        pulumi.set(__self__, "single_az_ha", single_az_ha)
        if single_ip_snat and not isinstance(single_ip_snat, bool):
            raise TypeError("Expected argument 'single_ip_snat' to be a bool")
        pulumi.set(__self__, "single_ip_snat", single_ip_snat)
        if software_version and not isinstance(software_version, str):
            raise TypeError("Expected argument 'software_version' to be a str")
        pulumi.set(__self__, "software_version", software_version)
        if split_tunnel and not isinstance(split_tunnel, bool):
            raise TypeError("Expected argument 'split_tunnel' to be a bool")
        pulumi.set(__self__, "split_tunnel", split_tunnel)
        if spot_price and not isinstance(spot_price, str):
            raise TypeError("Expected argument 'spot_price' to be a str")
        pulumi.set(__self__, "spot_price", spot_price)
        if subnet and not isinstance(subnet, str):
            raise TypeError("Expected argument 'subnet' to be a str")
        pulumi.set(__self__, "subnet", subnet)
        if tag_lists and not isinstance(tag_lists, list):
            raise TypeError("Expected argument 'tag_lists' to be a list")
        pulumi.set(__self__, "tag_lists", tag_lists)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if tunnel_detection_time and not isinstance(tunnel_detection_time, int):
            raise TypeError("Expected argument 'tunnel_detection_time' to be a int")
        pulumi.set(__self__, "tunnel_detection_time", tunnel_detection_time)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_reg and not isinstance(vpc_reg, str):
            raise TypeError("Expected argument 'vpc_reg' to be a str")
        pulumi.set(__self__, "vpc_reg", vpc_reg)
        if vpn_access and not isinstance(vpn_access, bool):
            raise TypeError("Expected argument 'vpn_access' to be a bool")
        pulumi.set(__self__, "vpn_access", vpn_access)
        if vpn_cidr and not isinstance(vpn_cidr, str):
            raise TypeError("Expected argument 'vpn_cidr' to be a str")
        pulumi.set(__self__, "vpn_cidr", vpn_cidr)
        if vpn_protocol and not isinstance(vpn_protocol, str):
            raise TypeError("Expected argument 'vpn_protocol' to be a str")
        pulumi.set(__self__, "vpn_protocol", vpn_protocol)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Aviatrix account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="additionalCidrs")
    def additional_cidrs(self) -> str:
        """
        A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
        """
        return pulumi.get(self, "additional_cidrs")

    @property
    @pulumi.getter(name="additionalCidrsDesignatedGateway")
    def additional_cidrs_designated_gateway(self) -> str:
        """
        A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
        """
        return pulumi.get(self, "additional_cidrs_designated_gateway")

    @property
    @pulumi.getter(name="allocateNewEip")
    def allocate_new_eip(self) -> bool:
        """
        When value is false, an idle address in Elastic IP pool is reused for this gateway. Otherwise, a new Elastic IP is allocated and used for this gateway.
        """
        return pulumi.get(self, "allocate_new_eip")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        Availability domain for OCI.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="azureEipNameResourceGroup")
    def azure_eip_name_resource_group(self) -> str:
        return pulumi.get(self, "azure_eip_name_resource_group")

    @property
    @pulumi.getter(name="cloudInstanceId")
    def cloud_instance_id(self) -> str:
        """
        Instance ID of the gateway.
        """
        return pulumi.get(self, "cloud_instance_id")

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> int:
        """
        Type of cloud service provider.
        """
        return pulumi.get(self, "cloud_type")

    @property
    @pulumi.getter(name="duoApiHostname")
    def duo_api_hostname(self) -> str:
        """
        API hostname for DUO auth mode.
        """
        return pulumi.get(self, "duo_api_hostname")

    @property
    @pulumi.getter(name="duoIntegrationKey")
    def duo_integration_key(self) -> str:
        """
        Integration key for DUO auth mode.
        """
        return pulumi.get(self, "duo_integration_key")

    @property
    @pulumi.getter(name="duoPushMode")
    def duo_push_mode(self) -> str:
        """
        Push mode for DUO auth.
        """
        return pulumi.get(self, "duo_push_mode")

    @property
    @pulumi.getter(name="elbDnsName")
    def elb_dns_name(self) -> str:
        """
        ELB DNS Name.
        """
        return pulumi.get(self, "elb_dns_name")

    @property
    @pulumi.getter(name="elbName")
    def elb_name(self) -> str:
        """
        Name of the ELB created.
        """
        return pulumi.get(self, "elb_name")

    @property
    @pulumi.getter(name="enableDesignatedGateway")
    def enable_designated_gateway(self) -> bool:
        """
        Status of Designated Gateway feature for Gateway.
        """
        return pulumi.get(self, "enable_designated_gateway")

    @property
    @pulumi.getter(name="enableElb")
    def enable_elb(self) -> bool:
        """
        Status of ELB for the gateway.
        """
        return pulumi.get(self, "enable_elb")

    @property
    @pulumi.getter(name="enableEncryptVolume")
    def enable_encrypt_volume(self) -> bool:
        """
        Enable encrypt gateway EBS volume. Only supported for AWS provider.
        """
        return pulumi.get(self, "enable_encrypt_volume")

    @property
    @pulumi.getter(name="enableJumboFrame")
    def enable_jumbo_frame(self) -> bool:
        return pulumi.get(self, "enable_jumbo_frame")

    @property
    @pulumi.getter(name="enableLdap")
    def enable_ldap(self) -> bool:
        """
        Status LDAP or not.
        """
        return pulumi.get(self, "enable_ldap")

    @property
    @pulumi.getter(name="enableMonitorGatewaySubnets")
    def enable_monitor_gateway_subnets(self) -> bool:
        return pulumi.get(self, "enable_monitor_gateway_subnets")

    @property
    @pulumi.getter(name="enablePublicSubnetFiltering")
    def enable_public_subnet_filtering(self) -> bool:
        return pulumi.get(self, "enable_public_subnet_filtering")

    @property
    @pulumi.getter(name="enableSpotInstance")
    def enable_spot_instance(self) -> bool:
        return pulumi.get(self, "enable_spot_instance")

    @property
    @pulumi.getter(name="enableVpcDnsServer")
    def enable_vpc_dns_server(self) -> bool:
        """
        Status of VPC Dns Server for Gateway.
        """
        return pulumi.get(self, "enable_vpc_dns_server")

    @property
    @pulumi.getter(name="enableVpnNat")
    def enable_vpn_nat(self) -> bool:
        """
        Status of VPN NAT.
        """
        return pulumi.get(self, "enable_vpn_nat")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> str:
        """
        Fault domain for OCI.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="fqdnLanCidr")
    def fqdn_lan_cidr(self) -> str:
        return pulumi.get(self, "fqdn_lan_cidr")

    @property
    @pulumi.getter(name="fqdnLanInterface")
    def fqdn_lan_interface(self) -> str:
        return pulumi.get(self, "fqdn_lan_interface")

    @property
    @pulumi.getter(name="fqdnLanVpcId")
    def fqdn_lan_vpc_id(self) -> str:
        return pulumi.get(self, "fqdn_lan_vpc_id")

    @property
    @pulumi.getter(name="gwName")
    def gw_name(self) -> str:
        """
        Aviatrix gateway name.
        """
        return pulumi.get(self, "gw_name")

    @property
    @pulumi.getter(name="gwSize")
    def gw_size(self) -> str:
        """
        Size of gateway Instance.
        """
        return pulumi.get(self, "gw_size")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> int:
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        """
        The image version of the gateway.
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="insaneMode")
    def insane_mode(self) -> bool:
        """
        Status of Insane Mode for Gateway.
        """
        return pulumi.get(self, "insane_mode")

    @property
    @pulumi.getter(name="insaneModeAz")
    def insane_mode_az(self) -> str:
        """
        AZ of subnet being created for Insane Mode gateway.
        """
        return pulumi.get(self, "insane_mode_az")

    @property
    @pulumi.getter(name="ldapBaseDn")
    def ldap_base_dn(self) -> str:
        """
        LDAP base DN.
        """
        return pulumi.get(self, "ldap_base_dn")

    @property
    @pulumi.getter(name="ldapBindDn")
    def ldap_bind_dn(self) -> str:
        """
        LDAP bind DN.
        """
        return pulumi.get(self, "ldap_bind_dn")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> str:
        """
        LDAP server address.
        """
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter(name="ldapUsernameAttribute")
    def ldap_username_attribute(self) -> str:
        """
        LDAP user attribute.
        """
        return pulumi.get(self, "ldap_username_attribute")

    @property
    @pulumi.getter(name="maxVpnConn")
    def max_vpn_conn(self) -> str:
        """
        Maximum connection of VPN access.
        """
        return pulumi.get(self, "max_vpn_conn")

    @property
    @pulumi.getter(name="monitorExcludeLists")
    def monitor_exclude_lists(self) -> Sequence[str]:
        return pulumi.get(self, "monitor_exclude_lists")

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> str:
        """
        A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
        """
        return pulumi.get(self, "name_servers")

    @property
    @pulumi.getter(name="oktaUrl")
    def okta_url(self) -> str:
        """
        URL for Okta auth mode.
        """
        return pulumi.get(self, "okta_url")

    @property
    @pulumi.getter(name="oktaUsernameSuffix")
    def okta_username_suffix(self) -> str:
        """
        Username suffix for Okta auth mode.
        """
        return pulumi.get(self, "okta_username_suffix")

    @property
    @pulumi.getter(name="otpMode")
    def otp_mode(self) -> str:
        """
        Two step authentication mode.
        """
        return pulumi.get(self, "otp_mode")

    @property
    @pulumi.getter(name="peeringHaAvailabilityDomain")
    def peering_ha_availability_domain(self) -> str:
        """
        HA gateway availability domain for OCI.
        """
        return pulumi.get(self, "peering_ha_availability_domain")

    @property
    @pulumi.getter(name="peeringHaAzureEipNameResourceGroup")
    def peering_ha_azure_eip_name_resource_group(self) -> str:
        return pulumi.get(self, "peering_ha_azure_eip_name_resource_group")

    @property
    @pulumi.getter(name="peeringHaCloudInstanceId")
    def peering_ha_cloud_instance_id(self) -> str:
        """
        Instance ID of the peering HA gateway.
        """
        return pulumi.get(self, "peering_ha_cloud_instance_id")

    @property
    @pulumi.getter(name="peeringHaFaultDomain")
    def peering_ha_fault_domain(self) -> str:
        """
        HA gateway fault domain for OCI.
        """
        return pulumi.get(self, "peering_ha_fault_domain")

    @property
    @pulumi.getter(name="peeringHaGwName")
    def peering_ha_gw_name(self) -> str:
        """
        Aviatrix gateway unique name of HA gateway.
        """
        return pulumi.get(self, "peering_ha_gw_name")

    @property
    @pulumi.getter(name="peeringHaGwSize")
    def peering_ha_gw_size(self) -> str:
        """
        Peering HA Gateway Size.
        """
        return pulumi.get(self, "peering_ha_gw_size")

    @property
    @pulumi.getter(name="peeringHaImageVersion")
    def peering_ha_image_version(self) -> str:
        """
        The image version of the HA gateway.
        """
        return pulumi.get(self, "peering_ha_image_version")

    @property
    @pulumi.getter(name="peeringHaInsaneModeAz")
    def peering_ha_insane_mode_az(self) -> str:
        """
        AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
        """
        return pulumi.get(self, "peering_ha_insane_mode_az")

    @property
    @pulumi.getter(name="peeringHaPrivateIp")
    def peering_ha_private_ip(self) -> str:
        """
        Private IP address of HA gateway.
        """
        return pulumi.get(self, "peering_ha_private_ip")

    @property
    @pulumi.getter(name="peeringHaPublicIp")
    def peering_ha_public_ip(self) -> str:
        """
        Public IP address that you want assigned to the HA peering instance.
        """
        return pulumi.get(self, "peering_ha_public_ip")

    @property
    @pulumi.getter(name="peeringHaSecurityGroupId")
    def peering_ha_security_group_id(self) -> str:
        return pulumi.get(self, "peering_ha_security_group_id")

    @property
    @pulumi.getter(name="peeringHaSoftwareVersion")
    def peering_ha_software_version(self) -> str:
        """
        The software version of the HA gateway.
        """
        return pulumi.get(self, "peering_ha_software_version")

    @property
    @pulumi.getter(name="peeringHaSubnet")
    def peering_ha_subnet(self) -> str:
        """
        Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha gateway if cloud_type = 1 or 8 (AWS or Azure).
        """
        return pulumi.get(self, "peering_ha_subnet")

    @property
    @pulumi.getter(name="peeringHaZone")
    def peering_ha_zone(self) -> str:
        """
        Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
        """
        return pulumi.get(self, "peering_ha_zone")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        Private IP address of the Gateway created.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicDnsServer")
    def public_dns_server(self) -> str:
        """
        NS server used by the gateway.
        """
        return pulumi.get(self, "public_dns_server")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        Public IP address of the Gateway created.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicSubnetFilteringGuardDutyEnforced")
    def public_subnet_filtering_guard_duty_enforced(self) -> bool:
        return pulumi.get(self, "public_subnet_filtering_guard_duty_enforced")

    @property
    @pulumi.getter(name="publicSubnetFilteringHaRouteTables")
    def public_subnet_filtering_ha_route_tables(self) -> Sequence[str]:
        return pulumi.get(self, "public_subnet_filtering_ha_route_tables")

    @property
    @pulumi.getter(name="publicSubnetFilteringRouteTables")
    def public_subnet_filtering_route_tables(self) -> Sequence[str]:
        return pulumi.get(self, "public_subnet_filtering_route_tables")

    @property
    @pulumi.getter(name="renegotiationInterval")
    def renegotiation_interval(self) -> int:
        return pulumi.get(self, "renegotiation_interval")

    @property
    @pulumi.getter(name="samlEnabled")
    def saml_enabled(self) -> bool:
        """
        Status of SAML.
        """
        return pulumi.get(self, "saml_enabled")

    @property
    @pulumi.getter(name="searchDomains")
    def search_domains(self) -> str:
        """
        A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel Mode is enabled.
        """
        return pulumi.get(self, "search_domains")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        Security group used for the gateway.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="singleAzHa")
    def single_az_ha(self) -> bool:
        """
        Status of Single AZ HA.
        """
        return pulumi.get(self, "single_az_ha")

    @property
    @pulumi.getter(name="singleIpSnat")
    def single_ip_snat(self) -> bool:
        """
        Single IP Source NAT status for the container.
        """
        return pulumi.get(self, "single_ip_snat")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> str:
        """
        The software version of the gateway.
        """
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter(name="splitTunnel")
    def split_tunnel(self) -> bool:
        """
        Status of split tunnel mode.
        """
        return pulumi.get(self, "split_tunnel")

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> str:
        return pulumi.get(self, "spot_price")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        A VPC Network address range selected from one of the available network ranges.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="tagLists")
    def tag_lists(self) -> Sequence[str]:
        """
        Instance tag of cloud provider.
        """
        return pulumi.get(self, "tag_lists")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tunnelDetectionTime")
    def tunnel_detection_time(self) -> int:
        return pulumi.get(self, "tunnel_detection_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC-ID/VNet-Name of cloud provider.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcReg")
    def vpc_reg(self) -> str:
        """
        Region of cloud provider.
        """
        return pulumi.get(self, "vpc_reg")

    @property
    @pulumi.getter(name="vpnAccess")
    def vpn_access(self) -> bool:
        """
        Status of user access through VPN to the container.
        """
        return pulumi.get(self, "vpn_access")

    @property
    @pulumi.getter(name="vpnCidr")
    def vpn_cidr(self) -> str:
        """
        VPN CIDR block for the container.
        """
        return pulumi.get(self, "vpn_cidr")

    @property
    @pulumi.getter(name="vpnProtocol")
    def vpn_protocol(self) -> str:
        """
        ELB protocol for VPN gateway with ELB enabled.
        """
        return pulumi.get(self, "vpn_protocol")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


class AwaitableGetAviatrixGatewayResult(GetAviatrixGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAviatrixGatewayResult(
            account_name=self.account_name,
            additional_cidrs=self.additional_cidrs,
            additional_cidrs_designated_gateway=self.additional_cidrs_designated_gateway,
            allocate_new_eip=self.allocate_new_eip,
            availability_domain=self.availability_domain,
            azure_eip_name_resource_group=self.azure_eip_name_resource_group,
            cloud_instance_id=self.cloud_instance_id,
            cloud_type=self.cloud_type,
            duo_api_hostname=self.duo_api_hostname,
            duo_integration_key=self.duo_integration_key,
            duo_push_mode=self.duo_push_mode,
            elb_dns_name=self.elb_dns_name,
            elb_name=self.elb_name,
            enable_designated_gateway=self.enable_designated_gateway,
            enable_elb=self.enable_elb,
            enable_encrypt_volume=self.enable_encrypt_volume,
            enable_jumbo_frame=self.enable_jumbo_frame,
            enable_ldap=self.enable_ldap,
            enable_monitor_gateway_subnets=self.enable_monitor_gateway_subnets,
            enable_public_subnet_filtering=self.enable_public_subnet_filtering,
            enable_spot_instance=self.enable_spot_instance,
            enable_vpc_dns_server=self.enable_vpc_dns_server,
            enable_vpn_nat=self.enable_vpn_nat,
            fault_domain=self.fault_domain,
            fqdn_lan_cidr=self.fqdn_lan_cidr,
            fqdn_lan_interface=self.fqdn_lan_interface,
            fqdn_lan_vpc_id=self.fqdn_lan_vpc_id,
            gw_name=self.gw_name,
            gw_size=self.gw_size,
            id=self.id,
            idle_timeout=self.idle_timeout,
            image_version=self.image_version,
            insane_mode=self.insane_mode,
            insane_mode_az=self.insane_mode_az,
            ldap_base_dn=self.ldap_base_dn,
            ldap_bind_dn=self.ldap_bind_dn,
            ldap_server=self.ldap_server,
            ldap_username_attribute=self.ldap_username_attribute,
            max_vpn_conn=self.max_vpn_conn,
            monitor_exclude_lists=self.monitor_exclude_lists,
            name_servers=self.name_servers,
            okta_url=self.okta_url,
            okta_username_suffix=self.okta_username_suffix,
            otp_mode=self.otp_mode,
            peering_ha_availability_domain=self.peering_ha_availability_domain,
            peering_ha_azure_eip_name_resource_group=self.peering_ha_azure_eip_name_resource_group,
            peering_ha_cloud_instance_id=self.peering_ha_cloud_instance_id,
            peering_ha_fault_domain=self.peering_ha_fault_domain,
            peering_ha_gw_name=self.peering_ha_gw_name,
            peering_ha_gw_size=self.peering_ha_gw_size,
            peering_ha_image_version=self.peering_ha_image_version,
            peering_ha_insane_mode_az=self.peering_ha_insane_mode_az,
            peering_ha_private_ip=self.peering_ha_private_ip,
            peering_ha_public_ip=self.peering_ha_public_ip,
            peering_ha_security_group_id=self.peering_ha_security_group_id,
            peering_ha_software_version=self.peering_ha_software_version,
            peering_ha_subnet=self.peering_ha_subnet,
            peering_ha_zone=self.peering_ha_zone,
            private_ip=self.private_ip,
            public_dns_server=self.public_dns_server,
            public_ip=self.public_ip,
            public_subnet_filtering_guard_duty_enforced=self.public_subnet_filtering_guard_duty_enforced,
            public_subnet_filtering_ha_route_tables=self.public_subnet_filtering_ha_route_tables,
            public_subnet_filtering_route_tables=self.public_subnet_filtering_route_tables,
            renegotiation_interval=self.renegotiation_interval,
            saml_enabled=self.saml_enabled,
            search_domains=self.search_domains,
            security_group_id=self.security_group_id,
            single_az_ha=self.single_az_ha,
            single_ip_snat=self.single_ip_snat,
            software_version=self.software_version,
            split_tunnel=self.split_tunnel,
            spot_price=self.spot_price,
            subnet=self.subnet,
            tag_lists=self.tag_lists,
            tags=self.tags,
            tunnel_detection_time=self.tunnel_detection_time,
            vpc_id=self.vpc_id,
            vpc_reg=self.vpc_reg,
            vpn_access=self.vpn_access,
            vpn_cidr=self.vpn_cidr,
            vpn_protocol=self.vpn_protocol,
            zone=self.zone)


def get_aviatrix_gateway(gw_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAviatrixGatewayResult:
    """
    The **aviatrix_gateway** data source provides details about a specific gateway created by the Aviatrix Controller.

    This data source can prove useful when a module accepts a gateway's detail as an input variable. For example, requiring the gateway's name configuring a site2cloud connection.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_gateway(gw_name="gatewayname")
    ```


    :param str gw_name: Gateway name.
    """
    __args__ = dict()
    __args__['gwName'] = gw_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aviatrix:index/getAviatrixGateway:getAviatrixGateway', __args__, opts=opts, typ=GetAviatrixGatewayResult).value

    return AwaitableGetAviatrixGatewayResult(
        account_name=__ret__.account_name,
        additional_cidrs=__ret__.additional_cidrs,
        additional_cidrs_designated_gateway=__ret__.additional_cidrs_designated_gateway,
        allocate_new_eip=__ret__.allocate_new_eip,
        availability_domain=__ret__.availability_domain,
        azure_eip_name_resource_group=__ret__.azure_eip_name_resource_group,
        cloud_instance_id=__ret__.cloud_instance_id,
        cloud_type=__ret__.cloud_type,
        duo_api_hostname=__ret__.duo_api_hostname,
        duo_integration_key=__ret__.duo_integration_key,
        duo_push_mode=__ret__.duo_push_mode,
        elb_dns_name=__ret__.elb_dns_name,
        elb_name=__ret__.elb_name,
        enable_designated_gateway=__ret__.enable_designated_gateway,
        enable_elb=__ret__.enable_elb,
        enable_encrypt_volume=__ret__.enable_encrypt_volume,
        enable_jumbo_frame=__ret__.enable_jumbo_frame,
        enable_ldap=__ret__.enable_ldap,
        enable_monitor_gateway_subnets=__ret__.enable_monitor_gateway_subnets,
        enable_public_subnet_filtering=__ret__.enable_public_subnet_filtering,
        enable_spot_instance=__ret__.enable_spot_instance,
        enable_vpc_dns_server=__ret__.enable_vpc_dns_server,
        enable_vpn_nat=__ret__.enable_vpn_nat,
        fault_domain=__ret__.fault_domain,
        fqdn_lan_cidr=__ret__.fqdn_lan_cidr,
        fqdn_lan_interface=__ret__.fqdn_lan_interface,
        fqdn_lan_vpc_id=__ret__.fqdn_lan_vpc_id,
        gw_name=__ret__.gw_name,
        gw_size=__ret__.gw_size,
        id=__ret__.id,
        idle_timeout=__ret__.idle_timeout,
        image_version=__ret__.image_version,
        insane_mode=__ret__.insane_mode,
        insane_mode_az=__ret__.insane_mode_az,
        ldap_base_dn=__ret__.ldap_base_dn,
        ldap_bind_dn=__ret__.ldap_bind_dn,
        ldap_server=__ret__.ldap_server,
        ldap_username_attribute=__ret__.ldap_username_attribute,
        max_vpn_conn=__ret__.max_vpn_conn,
        monitor_exclude_lists=__ret__.monitor_exclude_lists,
        name_servers=__ret__.name_servers,
        okta_url=__ret__.okta_url,
        okta_username_suffix=__ret__.okta_username_suffix,
        otp_mode=__ret__.otp_mode,
        peering_ha_availability_domain=__ret__.peering_ha_availability_domain,
        peering_ha_azure_eip_name_resource_group=__ret__.peering_ha_azure_eip_name_resource_group,
        peering_ha_cloud_instance_id=__ret__.peering_ha_cloud_instance_id,
        peering_ha_fault_domain=__ret__.peering_ha_fault_domain,
        peering_ha_gw_name=__ret__.peering_ha_gw_name,
        peering_ha_gw_size=__ret__.peering_ha_gw_size,
        peering_ha_image_version=__ret__.peering_ha_image_version,
        peering_ha_insane_mode_az=__ret__.peering_ha_insane_mode_az,
        peering_ha_private_ip=__ret__.peering_ha_private_ip,
        peering_ha_public_ip=__ret__.peering_ha_public_ip,
        peering_ha_security_group_id=__ret__.peering_ha_security_group_id,
        peering_ha_software_version=__ret__.peering_ha_software_version,
        peering_ha_subnet=__ret__.peering_ha_subnet,
        peering_ha_zone=__ret__.peering_ha_zone,
        private_ip=__ret__.private_ip,
        public_dns_server=__ret__.public_dns_server,
        public_ip=__ret__.public_ip,
        public_subnet_filtering_guard_duty_enforced=__ret__.public_subnet_filtering_guard_duty_enforced,
        public_subnet_filtering_ha_route_tables=__ret__.public_subnet_filtering_ha_route_tables,
        public_subnet_filtering_route_tables=__ret__.public_subnet_filtering_route_tables,
        renegotiation_interval=__ret__.renegotiation_interval,
        saml_enabled=__ret__.saml_enabled,
        search_domains=__ret__.search_domains,
        security_group_id=__ret__.security_group_id,
        single_az_ha=__ret__.single_az_ha,
        single_ip_snat=__ret__.single_ip_snat,
        software_version=__ret__.software_version,
        split_tunnel=__ret__.split_tunnel,
        spot_price=__ret__.spot_price,
        subnet=__ret__.subnet,
        tag_lists=__ret__.tag_lists,
        tags=__ret__.tags,
        tunnel_detection_time=__ret__.tunnel_detection_time,
        vpc_id=__ret__.vpc_id,
        vpc_reg=__ret__.vpc_reg,
        vpn_access=__ret__.vpn_access,
        vpn_cidr=__ret__.vpn_cidr,
        vpn_protocol=__ret__.vpn_protocol,
        zone=__ret__.zone)


@_utilities.lift_output_func(get_aviatrix_gateway)
def get_aviatrix_gateway_output(gw_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAviatrixGatewayResult]:
    """
    The **aviatrix_gateway** data source provides details about a specific gateway created by the Aviatrix Controller.

    This data source can prove useful when a module accepts a gateway's detail as an input variable. For example, requiring the gateway's name configuring a site2cloud connection.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aviatrix as aviatrix

    foo = aviatrix.get_aviatrix_gateway(gw_name="gatewayname")
    ```


    :param str gw_name: Gateway name.
    """
    ...
