# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AviatrixTransitGatewayArgs', 'AviatrixTransitGateway']

@pulumi.input_type
class AviatrixTransitGatewayArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 cloud_type: pulumi.Input[int],
                 gw_name: pulumi.Input[str],
                 gw_size: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 vpc_reg: pulumi.Input[str],
                 allocate_new_eip: Optional[pulumi.Input[bool]] = None,
                 approved_learned_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
                 bgp_ecmp: Optional[pulumi.Input[bool]] = None,
                 bgp_hold_time: Optional[pulumi.Input[int]] = None,
                 bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayBgpLanInterfaceArgs']]]] = None,
                 bgp_lan_interfaces_count: Optional[pulumi.Input[int]] = None,
                 bgp_manual_spoke_advertise_cidrs: Optional[pulumi.Input[str]] = None,
                 bgp_polling_time: Optional[pulumi.Input[str]] = None,
                 connected_transit: Optional[pulumi.Input[bool]] = None,
                 customer_managed_keys: Optional[pulumi.Input[str]] = None,
                 customized_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
                 customized_transit_vpc_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eip: Optional[pulumi.Input[str]] = None,
                 enable_active_standby: Optional[pulumi.Input[bool]] = None,
                 enable_active_standby_preemptive: Optional[pulumi.Input[bool]] = None,
                 enable_advertise_transit_cidr: Optional[pulumi.Input[bool]] = None,
                 enable_bgp_over_lan: Optional[pulumi.Input[bool]] = None,
                 enable_egress_transit_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_encrypt_volume: Optional[pulumi.Input[bool]] = None,
                 enable_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_gateway_load_balancer: Optional[pulumi.Input[bool]] = None,
                 enable_hybrid_connection: Optional[pulumi.Input[bool]] = None,
                 enable_jumbo_frame: Optional[pulumi.Input[bool]] = None,
                 enable_learned_cidrs_approval: Optional[pulumi.Input[bool]] = None,
                 enable_monitor_gateway_subnets: Optional[pulumi.Input[bool]] = None,
                 enable_multi_tier_transit: Optional[pulumi.Input[bool]] = None,
                 enable_preserve_as_path: Optional[pulumi.Input[bool]] = None,
                 enable_private_oob: Optional[pulumi.Input[bool]] = None,
                 enable_s2c_rx_balancing: Optional[pulumi.Input[bool]] = None,
                 enable_segmentation: Optional[pulumi.Input[bool]] = None,
                 enable_spot_instance: Optional[pulumi.Input[bool]] = None,
                 enable_transit_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_transit_summarize_cidr_to_tgw: Optional[pulumi.Input[bool]] = None,
                 enable_vpc_dns_server: Optional[pulumi.Input[bool]] = None,
                 excluded_advertised_spoke_routes: Optional[pulumi.Input[str]] = None,
                 fault_domain: Optional[pulumi.Input[str]] = None,
                 filtered_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
                 ha_availability_domain: Optional[pulumi.Input[str]] = None,
                 ha_azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
                 ha_bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]] = None,
                 ha_eip: Optional[pulumi.Input[str]] = None,
                 ha_fault_domain: Optional[pulumi.Input[str]] = None,
                 ha_gw_size: Optional[pulumi.Input[str]] = None,
                 ha_image_version: Optional[pulumi.Input[str]] = None,
                 ha_insane_mode_az: Optional[pulumi.Input[str]] = None,
                 ha_oob_availability_zone: Optional[pulumi.Input[str]] = None,
                 ha_oob_management_subnet: Optional[pulumi.Input[str]] = None,
                 ha_private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
                 ha_software_version: Optional[pulumi.Input[str]] = None,
                 ha_subnet: Optional[pulumi.Input[str]] = None,
                 ha_zone: Optional[pulumi.Input[str]] = None,
                 image_version: Optional[pulumi.Input[str]] = None,
                 insane_mode: Optional[pulumi.Input[bool]] = None,
                 insane_mode_az: Optional[pulumi.Input[str]] = None,
                 lan_private_subnet: Optional[pulumi.Input[str]] = None,
                 lan_vpc_id: Optional[pulumi.Input[str]] = None,
                 learned_cidrs_approval_mode: Optional[pulumi.Input[str]] = None,
                 local_as_number: Optional[pulumi.Input[str]] = None,
                 monitor_exclude_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_availability_zone: Optional[pulumi.Input[str]] = None,
                 oob_management_subnet: Optional[pulumi.Input[str]] = None,
                 prepend_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_mode_lb_vpc_id: Optional[pulumi.Input[str]] = None,
                 private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
                 rx_queue_size: Optional[pulumi.Input[str]] = None,
                 single_az_ha: Optional[pulumi.Input[bool]] = None,
                 single_ip_snat: Optional[pulumi.Input[bool]] = None,
                 software_version: Optional[pulumi.Input[str]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tunnel_detection_time: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AviatrixTransitGateway resource.
        :param pulumi.Input[str] account_name: This parameter represents the name of a Cloud-Account in Aviatrix controller.
        :param pulumi.Input[int] cloud_type: Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.
        :param pulumi.Input[str] gw_name: Name of the gateway which is going to be created.
        :param pulumi.Input[str] gw_size: Size of the gateway instance. Example: AWS: "t2.large", Azure/AzureGov: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1", AWSGov: "t2.large", AWSChina: "t2.large", AzureChina: "Standard_A0".
        :param pulumi.Input[str] subnet: A VPC Network address range selected from one of the available network ranges.
        :param pulumi.Input[str] vpc_id: VPC-ID/VNet-Name of cloud provider.
        :param pulumi.Input[str] vpc_reg: Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".
        :param pulumi.Input[bool] allocate_new_eip: When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] approved_learned_cidrs: A set of approved learned CIDRs. Only valid when `enable_learned_cidrs_approval` is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.
        :param pulumi.Input[str] availability_domain: Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] azure_eip_name_resource_group: Name of public IP Address resource and its resource group in Azure to be assigned to the Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `allocate_new_eip` is false and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        :param pulumi.Input[bool] bgp_ecmp: Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.
        :param pulumi.Input[int] bgp_hold_time: BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.
        :param pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayBgpLanInterfaceArgs']]] bgp_lan_interfaces: Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit. Each interface has the following attributes:
        :param pulumi.Input[int] bgp_lan_interfaces_count: Number of interfaces that will be created for BGP over LAN enabled Azure transit. Valid value: 1~5 for FireNet case, 1~7 for Non-FireNet case. Default value: 1. Available as of provider version R2.22+.
        :param pulumi.Input[str] bgp_manual_spoke_advertise_cidrs: Intended CIDR list to be advertised to external BGP router. Example: "10.2.0.0/16,10.4.0.0/16". Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        :param pulumi.Input[str] bgp_polling_time: BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".
        :param pulumi.Input[bool] connected_transit: Specify Connected Transit status. If enabled, it allows spokes to run traffics to other spokes via transit gateway. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] customer_managed_keys: Customer managed key ID.
        :param pulumi.Input[str] customized_spoke_vpc_routes: A list of comma-separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this transit gateway. Example: "10.0.0.0/16,10.2.0.0/16".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] customized_transit_vpc_routes: A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. To be effective, `enable_advertise_transit_cidr` or firewall management access for a Transit FireNet gateway must be enabled. Example: ["10.0.0.0/16", "10.2.0.0/16"].
        :param pulumi.Input[str] eip: Required when `allocate_new_eip` is false. It uses the specified EIP for this gateway. Available in Controller version 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        :param pulumi.Input[bool] enable_active_standby: Enables [Active-Standby Mode](https://docs.aviatrix.com/HowTos/transit_advanced.html#active-standby). Available only with HA enabled. Valid values: true, false. Default value: false. Available in provider version R2.17.1+.
        :param pulumi.Input[bool] enable_active_standby_preemptive: Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_advertise_transit_cidr: Switch to enable/disable advertise transit VPC network CIDR for a VGW connection. Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        :param pulumi.Input[bool] enable_bgp_over_lan: Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Must be enabled to create a BGP over LAN `AviatrixTransitExternalDeviceConn` resource with this Transit Gateway. Only valid for GCP (4), Azure (8), AzureGov (32) or AzureChina (2048). Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        :param pulumi.Input[bool] enable_egress_transit_firenet: Enable [Egress Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_workflow.html#b-enable-transit-firenet-on-aviatrix-egress-transit-gateway). Valid values: true, false. Default value: false. Available in provider version R2.16.3+.
        :param pulumi.Input[bool] enable_encrypt_volume: Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_firenet: Set to true to use gateway for legacy [AWS TGW-based FireNet](https://docs.aviatrix.com/HowTos/firewall_network_faq.html) connection. Valid values: true, false. Default value: false. **NOTE: If previously using an older provider version R2.5 where attribute name was `enable_firenet_interfaces`, please see notes here.**
        :param pulumi.Input[bool] enable_gateway_load_balancer: Enable FireNet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet` are set to true and `cloud_type` = 1 (AWS). Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        :param pulumi.Input[bool] enable_hybrid_connection: Sign of readiness for AWS TGW connection. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Example: false.
        :param pulumi.Input[bool] enable_jumbo_frame: Enable jumbo frames for this transit gateway. Default value is true.
        :param pulumi.Input[bool] enable_learned_cidrs_approval: Switch to enable/disable encrypted transit approval for transit gateway. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_monitor_gateway_subnets: If set to true, the [Monitor Gateway Subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet) feature is enabled. Default value is false. Available in provider version R2.18+.
        :param pulumi.Input[bool] enable_multi_tier_transit: Enable Multi-tier Transit mode on transit gateway. When enabled, transit gateway will propagate routes it receives from its transit peering peer to other transit peering peers. `local_as_number` is required. Default value: false. Available as of provider version R2.19+.
        :param pulumi.Input[bool] enable_preserve_as_path: Enable preserve as_path when advertising manual summary cidrs on transit gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+
               },
        :param pulumi.Input[bool] enable_private_oob: Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_s2c_rx_balancing: Enable S2C receive packet CPU re-balancing on transit gateway. Valid values: true, false. Default value: false. Available in provider version R2.21.2+.
        :param pulumi.Input[bool] enable_segmentation: Enable transit gateway for segmentation. Valid values: true, false. Default: false.
        :param pulumi.Input[bool] enable_spot_instance: Enable spot instance. NOT supported for production deployment.
        :param pulumi.Input[bool] enable_transit_firenet: Set to true to use gateway for [Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_faq.html) connection. Valid values: true, false. Default value: false. Available in provider version R2.12+.
        :param pulumi.Input[bool] enable_transit_summarize_cidr_to_tgw: Enable summarize CIDR to TGW. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_vpc_dns_server: Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] excluded_advertised_spoke_routes: A list of comma-separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'. Example: "10.4.0.0/16,10.5.0.0/16".
        :param pulumi.Input[str] fault_domain: Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] filtered_spoke_vpc_routes: A list of comma-separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all spoke gateways attached to this transit gateway. Example: "10.2.0.0/16,10.3.0.0/16".
        :param pulumi.Input[str] ha_availability_domain: HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] ha_azure_eip_name_resource_group: Name of public IP Address resource and its resource group in Azure to be assigned to the HA Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `ha_eip` is set and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        :param pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]] ha_bgp_lan_interfaces: Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit HA. Each interface has the following attributes:
        :param pulumi.Input[str] ha_eip: Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        :param pulumi.Input[str] ha_fault_domain: HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] ha_gw_size: HA Gateway Size. Mandatory if enabling HA. Example: "t2.micro".
        :param pulumi.Input[str] ha_image_version: The image version of the HA gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `ha_software_version`. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        :param pulumi.Input[str] ha_insane_mode_az: AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret if `insane_mode` is enabled and `ha_subnet` is set. Example: AWS: "us-west-1a".
        :param pulumi.Input[str] ha_oob_availability_zone: HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".
        :param pulumi.Input[str] ha_oob_management_subnet: HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".
        :param pulumi.Input[str] ha_private_mode_subnet_zone: Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov with HA. Available in Provider version R2.23+.
        :param pulumi.Input[str] ha_software_version: The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        :param pulumi.Input[str] ha_subnet: HA Subnet CIDR. Required only if enabling HA for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24".
        :param pulumi.Input[str] ha_zone: HA Zone. Required if enabling HA for GCP gateway. Optional if enabling HA for Azure gateway. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.
        :param pulumi.Input[str] image_version: The image version of the gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `software_version`. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        :param pulumi.Input[bool] insane_mode: Specify true for [Insane Mode](https://docs.aviatrix.com/HowTos/insane_mode.html) high performance gateway. Insane Mode gateway size must be at least c5 size (AWS, AWSGov, AWS China, AWS Top Secret and AWS Secret) or Standard_D3_v2 (Azure and AzureGov); for GCP only four size are supported: "n1-highcpu-4", "n1-highcpu-8", "n1-highcpu-16" and "n1-highcpu-32". If enabled, you must specify a valid /26 CIDR segment of the VPC to create a new subnet for AWS, Azure, AzureGov, AWSGov, AWS Top Secret and AWS Secret. Only available for AWS, GCP/OCI, Azure, AzureGov, AzureChina, AWSGov, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] insane_mode_az: AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if `insane_mode` is enabled. Example: AWS: "us-west-1a".
        :param pulumi.Input[str] lan_private_subnet: LAN Private Subnet. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        :param pulumi.Input[str] lan_vpc_id: LAN VPC ID. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        :param pulumi.Input[str] learned_cidrs_approval_mode: Learned CIDRs approval mode. Either "gateway" (approval on a per gateway basis) or "connection" (approval on a per connection basis). Default value: "gateway". Available as of provider version R2.18+.
        :param pulumi.Input[str] local_as_number: Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitor_exclude_lists: Set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true. Available in provider version R2.18+.
        :param pulumi.Input[str] oob_availability_zone: OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".
        :param pulumi.Input[str] oob_management_subnet: OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prepend_as_paths: List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        :param pulumi.Input[str] private_mode_lb_vpc_id: VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in Provider version R2.23+.
        :param pulumi.Input[str] private_mode_subnet_zone: Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov. Available in Provider version R2.23+.
        :param pulumi.Input[str] rx_queue_size: Gateway ethernet interface RX queue size. Once set, can't be deleted or disabled. Available for AWS as of provider version R2.22+.
        :param pulumi.Input[bool] single_az_ha: Set to true if this [feature](https://docs.aviatrix.com/Solutions/gateway_ha.html#single-az-gateway) is desired. Valid values: true, false.
        :param pulumi.Input[bool] single_ip_snat: Enable "single_ip" mode Source NAT for this container. Valid values: true, false. **NOTE: Please see notes here in regards to changes to this argument in R2.10.**
        :param pulumi.Input[str] software_version: The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        :param pulumi.Input[str] spot_price: Price for spot instance. NOT supported for production deployment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_lists: (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina. Example: ["key1:value1","key2:value2"].
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.
        :param pulumi.Input[int] tunnel_detection_time: The IPSec tunnel down detection time for the transit gateway.
        :param pulumi.Input[str] zone: Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'. Available in provider version R2.17+.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "gw_name", gw_name)
        pulumi.set(__self__, "gw_size", gw_size)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_reg", vpc_reg)
        if allocate_new_eip is not None:
            pulumi.set(__self__, "allocate_new_eip", allocate_new_eip)
        if approved_learned_cidrs is not None:
            pulumi.set(__self__, "approved_learned_cidrs", approved_learned_cidrs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if azure_eip_name_resource_group is not None:
            pulumi.set(__self__, "azure_eip_name_resource_group", azure_eip_name_resource_group)
        if bgp_ecmp is not None:
            pulumi.set(__self__, "bgp_ecmp", bgp_ecmp)
        if bgp_hold_time is not None:
            pulumi.set(__self__, "bgp_hold_time", bgp_hold_time)
        if bgp_lan_interfaces is not None:
            pulumi.set(__self__, "bgp_lan_interfaces", bgp_lan_interfaces)
        if bgp_lan_interfaces_count is not None:
            pulumi.set(__self__, "bgp_lan_interfaces_count", bgp_lan_interfaces_count)
        if bgp_manual_spoke_advertise_cidrs is not None:
            pulumi.set(__self__, "bgp_manual_spoke_advertise_cidrs", bgp_manual_spoke_advertise_cidrs)
        if bgp_polling_time is not None:
            pulumi.set(__self__, "bgp_polling_time", bgp_polling_time)
        if connected_transit is not None:
            pulumi.set(__self__, "connected_transit", connected_transit)
        if customer_managed_keys is not None:
            pulumi.set(__self__, "customer_managed_keys", customer_managed_keys)
        if customized_spoke_vpc_routes is not None:
            pulumi.set(__self__, "customized_spoke_vpc_routes", customized_spoke_vpc_routes)
        if customized_transit_vpc_routes is not None:
            pulumi.set(__self__, "customized_transit_vpc_routes", customized_transit_vpc_routes)
        if eip is not None:
            pulumi.set(__self__, "eip", eip)
        if enable_active_standby is not None:
            pulumi.set(__self__, "enable_active_standby", enable_active_standby)
        if enable_active_standby_preemptive is not None:
            pulumi.set(__self__, "enable_active_standby_preemptive", enable_active_standby_preemptive)
        if enable_advertise_transit_cidr is not None:
            pulumi.set(__self__, "enable_advertise_transit_cidr", enable_advertise_transit_cidr)
        if enable_bgp_over_lan is not None:
            pulumi.set(__self__, "enable_bgp_over_lan", enable_bgp_over_lan)
        if enable_egress_transit_firenet is not None:
            pulumi.set(__self__, "enable_egress_transit_firenet", enable_egress_transit_firenet)
        if enable_encrypt_volume is not None:
            pulumi.set(__self__, "enable_encrypt_volume", enable_encrypt_volume)
        if enable_firenet is not None:
            pulumi.set(__self__, "enable_firenet", enable_firenet)
        if enable_gateway_load_balancer is not None:
            pulumi.set(__self__, "enable_gateway_load_balancer", enable_gateway_load_balancer)
        if enable_hybrid_connection is not None:
            pulumi.set(__self__, "enable_hybrid_connection", enable_hybrid_connection)
        if enable_jumbo_frame is not None:
            pulumi.set(__self__, "enable_jumbo_frame", enable_jumbo_frame)
        if enable_learned_cidrs_approval is not None:
            pulumi.set(__self__, "enable_learned_cidrs_approval", enable_learned_cidrs_approval)
        if enable_monitor_gateway_subnets is not None:
            pulumi.set(__self__, "enable_monitor_gateway_subnets", enable_monitor_gateway_subnets)
        if enable_multi_tier_transit is not None:
            pulumi.set(__self__, "enable_multi_tier_transit", enable_multi_tier_transit)
        if enable_preserve_as_path is not None:
            pulumi.set(__self__, "enable_preserve_as_path", enable_preserve_as_path)
        if enable_private_oob is not None:
            pulumi.set(__self__, "enable_private_oob", enable_private_oob)
        if enable_s2c_rx_balancing is not None:
            pulumi.set(__self__, "enable_s2c_rx_balancing", enable_s2c_rx_balancing)
        if enable_segmentation is not None:
            pulumi.set(__self__, "enable_segmentation", enable_segmentation)
        if enable_spot_instance is not None:
            pulumi.set(__self__, "enable_spot_instance", enable_spot_instance)
        if enable_transit_firenet is not None:
            pulumi.set(__self__, "enable_transit_firenet", enable_transit_firenet)
        if enable_transit_summarize_cidr_to_tgw is not None:
            pulumi.set(__self__, "enable_transit_summarize_cidr_to_tgw", enable_transit_summarize_cidr_to_tgw)
        if enable_vpc_dns_server is not None:
            pulumi.set(__self__, "enable_vpc_dns_server", enable_vpc_dns_server)
        if excluded_advertised_spoke_routes is not None:
            pulumi.set(__self__, "excluded_advertised_spoke_routes", excluded_advertised_spoke_routes)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if filtered_spoke_vpc_routes is not None:
            pulumi.set(__self__, "filtered_spoke_vpc_routes", filtered_spoke_vpc_routes)
        if ha_availability_domain is not None:
            pulumi.set(__self__, "ha_availability_domain", ha_availability_domain)
        if ha_azure_eip_name_resource_group is not None:
            pulumi.set(__self__, "ha_azure_eip_name_resource_group", ha_azure_eip_name_resource_group)
        if ha_bgp_lan_interfaces is not None:
            pulumi.set(__self__, "ha_bgp_lan_interfaces", ha_bgp_lan_interfaces)
        if ha_eip is not None:
            pulumi.set(__self__, "ha_eip", ha_eip)
        if ha_fault_domain is not None:
            pulumi.set(__self__, "ha_fault_domain", ha_fault_domain)
        if ha_gw_size is not None:
            pulumi.set(__self__, "ha_gw_size", ha_gw_size)
        if ha_image_version is not None:
            pulumi.set(__self__, "ha_image_version", ha_image_version)
        if ha_insane_mode_az is not None:
            pulumi.set(__self__, "ha_insane_mode_az", ha_insane_mode_az)
        if ha_oob_availability_zone is not None:
            pulumi.set(__self__, "ha_oob_availability_zone", ha_oob_availability_zone)
        if ha_oob_management_subnet is not None:
            pulumi.set(__self__, "ha_oob_management_subnet", ha_oob_management_subnet)
        if ha_private_mode_subnet_zone is not None:
            pulumi.set(__self__, "ha_private_mode_subnet_zone", ha_private_mode_subnet_zone)
        if ha_software_version is not None:
            pulumi.set(__self__, "ha_software_version", ha_software_version)
        if ha_subnet is not None:
            pulumi.set(__self__, "ha_subnet", ha_subnet)
        if ha_zone is not None:
            pulumi.set(__self__, "ha_zone", ha_zone)
        if image_version is not None:
            pulumi.set(__self__, "image_version", image_version)
        if insane_mode is not None:
            pulumi.set(__self__, "insane_mode", insane_mode)
        if insane_mode_az is not None:
            pulumi.set(__self__, "insane_mode_az", insane_mode_az)
        if lan_private_subnet is not None:
            pulumi.set(__self__, "lan_private_subnet", lan_private_subnet)
        if lan_vpc_id is not None:
            pulumi.set(__self__, "lan_vpc_id", lan_vpc_id)
        if learned_cidrs_approval_mode is not None:
            pulumi.set(__self__, "learned_cidrs_approval_mode", learned_cidrs_approval_mode)
        if local_as_number is not None:
            pulumi.set(__self__, "local_as_number", local_as_number)
        if monitor_exclude_lists is not None:
            pulumi.set(__self__, "monitor_exclude_lists", monitor_exclude_lists)
        if oob_availability_zone is not None:
            pulumi.set(__self__, "oob_availability_zone", oob_availability_zone)
        if oob_management_subnet is not None:
            pulumi.set(__self__, "oob_management_subnet", oob_management_subnet)
        if prepend_as_paths is not None:
            pulumi.set(__self__, "prepend_as_paths", prepend_as_paths)
        if private_mode_lb_vpc_id is not None:
            pulumi.set(__self__, "private_mode_lb_vpc_id", private_mode_lb_vpc_id)
        if private_mode_subnet_zone is not None:
            pulumi.set(__self__, "private_mode_subnet_zone", private_mode_subnet_zone)
        if rx_queue_size is not None:
            pulumi.set(__self__, "rx_queue_size", rx_queue_size)
        if single_az_ha is not None:
            pulumi.set(__self__, "single_az_ha", single_az_ha)
        if single_ip_snat is not None:
            pulumi.set(__self__, "single_ip_snat", single_ip_snat)
        if software_version is not None:
            pulumi.set(__self__, "software_version", software_version)
        if spot_price is not None:
            pulumi.set(__self__, "spot_price", spot_price)
        if tag_lists is not None:
            warnings.warn("""Use tags instead.""", DeprecationWarning)
            pulumi.log.warn("""tag_lists is deprecated: Use tags instead.""")
        if tag_lists is not None:
            pulumi.set(__self__, "tag_lists", tag_lists)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tunnel_detection_time is not None:
            pulumi.set(__self__, "tunnel_detection_time", tunnel_detection_time)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        This parameter represents the name of a Cloud-Account in Aviatrix controller.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> pulumi.Input[int]:
        """
        Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.
        """
        return pulumi.get(self, "cloud_type")

    @cloud_type.setter
    def cloud_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "cloud_type", value)

    @property
    @pulumi.getter(name="gwName")
    def gw_name(self) -> pulumi.Input[str]:
        """
        Name of the gateway which is going to be created.
        """
        return pulumi.get(self, "gw_name")

    @gw_name.setter
    def gw_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gw_name", value)

    @property
    @pulumi.getter(name="gwSize")
    def gw_size(self) -> pulumi.Input[str]:
        """
        Size of the gateway instance. Example: AWS: "t2.large", Azure/AzureGov: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1", AWSGov: "t2.large", AWSChina: "t2.large", AzureChina: "Standard_A0".
        """
        return pulumi.get(self, "gw_size")

    @gw_size.setter
    def gw_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "gw_size", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        """
        A VPC Network address range selected from one of the available network ranges.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        VPC-ID/VNet-Name of cloud provider.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcReg")
    def vpc_reg(self) -> pulumi.Input[str]:
        """
        Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".
        """
        return pulumi.get(self, "vpc_reg")

    @vpc_reg.setter
    def vpc_reg(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_reg", value)

    @property
    @pulumi.getter(name="allocateNewEip")
    def allocate_new_eip(self) -> Optional[pulumi.Input[bool]]:
        """
        When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.
        """
        return pulumi.get(self, "allocate_new_eip")

    @allocate_new_eip.setter
    def allocate_new_eip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allocate_new_eip", value)

    @property
    @pulumi.getter(name="approvedLearnedCidrs")
    def approved_learned_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of approved learned CIDRs. Only valid when `enable_learned_cidrs_approval` is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.
        """
        return pulumi.get(self, "approved_learned_cidrs")

    @approved_learned_cidrs.setter
    def approved_learned_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "approved_learned_cidrs", value)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "availability_domain")

    @availability_domain.setter
    def availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_domain", value)

    @property
    @pulumi.getter(name="azureEipNameResourceGroup")
    def azure_eip_name_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of public IP Address resource and its resource group in Azure to be assigned to the Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `allocate_new_eip` is false and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        """
        return pulumi.get(self, "azure_eip_name_resource_group")

    @azure_eip_name_resource_group.setter
    def azure_eip_name_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_eip_name_resource_group", value)

    @property
    @pulumi.getter(name="bgpEcmp")
    def bgp_ecmp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.
        """
        return pulumi.get(self, "bgp_ecmp")

    @bgp_ecmp.setter
    def bgp_ecmp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bgp_ecmp", value)

    @property
    @pulumi.getter(name="bgpHoldTime")
    def bgp_hold_time(self) -> Optional[pulumi.Input[int]]:
        """
        BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.
        """
        return pulumi.get(self, "bgp_hold_time")

    @bgp_hold_time.setter
    def bgp_hold_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_hold_time", value)

    @property
    @pulumi.getter(name="bgpLanInterfaces")
    def bgp_lan_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayBgpLanInterfaceArgs']]]]:
        """
        Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit. Each interface has the following attributes:
        """
        return pulumi.get(self, "bgp_lan_interfaces")

    @bgp_lan_interfaces.setter
    def bgp_lan_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayBgpLanInterfaceArgs']]]]):
        pulumi.set(self, "bgp_lan_interfaces", value)

    @property
    @pulumi.getter(name="bgpLanInterfacesCount")
    def bgp_lan_interfaces_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of interfaces that will be created for BGP over LAN enabled Azure transit. Valid value: 1~5 for FireNet case, 1~7 for Non-FireNet case. Default value: 1. Available as of provider version R2.22+.
        """
        return pulumi.get(self, "bgp_lan_interfaces_count")

    @bgp_lan_interfaces_count.setter
    def bgp_lan_interfaces_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_lan_interfaces_count", value)

    @property
    @pulumi.getter(name="bgpManualSpokeAdvertiseCidrs")
    def bgp_manual_spoke_advertise_cidrs(self) -> Optional[pulumi.Input[str]]:
        """
        Intended CIDR list to be advertised to external BGP router. Example: "10.2.0.0/16,10.4.0.0/16". Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        """
        return pulumi.get(self, "bgp_manual_spoke_advertise_cidrs")

    @bgp_manual_spoke_advertise_cidrs.setter
    def bgp_manual_spoke_advertise_cidrs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_manual_spoke_advertise_cidrs", value)

    @property
    @pulumi.getter(name="bgpPollingTime")
    def bgp_polling_time(self) -> Optional[pulumi.Input[str]]:
        """
        BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".
        """
        return pulumi.get(self, "bgp_polling_time")

    @bgp_polling_time.setter
    def bgp_polling_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_polling_time", value)

    @property
    @pulumi.getter(name="connectedTransit")
    def connected_transit(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify Connected Transit status. If enabled, it allows spokes to run traffics to other spokes via transit gateway. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "connected_transit")

    @connected_transit.setter
    def connected_transit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connected_transit", value)

    @property
    @pulumi.getter(name="customerManagedKeys")
    def customer_managed_keys(self) -> Optional[pulumi.Input[str]]:
        """
        Customer managed key ID.
        """
        return pulumi.get(self, "customer_managed_keys")

    @customer_managed_keys.setter
    def customer_managed_keys(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_managed_keys", value)

    @property
    @pulumi.getter(name="customizedSpokeVpcRoutes")
    def customized_spoke_vpc_routes(self) -> Optional[pulumi.Input[str]]:
        """
        A list of comma-separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this transit gateway. Example: "10.0.0.0/16,10.2.0.0/16".
        """
        return pulumi.get(self, "customized_spoke_vpc_routes")

    @customized_spoke_vpc_routes.setter
    def customized_spoke_vpc_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customized_spoke_vpc_routes", value)

    @property
    @pulumi.getter(name="customizedTransitVpcRoutes")
    def customized_transit_vpc_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. To be effective, `enable_advertise_transit_cidr` or firewall management access for a Transit FireNet gateway must be enabled. Example: ["10.0.0.0/16", "10.2.0.0/16"].
        """
        return pulumi.get(self, "customized_transit_vpc_routes")

    @customized_transit_vpc_routes.setter
    def customized_transit_vpc_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "customized_transit_vpc_routes", value)

    @property
    @pulumi.getter
    def eip(self) -> Optional[pulumi.Input[str]]:
        """
        Required when `allocate_new_eip` is false. It uses the specified EIP for this gateway. Available in Controller version 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        """
        return pulumi.get(self, "eip")

    @eip.setter
    def eip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip", value)

    @property
    @pulumi.getter(name="enableActiveStandby")
    def enable_active_standby(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables [Active-Standby Mode](https://docs.aviatrix.com/HowTos/transit_advanced.html#active-standby). Available only with HA enabled. Valid values: true, false. Default value: false. Available in provider version R2.17.1+.
        """
        return pulumi.get(self, "enable_active_standby")

    @enable_active_standby.setter
    def enable_active_standby(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_active_standby", value)

    @property
    @pulumi.getter(name="enableActiveStandbyPreemptive")
    def enable_active_standby_preemptive(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_active_standby_preemptive")

    @enable_active_standby_preemptive.setter
    def enable_active_standby_preemptive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_active_standby_preemptive", value)

    @property
    @pulumi.getter(name="enableAdvertiseTransitCidr")
    def enable_advertise_transit_cidr(self) -> Optional[pulumi.Input[bool]]:
        """
        Switch to enable/disable advertise transit VPC network CIDR for a VGW connection. Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        """
        return pulumi.get(self, "enable_advertise_transit_cidr")

    @enable_advertise_transit_cidr.setter
    def enable_advertise_transit_cidr(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_advertise_transit_cidr", value)

    @property
    @pulumi.getter(name="enableBgpOverLan")
    def enable_bgp_over_lan(self) -> Optional[pulumi.Input[bool]]:
        """
        Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Must be enabled to create a BGP over LAN `AviatrixTransitExternalDeviceConn` resource with this Transit Gateway. Only valid for GCP (4), Azure (8), AzureGov (32) or AzureChina (2048). Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        """
        return pulumi.get(self, "enable_bgp_over_lan")

    @enable_bgp_over_lan.setter
    def enable_bgp_over_lan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_bgp_over_lan", value)

    @property
    @pulumi.getter(name="enableEgressTransitFirenet")
    def enable_egress_transit_firenet(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable [Egress Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_workflow.html#b-enable-transit-firenet-on-aviatrix-egress-transit-gateway). Valid values: true, false. Default value: false. Available in provider version R2.16.3+.
        """
        return pulumi.get(self, "enable_egress_transit_firenet")

    @enable_egress_transit_firenet.setter
    def enable_egress_transit_firenet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_egress_transit_firenet", value)

    @property
    @pulumi.getter(name="enableEncryptVolume")
    def enable_encrypt_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_encrypt_volume")

    @enable_encrypt_volume.setter
    def enable_encrypt_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_encrypt_volume", value)

    @property
    @pulumi.getter(name="enableFirenet")
    def enable_firenet(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to use gateway for legacy [AWS TGW-based FireNet](https://docs.aviatrix.com/HowTos/firewall_network_faq.html) connection. Valid values: true, false. Default value: false. **NOTE: If previously using an older provider version R2.5 where attribute name was `enable_firenet_interfaces`, please see notes here.**
        """
        return pulumi.get(self, "enable_firenet")

    @enable_firenet.setter
    def enable_firenet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_firenet", value)

    @property
    @pulumi.getter(name="enableGatewayLoadBalancer")
    def enable_gateway_load_balancer(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable FireNet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet` are set to true and `cloud_type` = 1 (AWS). Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        """
        return pulumi.get(self, "enable_gateway_load_balancer")

    @enable_gateway_load_balancer.setter
    def enable_gateway_load_balancer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_gateway_load_balancer", value)

    @property
    @pulumi.getter(name="enableHybridConnection")
    def enable_hybrid_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Sign of readiness for AWS TGW connection. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Example: false.
        """
        return pulumi.get(self, "enable_hybrid_connection")

    @enable_hybrid_connection.setter
    def enable_hybrid_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_hybrid_connection", value)

    @property
    @pulumi.getter(name="enableJumboFrame")
    def enable_jumbo_frame(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable jumbo frames for this transit gateway. Default value is true.
        """
        return pulumi.get(self, "enable_jumbo_frame")

    @enable_jumbo_frame.setter
    def enable_jumbo_frame(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_jumbo_frame", value)

    @property
    @pulumi.getter(name="enableLearnedCidrsApproval")
    def enable_learned_cidrs_approval(self) -> Optional[pulumi.Input[bool]]:
        """
        Switch to enable/disable encrypted transit approval for transit gateway. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_learned_cidrs_approval")

    @enable_learned_cidrs_approval.setter
    def enable_learned_cidrs_approval(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_learned_cidrs_approval", value)

    @property
    @pulumi.getter(name="enableMonitorGatewaySubnets")
    def enable_monitor_gateway_subnets(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the [Monitor Gateway Subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet) feature is enabled. Default value is false. Available in provider version R2.18+.
        """
        return pulumi.get(self, "enable_monitor_gateway_subnets")

    @enable_monitor_gateway_subnets.setter
    def enable_monitor_gateway_subnets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_monitor_gateway_subnets", value)

    @property
    @pulumi.getter(name="enableMultiTierTransit")
    def enable_multi_tier_transit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Multi-tier Transit mode on transit gateway. When enabled, transit gateway will propagate routes it receives from its transit peering peer to other transit peering peers. `local_as_number` is required. Default value: false. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "enable_multi_tier_transit")

    @enable_multi_tier_transit.setter
    def enable_multi_tier_transit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_multi_tier_transit", value)

    @property
    @pulumi.getter(name="enablePreserveAsPath")
    def enable_preserve_as_path(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable preserve as_path when advertising manual summary cidrs on transit gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+
        },
        """
        return pulumi.get(self, "enable_preserve_as_path")

    @enable_preserve_as_path.setter
    def enable_preserve_as_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_preserve_as_path", value)

    @property
    @pulumi.getter(name="enablePrivateOob")
    def enable_private_oob(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_private_oob")

    @enable_private_oob.setter
    def enable_private_oob(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_private_oob", value)

    @property
    @pulumi.getter(name="enableS2cRxBalancing")
    def enable_s2c_rx_balancing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable S2C receive packet CPU re-balancing on transit gateway. Valid values: true, false. Default value: false. Available in provider version R2.21.2+.
        """
        return pulumi.get(self, "enable_s2c_rx_balancing")

    @enable_s2c_rx_balancing.setter
    def enable_s2c_rx_balancing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_s2c_rx_balancing", value)

    @property
    @pulumi.getter(name="enableSegmentation")
    def enable_segmentation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable transit gateway for segmentation. Valid values: true, false. Default: false.
        """
        return pulumi.get(self, "enable_segmentation")

    @enable_segmentation.setter
    def enable_segmentation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_segmentation", value)

    @property
    @pulumi.getter(name="enableSpotInstance")
    def enable_spot_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable spot instance. NOT supported for production deployment.
        """
        return pulumi.get(self, "enable_spot_instance")

    @enable_spot_instance.setter
    def enable_spot_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_spot_instance", value)

    @property
    @pulumi.getter(name="enableTransitFirenet")
    def enable_transit_firenet(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to use gateway for [Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_faq.html) connection. Valid values: true, false. Default value: false. Available in provider version R2.12+.
        """
        return pulumi.get(self, "enable_transit_firenet")

    @enable_transit_firenet.setter
    def enable_transit_firenet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_transit_firenet", value)

    @property
    @pulumi.getter(name="enableTransitSummarizeCidrToTgw")
    def enable_transit_summarize_cidr_to_tgw(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable summarize CIDR to TGW. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_transit_summarize_cidr_to_tgw")

    @enable_transit_summarize_cidr_to_tgw.setter
    def enable_transit_summarize_cidr_to_tgw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_transit_summarize_cidr_to_tgw", value)

    @property
    @pulumi.getter(name="enableVpcDnsServer")
    def enable_vpc_dns_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_vpc_dns_server")

    @enable_vpc_dns_server.setter
    def enable_vpc_dns_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vpc_dns_server", value)

    @property
    @pulumi.getter(name="excludedAdvertisedSpokeRoutes")
    def excluded_advertised_spoke_routes(self) -> Optional[pulumi.Input[str]]:
        """
        A list of comma-separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'. Example: "10.4.0.0/16,10.5.0.0/16".
        """
        return pulumi.get(self, "excluded_advertised_spoke_routes")

    @excluded_advertised_spoke_routes.setter
    def excluded_advertised_spoke_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excluded_advertised_spoke_routes", value)

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "fault_domain")

    @fault_domain.setter
    def fault_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_domain", value)

    @property
    @pulumi.getter(name="filteredSpokeVpcRoutes")
    def filtered_spoke_vpc_routes(self) -> Optional[pulumi.Input[str]]:
        """
        A list of comma-separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all spoke gateways attached to this transit gateway. Example: "10.2.0.0/16,10.3.0.0/16".
        """
        return pulumi.get(self, "filtered_spoke_vpc_routes")

    @filtered_spoke_vpc_routes.setter
    def filtered_spoke_vpc_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filtered_spoke_vpc_routes", value)

    @property
    @pulumi.getter(name="haAvailabilityDomain")
    def ha_availability_domain(self) -> Optional[pulumi.Input[str]]:
        """
        HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "ha_availability_domain")

    @ha_availability_domain.setter
    def ha_availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_availability_domain", value)

    @property
    @pulumi.getter(name="haAzureEipNameResourceGroup")
    def ha_azure_eip_name_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of public IP Address resource and its resource group in Azure to be assigned to the HA Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `ha_eip` is set and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        """
        return pulumi.get(self, "ha_azure_eip_name_resource_group")

    @ha_azure_eip_name_resource_group.setter
    def ha_azure_eip_name_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_azure_eip_name_resource_group", value)

    @property
    @pulumi.getter(name="haBgpLanInterfaces")
    def ha_bgp_lan_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]]:
        """
        Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit HA. Each interface has the following attributes:
        """
        return pulumi.get(self, "ha_bgp_lan_interfaces")

    @ha_bgp_lan_interfaces.setter
    def ha_bgp_lan_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]]):
        pulumi.set(self, "ha_bgp_lan_interfaces", value)

    @property
    @pulumi.getter(name="haEip")
    def ha_eip(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        """
        return pulumi.get(self, "ha_eip")

    @ha_eip.setter
    def ha_eip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_eip", value)

    @property
    @pulumi.getter(name="haFaultDomain")
    def ha_fault_domain(self) -> Optional[pulumi.Input[str]]:
        """
        HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "ha_fault_domain")

    @ha_fault_domain.setter
    def ha_fault_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_fault_domain", value)

    @property
    @pulumi.getter(name="haGwSize")
    def ha_gw_size(self) -> Optional[pulumi.Input[str]]:
        """
        HA Gateway Size. Mandatory if enabling HA. Example: "t2.micro".
        """
        return pulumi.get(self, "ha_gw_size")

    @ha_gw_size.setter
    def ha_gw_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_gw_size", value)

    @property
    @pulumi.getter(name="haImageVersion")
    def ha_image_version(self) -> Optional[pulumi.Input[str]]:
        """
        The image version of the HA gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `ha_software_version`. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "ha_image_version")

    @ha_image_version.setter
    def ha_image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_image_version", value)

    @property
    @pulumi.getter(name="haInsaneModeAz")
    def ha_insane_mode_az(self) -> Optional[pulumi.Input[str]]:
        """
        AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret if `insane_mode` is enabled and `ha_subnet` is set. Example: AWS: "us-west-1a".
        """
        return pulumi.get(self, "ha_insane_mode_az")

    @ha_insane_mode_az.setter
    def ha_insane_mode_az(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_insane_mode_az", value)

    @property
    @pulumi.getter(name="haOobAvailabilityZone")
    def ha_oob_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".
        """
        return pulumi.get(self, "ha_oob_availability_zone")

    @ha_oob_availability_zone.setter
    def ha_oob_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_oob_availability_zone", value)

    @property
    @pulumi.getter(name="haOobManagementSubnet")
    def ha_oob_management_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".
        """
        return pulumi.get(self, "ha_oob_management_subnet")

    @ha_oob_management_subnet.setter
    def ha_oob_management_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_oob_management_subnet", value)

    @property
    @pulumi.getter(name="haPrivateModeSubnetZone")
    def ha_private_mode_subnet_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov with HA. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "ha_private_mode_subnet_zone")

    @ha_private_mode_subnet_zone.setter
    def ha_private_mode_subnet_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_private_mode_subnet_zone", value)

    @property
    @pulumi.getter(name="haSoftwareVersion")
    def ha_software_version(self) -> Optional[pulumi.Input[str]]:
        """
        The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "ha_software_version")

    @ha_software_version.setter
    def ha_software_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_software_version", value)

    @property
    @pulumi.getter(name="haSubnet")
    def ha_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        HA Subnet CIDR. Required only if enabling HA for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24".
        """
        return pulumi.get(self, "ha_subnet")

    @ha_subnet.setter
    def ha_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_subnet", value)

    @property
    @pulumi.getter(name="haZone")
    def ha_zone(self) -> Optional[pulumi.Input[str]]:
        """
        HA Zone. Required if enabling HA for GCP gateway. Optional if enabling HA for Azure gateway. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.
        """
        return pulumi.get(self, "ha_zone")

    @ha_zone.setter
    def ha_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_zone", value)

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> Optional[pulumi.Input[str]]:
        """
        The image version of the gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `software_version`. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "image_version")

    @image_version.setter
    def image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_version", value)

    @property
    @pulumi.getter(name="insaneMode")
    def insane_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true for [Insane Mode](https://docs.aviatrix.com/HowTos/insane_mode.html) high performance gateway. Insane Mode gateway size must be at least c5 size (AWS, AWSGov, AWS China, AWS Top Secret and AWS Secret) or Standard_D3_v2 (Azure and AzureGov); for GCP only four size are supported: "n1-highcpu-4", "n1-highcpu-8", "n1-highcpu-16" and "n1-highcpu-32". If enabled, you must specify a valid /26 CIDR segment of the VPC to create a new subnet for AWS, Azure, AzureGov, AWSGov, AWS Top Secret and AWS Secret. Only available for AWS, GCP/OCI, Azure, AzureGov, AzureChina, AWSGov, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "insane_mode")

    @insane_mode.setter
    def insane_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insane_mode", value)

    @property
    @pulumi.getter(name="insaneModeAz")
    def insane_mode_az(self) -> Optional[pulumi.Input[str]]:
        """
        AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if `insane_mode` is enabled. Example: AWS: "us-west-1a".
        """
        return pulumi.get(self, "insane_mode_az")

    @insane_mode_az.setter
    def insane_mode_az(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insane_mode_az", value)

    @property
    @pulumi.getter(name="lanPrivateSubnet")
    def lan_private_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        LAN Private Subnet. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        """
        return pulumi.get(self, "lan_private_subnet")

    @lan_private_subnet.setter
    def lan_private_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_private_subnet", value)

    @property
    @pulumi.getter(name="lanVpcId")
    def lan_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        LAN VPC ID. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        """
        return pulumi.get(self, "lan_vpc_id")

    @lan_vpc_id.setter
    def lan_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_vpc_id", value)

    @property
    @pulumi.getter(name="learnedCidrsApprovalMode")
    def learned_cidrs_approval_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Learned CIDRs approval mode. Either "gateway" (approval on a per gateway basis) or "connection" (approval on a per connection basis). Default value: "gateway". Available as of provider version R2.18+.
        """
        return pulumi.get(self, "learned_cidrs_approval_mode")

    @learned_cidrs_approval_mode.setter
    def learned_cidrs_approval_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learned_cidrs_approval_mode", value)

    @property
    @pulumi.getter(name="localAsNumber")
    def local_as_number(self) -> Optional[pulumi.Input[str]]:
        """
        Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        """
        return pulumi.get(self, "local_as_number")

    @local_as_number.setter
    def local_as_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_number", value)

    @property
    @pulumi.getter(name="monitorExcludeLists")
    def monitor_exclude_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true. Available in provider version R2.18+.
        """
        return pulumi.get(self, "monitor_exclude_lists")

    @monitor_exclude_lists.setter
    def monitor_exclude_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitor_exclude_lists", value)

    @property
    @pulumi.getter(name="oobAvailabilityZone")
    def oob_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".
        """
        return pulumi.get(self, "oob_availability_zone")

    @oob_availability_zone.setter
    def oob_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oob_availability_zone", value)

    @property
    @pulumi.getter(name="oobManagementSubnet")
    def oob_management_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".
        """
        return pulumi.get(self, "oob_management_subnet")

    @oob_management_subnet.setter
    def oob_management_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oob_management_subnet", value)

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        """
        return pulumi.get(self, "prepend_as_paths")

    @prepend_as_paths.setter
    def prepend_as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prepend_as_paths", value)

    @property
    @pulumi.getter(name="privateModeLbVpcId")
    def private_mode_lb_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "private_mode_lb_vpc_id")

    @private_mode_lb_vpc_id.setter
    def private_mode_lb_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_mode_lb_vpc_id", value)

    @property
    @pulumi.getter(name="privateModeSubnetZone")
    def private_mode_subnet_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "private_mode_subnet_zone")

    @private_mode_subnet_zone.setter
    def private_mode_subnet_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_mode_subnet_zone", value)

    @property
    @pulumi.getter(name="rxQueueSize")
    def rx_queue_size(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway ethernet interface RX queue size. Once set, can't be deleted or disabled. Available for AWS as of provider version R2.22+.
        """
        return pulumi.get(self, "rx_queue_size")

    @rx_queue_size.setter
    def rx_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rx_queue_size", value)

    @property
    @pulumi.getter(name="singleAzHa")
    def single_az_ha(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true if this [feature](https://docs.aviatrix.com/Solutions/gateway_ha.html#single-az-gateway) is desired. Valid values: true, false.
        """
        return pulumi.get(self, "single_az_ha")

    @single_az_ha.setter
    def single_az_ha(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "single_az_ha", value)

    @property
    @pulumi.getter(name="singleIpSnat")
    def single_ip_snat(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable "single_ip" mode Source NAT for this container. Valid values: true, false. **NOTE: Please see notes here in regards to changes to this argument in R2.10.**
        """
        return pulumi.get(self, "single_ip_snat")

    @single_ip_snat.setter
    def single_ip_snat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "single_ip_snat", value)

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> Optional[pulumi.Input[str]]:
        """
        The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "software_version")

    @software_version.setter
    def software_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_version", value)

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[pulumi.Input[str]]:
        """
        Price for spot instance. NOT supported for production deployment.
        """
        return pulumi.get(self, "spot_price")

    @spot_price.setter
    def spot_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_price", value)

    @property
    @pulumi.getter(name="tagLists")
    def tag_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina. Example: ["key1:value1","key2:value2"].
        """
        return pulumi.get(self, "tag_lists")

    @tag_lists.setter
    def tag_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_lists", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tunnelDetectionTime")
    def tunnel_detection_time(self) -> Optional[pulumi.Input[int]]:
        """
        The IPSec tunnel down detection time for the transit gateway.
        """
        return pulumi.get(self, "tunnel_detection_time")

    @tunnel_detection_time.setter
    def tunnel_detection_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_detection_time", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'. Available in provider version R2.17+.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _AviatrixTransitGatewayState:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 allocate_new_eip: Optional[pulumi.Input[bool]] = None,
                 approved_learned_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
                 bgp_ecmp: Optional[pulumi.Input[bool]] = None,
                 bgp_hold_time: Optional[pulumi.Input[int]] = None,
                 bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayBgpLanInterfaceArgs']]]] = None,
                 bgp_lan_interfaces_count: Optional[pulumi.Input[int]] = None,
                 bgp_lan_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_manual_spoke_advertise_cidrs: Optional[pulumi.Input[str]] = None,
                 bgp_polling_time: Optional[pulumi.Input[str]] = None,
                 cloud_instance_id: Optional[pulumi.Input[str]] = None,
                 cloud_type: Optional[pulumi.Input[int]] = None,
                 connected_transit: Optional[pulumi.Input[bool]] = None,
                 customer_managed_keys: Optional[pulumi.Input[str]] = None,
                 customized_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
                 customized_transit_vpc_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eip: Optional[pulumi.Input[str]] = None,
                 enable_active_standby: Optional[pulumi.Input[bool]] = None,
                 enable_active_standby_preemptive: Optional[pulumi.Input[bool]] = None,
                 enable_advertise_transit_cidr: Optional[pulumi.Input[bool]] = None,
                 enable_bgp_over_lan: Optional[pulumi.Input[bool]] = None,
                 enable_egress_transit_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_encrypt_volume: Optional[pulumi.Input[bool]] = None,
                 enable_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_gateway_load_balancer: Optional[pulumi.Input[bool]] = None,
                 enable_hybrid_connection: Optional[pulumi.Input[bool]] = None,
                 enable_jumbo_frame: Optional[pulumi.Input[bool]] = None,
                 enable_learned_cidrs_approval: Optional[pulumi.Input[bool]] = None,
                 enable_monitor_gateway_subnets: Optional[pulumi.Input[bool]] = None,
                 enable_multi_tier_transit: Optional[pulumi.Input[bool]] = None,
                 enable_preserve_as_path: Optional[pulumi.Input[bool]] = None,
                 enable_private_oob: Optional[pulumi.Input[bool]] = None,
                 enable_s2c_rx_balancing: Optional[pulumi.Input[bool]] = None,
                 enable_segmentation: Optional[pulumi.Input[bool]] = None,
                 enable_spot_instance: Optional[pulumi.Input[bool]] = None,
                 enable_transit_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_transit_summarize_cidr_to_tgw: Optional[pulumi.Input[bool]] = None,
                 enable_vpc_dns_server: Optional[pulumi.Input[bool]] = None,
                 excluded_advertised_spoke_routes: Optional[pulumi.Input[str]] = None,
                 fault_domain: Optional[pulumi.Input[str]] = None,
                 filtered_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
                 gw_name: Optional[pulumi.Input[str]] = None,
                 gw_size: Optional[pulumi.Input[str]] = None,
                 ha_availability_domain: Optional[pulumi.Input[str]] = None,
                 ha_azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
                 ha_bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]] = None,
                 ha_bgp_lan_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ha_cloud_instance_id: Optional[pulumi.Input[str]] = None,
                 ha_eip: Optional[pulumi.Input[str]] = None,
                 ha_fault_domain: Optional[pulumi.Input[str]] = None,
                 ha_gw_name: Optional[pulumi.Input[str]] = None,
                 ha_gw_size: Optional[pulumi.Input[str]] = None,
                 ha_image_version: Optional[pulumi.Input[str]] = None,
                 ha_insane_mode_az: Optional[pulumi.Input[str]] = None,
                 ha_lan_interface_cidr: Optional[pulumi.Input[str]] = None,
                 ha_oob_availability_zone: Optional[pulumi.Input[str]] = None,
                 ha_oob_management_subnet: Optional[pulumi.Input[str]] = None,
                 ha_private_ip: Optional[pulumi.Input[str]] = None,
                 ha_private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
                 ha_public_ip: Optional[pulumi.Input[str]] = None,
                 ha_security_group_id: Optional[pulumi.Input[str]] = None,
                 ha_software_version: Optional[pulumi.Input[str]] = None,
                 ha_subnet: Optional[pulumi.Input[str]] = None,
                 ha_zone: Optional[pulumi.Input[str]] = None,
                 image_version: Optional[pulumi.Input[str]] = None,
                 insane_mode: Optional[pulumi.Input[bool]] = None,
                 insane_mode_az: Optional[pulumi.Input[str]] = None,
                 lan_interface_cidr: Optional[pulumi.Input[str]] = None,
                 lan_private_subnet: Optional[pulumi.Input[str]] = None,
                 lan_vpc_id: Optional[pulumi.Input[str]] = None,
                 learned_cidrs_approval_mode: Optional[pulumi.Input[str]] = None,
                 local_as_number: Optional[pulumi.Input[str]] = None,
                 monitor_exclude_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_availability_zone: Optional[pulumi.Input[str]] = None,
                 oob_management_subnet: Optional[pulumi.Input[str]] = None,
                 prepend_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 private_mode_lb_vpc_id: Optional[pulumi.Input[str]] = None,
                 private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 rx_queue_size: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 single_az_ha: Optional[pulumi.Input[bool]] = None,
                 single_ip_snat: Optional[pulumi.Input[bool]] = None,
                 software_version: Optional[pulumi.Input[str]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tunnel_detection_time: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_reg: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AviatrixTransitGateway resources.
        :param pulumi.Input[str] account_name: This parameter represents the name of a Cloud-Account in Aviatrix controller.
        :param pulumi.Input[bool] allocate_new_eip: When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] approved_learned_cidrs: A set of approved learned CIDRs. Only valid when `enable_learned_cidrs_approval` is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.
        :param pulumi.Input[str] availability_domain: Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] azure_eip_name_resource_group: Name of public IP Address resource and its resource group in Azure to be assigned to the Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `allocate_new_eip` is false and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        :param pulumi.Input[bool] bgp_ecmp: Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.
        :param pulumi.Input[int] bgp_hold_time: BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.
        :param pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayBgpLanInterfaceArgs']]] bgp_lan_interfaces: Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit. Each interface has the following attributes:
        :param pulumi.Input[int] bgp_lan_interfaces_count: Number of interfaces that will be created for BGP over LAN enabled Azure transit. Valid value: 1~5 for FireNet case, 1~7 for Non-FireNet case. Default value: 1. Available as of provider version R2.22+.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bgp_lan_ip_lists: List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.
        :param pulumi.Input[str] bgp_manual_spoke_advertise_cidrs: Intended CIDR list to be advertised to external BGP router. Example: "10.2.0.0/16,10.4.0.0/16". Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        :param pulumi.Input[str] bgp_polling_time: BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".
        :param pulumi.Input[str] cloud_instance_id: Cloud instance ID of the transit gateway.
        :param pulumi.Input[int] cloud_type: Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.
        :param pulumi.Input[bool] connected_transit: Specify Connected Transit status. If enabled, it allows spokes to run traffics to other spokes via transit gateway. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] customer_managed_keys: Customer managed key ID.
        :param pulumi.Input[str] customized_spoke_vpc_routes: A list of comma-separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this transit gateway. Example: "10.0.0.0/16,10.2.0.0/16".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] customized_transit_vpc_routes: A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. To be effective, `enable_advertise_transit_cidr` or firewall management access for a Transit FireNet gateway must be enabled. Example: ["10.0.0.0/16", "10.2.0.0/16"].
        :param pulumi.Input[str] eip: Required when `allocate_new_eip` is false. It uses the specified EIP for this gateway. Available in Controller version 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        :param pulumi.Input[bool] enable_active_standby: Enables [Active-Standby Mode](https://docs.aviatrix.com/HowTos/transit_advanced.html#active-standby). Available only with HA enabled. Valid values: true, false. Default value: false. Available in provider version R2.17.1+.
        :param pulumi.Input[bool] enable_active_standby_preemptive: Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_advertise_transit_cidr: Switch to enable/disable advertise transit VPC network CIDR for a VGW connection. Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        :param pulumi.Input[bool] enable_bgp_over_lan: Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Must be enabled to create a BGP over LAN `AviatrixTransitExternalDeviceConn` resource with this Transit Gateway. Only valid for GCP (4), Azure (8), AzureGov (32) or AzureChina (2048). Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        :param pulumi.Input[bool] enable_egress_transit_firenet: Enable [Egress Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_workflow.html#b-enable-transit-firenet-on-aviatrix-egress-transit-gateway). Valid values: true, false. Default value: false. Available in provider version R2.16.3+.
        :param pulumi.Input[bool] enable_encrypt_volume: Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_firenet: Set to true to use gateway for legacy [AWS TGW-based FireNet](https://docs.aviatrix.com/HowTos/firewall_network_faq.html) connection. Valid values: true, false. Default value: false. **NOTE: If previously using an older provider version R2.5 where attribute name was `enable_firenet_interfaces`, please see notes here.**
        :param pulumi.Input[bool] enable_gateway_load_balancer: Enable FireNet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet` are set to true and `cloud_type` = 1 (AWS). Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        :param pulumi.Input[bool] enable_hybrid_connection: Sign of readiness for AWS TGW connection. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Example: false.
        :param pulumi.Input[bool] enable_jumbo_frame: Enable jumbo frames for this transit gateway. Default value is true.
        :param pulumi.Input[bool] enable_learned_cidrs_approval: Switch to enable/disable encrypted transit approval for transit gateway. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_monitor_gateway_subnets: If set to true, the [Monitor Gateway Subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet) feature is enabled. Default value is false. Available in provider version R2.18+.
        :param pulumi.Input[bool] enable_multi_tier_transit: Enable Multi-tier Transit mode on transit gateway. When enabled, transit gateway will propagate routes it receives from its transit peering peer to other transit peering peers. `local_as_number` is required. Default value: false. Available as of provider version R2.19+.
        :param pulumi.Input[bool] enable_preserve_as_path: Enable preserve as_path when advertising manual summary cidrs on transit gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+
               },
        :param pulumi.Input[bool] enable_private_oob: Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_s2c_rx_balancing: Enable S2C receive packet CPU re-balancing on transit gateway. Valid values: true, false. Default value: false. Available in provider version R2.21.2+.
        :param pulumi.Input[bool] enable_segmentation: Enable transit gateway for segmentation. Valid values: true, false. Default: false.
        :param pulumi.Input[bool] enable_spot_instance: Enable spot instance. NOT supported for production deployment.
        :param pulumi.Input[bool] enable_transit_firenet: Set to true to use gateway for [Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_faq.html) connection. Valid values: true, false. Default value: false. Available in provider version R2.12+.
        :param pulumi.Input[bool] enable_transit_summarize_cidr_to_tgw: Enable summarize CIDR to TGW. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_vpc_dns_server: Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] excluded_advertised_spoke_routes: A list of comma-separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'. Example: "10.4.0.0/16,10.5.0.0/16".
        :param pulumi.Input[str] fault_domain: Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] filtered_spoke_vpc_routes: A list of comma-separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all spoke gateways attached to this transit gateway. Example: "10.2.0.0/16,10.3.0.0/16".
        :param pulumi.Input[str] gw_name: Name of the gateway which is going to be created.
        :param pulumi.Input[str] gw_size: Size of the gateway instance. Example: AWS: "t2.large", Azure/AzureGov: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1", AWSGov: "t2.large", AWSChina: "t2.large", AzureChina: "Standard_A0".
        :param pulumi.Input[str] ha_availability_domain: HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] ha_azure_eip_name_resource_group: Name of public IP Address resource and its resource group in Azure to be assigned to the HA Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `ha_eip` is set and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        :param pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]] ha_bgp_lan_interfaces: Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit HA. Each interface has the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ha_bgp_lan_ip_lists: List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.
        :param pulumi.Input[str] ha_cloud_instance_id: Cloud instance ID of the HA transit gateway.
        :param pulumi.Input[str] ha_eip: Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        :param pulumi.Input[str] ha_fault_domain: HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] ha_gw_name: Aviatrix transit gateway unique name of HA transit gateway.
        :param pulumi.Input[str] ha_gw_size: HA Gateway Size. Mandatory if enabling HA. Example: "t2.micro".
        :param pulumi.Input[str] ha_image_version: The image version of the HA gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `ha_software_version`. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        :param pulumi.Input[str] ha_insane_mode_az: AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret if `insane_mode` is enabled and `ha_subnet` is set. Example: AWS: "us-west-1a".
        :param pulumi.Input[str] ha_lan_interface_cidr: LAN interface CIDR of the HA transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.18+.
        :param pulumi.Input[str] ha_oob_availability_zone: HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".
        :param pulumi.Input[str] ha_oob_management_subnet: HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".
        :param pulumi.Input[str] ha_private_ip: Private IP address of the HA transit gateway created.
        :param pulumi.Input[str] ha_private_mode_subnet_zone: Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov with HA. Available in Provider version R2.23+.
        :param pulumi.Input[str] ha_public_ip: Public IP address of the HA Transit Gateway.
        :param pulumi.Input[str] ha_security_group_id: HA security group used for the transit gateway.
        :param pulumi.Input[str] ha_software_version: The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        :param pulumi.Input[str] ha_subnet: HA Subnet CIDR. Required only if enabling HA for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24".
        :param pulumi.Input[str] ha_zone: HA Zone. Required if enabling HA for GCP gateway. Optional if enabling HA for Azure gateway. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.
        :param pulumi.Input[str] image_version: The image version of the gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `software_version`. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        :param pulumi.Input[bool] insane_mode: Specify true for [Insane Mode](https://docs.aviatrix.com/HowTos/insane_mode.html) high performance gateway. Insane Mode gateway size must be at least c5 size (AWS, AWSGov, AWS China, AWS Top Secret and AWS Secret) or Standard_D3_v2 (Azure and AzureGov); for GCP only four size are supported: "n1-highcpu-4", "n1-highcpu-8", "n1-highcpu-16" and "n1-highcpu-32". If enabled, you must specify a valid /26 CIDR segment of the VPC to create a new subnet for AWS, Azure, AzureGov, AWSGov, AWS Top Secret and AWS Secret. Only available for AWS, GCP/OCI, Azure, AzureGov, AzureChina, AWSGov, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] insane_mode_az: AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if `insane_mode` is enabled. Example: AWS: "us-west-1a".
        :param pulumi.Input[str] lan_interface_cidr: LAN interface CIDR of the transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.17.1+.
        :param pulumi.Input[str] lan_private_subnet: LAN Private Subnet. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        :param pulumi.Input[str] lan_vpc_id: LAN VPC ID. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        :param pulumi.Input[str] learned_cidrs_approval_mode: Learned CIDRs approval mode. Either "gateway" (approval on a per gateway basis) or "connection" (approval on a per connection basis). Default value: "gateway". Available as of provider version R2.18+.
        :param pulumi.Input[str] local_as_number: Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitor_exclude_lists: Set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true. Available in provider version R2.18+.
        :param pulumi.Input[str] oob_availability_zone: OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".
        :param pulumi.Input[str] oob_management_subnet: OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prepend_as_paths: List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        :param pulumi.Input[str] private_ip: Private IP address of the transit gateway created.
        :param pulumi.Input[str] private_mode_lb_vpc_id: VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in Provider version R2.23+.
        :param pulumi.Input[str] private_mode_subnet_zone: Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov. Available in Provider version R2.23+.
        :param pulumi.Input[str] public_ip: Public IP address of the Transit Gateway created.
        :param pulumi.Input[str] rx_queue_size: Gateway ethernet interface RX queue size. Once set, can't be deleted or disabled. Available for AWS as of provider version R2.22+.
        :param pulumi.Input[str] security_group_id: Security group used for the transit gateway.
        :param pulumi.Input[bool] single_az_ha: Set to true if this [feature](https://docs.aviatrix.com/Solutions/gateway_ha.html#single-az-gateway) is desired. Valid values: true, false.
        :param pulumi.Input[bool] single_ip_snat: Enable "single_ip" mode Source NAT for this container. Valid values: true, false. **NOTE: Please see notes here in regards to changes to this argument in R2.10.**
        :param pulumi.Input[str] software_version: The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        :param pulumi.Input[str] spot_price: Price for spot instance. NOT supported for production deployment.
        :param pulumi.Input[str] subnet: A VPC Network address range selected from one of the available network ranges.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_lists: (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina. Example: ["key1:value1","key2:value2"].
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.
        :param pulumi.Input[int] tunnel_detection_time: The IPSec tunnel down detection time for the transit gateway.
        :param pulumi.Input[str] vpc_id: VPC-ID/VNet-Name of cloud provider.
        :param pulumi.Input[str] vpc_reg: Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".
        :param pulumi.Input[str] zone: Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'. Available in provider version R2.17+.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if allocate_new_eip is not None:
            pulumi.set(__self__, "allocate_new_eip", allocate_new_eip)
        if approved_learned_cidrs is not None:
            pulumi.set(__self__, "approved_learned_cidrs", approved_learned_cidrs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if azure_eip_name_resource_group is not None:
            pulumi.set(__self__, "azure_eip_name_resource_group", azure_eip_name_resource_group)
        if bgp_ecmp is not None:
            pulumi.set(__self__, "bgp_ecmp", bgp_ecmp)
        if bgp_hold_time is not None:
            pulumi.set(__self__, "bgp_hold_time", bgp_hold_time)
        if bgp_lan_interfaces is not None:
            pulumi.set(__self__, "bgp_lan_interfaces", bgp_lan_interfaces)
        if bgp_lan_interfaces_count is not None:
            pulumi.set(__self__, "bgp_lan_interfaces_count", bgp_lan_interfaces_count)
        if bgp_lan_ip_lists is not None:
            pulumi.set(__self__, "bgp_lan_ip_lists", bgp_lan_ip_lists)
        if bgp_manual_spoke_advertise_cidrs is not None:
            pulumi.set(__self__, "bgp_manual_spoke_advertise_cidrs", bgp_manual_spoke_advertise_cidrs)
        if bgp_polling_time is not None:
            pulumi.set(__self__, "bgp_polling_time", bgp_polling_time)
        if cloud_instance_id is not None:
            pulumi.set(__self__, "cloud_instance_id", cloud_instance_id)
        if cloud_type is not None:
            pulumi.set(__self__, "cloud_type", cloud_type)
        if connected_transit is not None:
            pulumi.set(__self__, "connected_transit", connected_transit)
        if customer_managed_keys is not None:
            pulumi.set(__self__, "customer_managed_keys", customer_managed_keys)
        if customized_spoke_vpc_routes is not None:
            pulumi.set(__self__, "customized_spoke_vpc_routes", customized_spoke_vpc_routes)
        if customized_transit_vpc_routes is not None:
            pulumi.set(__self__, "customized_transit_vpc_routes", customized_transit_vpc_routes)
        if eip is not None:
            pulumi.set(__self__, "eip", eip)
        if enable_active_standby is not None:
            pulumi.set(__self__, "enable_active_standby", enable_active_standby)
        if enable_active_standby_preemptive is not None:
            pulumi.set(__self__, "enable_active_standby_preemptive", enable_active_standby_preemptive)
        if enable_advertise_transit_cidr is not None:
            pulumi.set(__self__, "enable_advertise_transit_cidr", enable_advertise_transit_cidr)
        if enable_bgp_over_lan is not None:
            pulumi.set(__self__, "enable_bgp_over_lan", enable_bgp_over_lan)
        if enable_egress_transit_firenet is not None:
            pulumi.set(__self__, "enable_egress_transit_firenet", enable_egress_transit_firenet)
        if enable_encrypt_volume is not None:
            pulumi.set(__self__, "enable_encrypt_volume", enable_encrypt_volume)
        if enable_firenet is not None:
            pulumi.set(__self__, "enable_firenet", enable_firenet)
        if enable_gateway_load_balancer is not None:
            pulumi.set(__self__, "enable_gateway_load_balancer", enable_gateway_load_balancer)
        if enable_hybrid_connection is not None:
            pulumi.set(__self__, "enable_hybrid_connection", enable_hybrid_connection)
        if enable_jumbo_frame is not None:
            pulumi.set(__self__, "enable_jumbo_frame", enable_jumbo_frame)
        if enable_learned_cidrs_approval is not None:
            pulumi.set(__self__, "enable_learned_cidrs_approval", enable_learned_cidrs_approval)
        if enable_monitor_gateway_subnets is not None:
            pulumi.set(__self__, "enable_monitor_gateway_subnets", enable_monitor_gateway_subnets)
        if enable_multi_tier_transit is not None:
            pulumi.set(__self__, "enable_multi_tier_transit", enable_multi_tier_transit)
        if enable_preserve_as_path is not None:
            pulumi.set(__self__, "enable_preserve_as_path", enable_preserve_as_path)
        if enable_private_oob is not None:
            pulumi.set(__self__, "enable_private_oob", enable_private_oob)
        if enable_s2c_rx_balancing is not None:
            pulumi.set(__self__, "enable_s2c_rx_balancing", enable_s2c_rx_balancing)
        if enable_segmentation is not None:
            pulumi.set(__self__, "enable_segmentation", enable_segmentation)
        if enable_spot_instance is not None:
            pulumi.set(__self__, "enable_spot_instance", enable_spot_instance)
        if enable_transit_firenet is not None:
            pulumi.set(__self__, "enable_transit_firenet", enable_transit_firenet)
        if enable_transit_summarize_cidr_to_tgw is not None:
            pulumi.set(__self__, "enable_transit_summarize_cidr_to_tgw", enable_transit_summarize_cidr_to_tgw)
        if enable_vpc_dns_server is not None:
            pulumi.set(__self__, "enable_vpc_dns_server", enable_vpc_dns_server)
        if excluded_advertised_spoke_routes is not None:
            pulumi.set(__self__, "excluded_advertised_spoke_routes", excluded_advertised_spoke_routes)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if filtered_spoke_vpc_routes is not None:
            pulumi.set(__self__, "filtered_spoke_vpc_routes", filtered_spoke_vpc_routes)
        if gw_name is not None:
            pulumi.set(__self__, "gw_name", gw_name)
        if gw_size is not None:
            pulumi.set(__self__, "gw_size", gw_size)
        if ha_availability_domain is not None:
            pulumi.set(__self__, "ha_availability_domain", ha_availability_domain)
        if ha_azure_eip_name_resource_group is not None:
            pulumi.set(__self__, "ha_azure_eip_name_resource_group", ha_azure_eip_name_resource_group)
        if ha_bgp_lan_interfaces is not None:
            pulumi.set(__self__, "ha_bgp_lan_interfaces", ha_bgp_lan_interfaces)
        if ha_bgp_lan_ip_lists is not None:
            pulumi.set(__self__, "ha_bgp_lan_ip_lists", ha_bgp_lan_ip_lists)
        if ha_cloud_instance_id is not None:
            pulumi.set(__self__, "ha_cloud_instance_id", ha_cloud_instance_id)
        if ha_eip is not None:
            pulumi.set(__self__, "ha_eip", ha_eip)
        if ha_fault_domain is not None:
            pulumi.set(__self__, "ha_fault_domain", ha_fault_domain)
        if ha_gw_name is not None:
            pulumi.set(__self__, "ha_gw_name", ha_gw_name)
        if ha_gw_size is not None:
            pulumi.set(__self__, "ha_gw_size", ha_gw_size)
        if ha_image_version is not None:
            pulumi.set(__self__, "ha_image_version", ha_image_version)
        if ha_insane_mode_az is not None:
            pulumi.set(__self__, "ha_insane_mode_az", ha_insane_mode_az)
        if ha_lan_interface_cidr is not None:
            pulumi.set(__self__, "ha_lan_interface_cidr", ha_lan_interface_cidr)
        if ha_oob_availability_zone is not None:
            pulumi.set(__self__, "ha_oob_availability_zone", ha_oob_availability_zone)
        if ha_oob_management_subnet is not None:
            pulumi.set(__self__, "ha_oob_management_subnet", ha_oob_management_subnet)
        if ha_private_ip is not None:
            pulumi.set(__self__, "ha_private_ip", ha_private_ip)
        if ha_private_mode_subnet_zone is not None:
            pulumi.set(__self__, "ha_private_mode_subnet_zone", ha_private_mode_subnet_zone)
        if ha_public_ip is not None:
            pulumi.set(__self__, "ha_public_ip", ha_public_ip)
        if ha_security_group_id is not None:
            pulumi.set(__self__, "ha_security_group_id", ha_security_group_id)
        if ha_software_version is not None:
            pulumi.set(__self__, "ha_software_version", ha_software_version)
        if ha_subnet is not None:
            pulumi.set(__self__, "ha_subnet", ha_subnet)
        if ha_zone is not None:
            pulumi.set(__self__, "ha_zone", ha_zone)
        if image_version is not None:
            pulumi.set(__self__, "image_version", image_version)
        if insane_mode is not None:
            pulumi.set(__self__, "insane_mode", insane_mode)
        if insane_mode_az is not None:
            pulumi.set(__self__, "insane_mode_az", insane_mode_az)
        if lan_interface_cidr is not None:
            pulumi.set(__self__, "lan_interface_cidr", lan_interface_cidr)
        if lan_private_subnet is not None:
            pulumi.set(__self__, "lan_private_subnet", lan_private_subnet)
        if lan_vpc_id is not None:
            pulumi.set(__self__, "lan_vpc_id", lan_vpc_id)
        if learned_cidrs_approval_mode is not None:
            pulumi.set(__self__, "learned_cidrs_approval_mode", learned_cidrs_approval_mode)
        if local_as_number is not None:
            pulumi.set(__self__, "local_as_number", local_as_number)
        if monitor_exclude_lists is not None:
            pulumi.set(__self__, "monitor_exclude_lists", monitor_exclude_lists)
        if oob_availability_zone is not None:
            pulumi.set(__self__, "oob_availability_zone", oob_availability_zone)
        if oob_management_subnet is not None:
            pulumi.set(__self__, "oob_management_subnet", oob_management_subnet)
        if prepend_as_paths is not None:
            pulumi.set(__self__, "prepend_as_paths", prepend_as_paths)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_mode_lb_vpc_id is not None:
            pulumi.set(__self__, "private_mode_lb_vpc_id", private_mode_lb_vpc_id)
        if private_mode_subnet_zone is not None:
            pulumi.set(__self__, "private_mode_subnet_zone", private_mode_subnet_zone)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if rx_queue_size is not None:
            pulumi.set(__self__, "rx_queue_size", rx_queue_size)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if single_az_ha is not None:
            pulumi.set(__self__, "single_az_ha", single_az_ha)
        if single_ip_snat is not None:
            pulumi.set(__self__, "single_ip_snat", single_ip_snat)
        if software_version is not None:
            pulumi.set(__self__, "software_version", software_version)
        if spot_price is not None:
            pulumi.set(__self__, "spot_price", spot_price)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if tag_lists is not None:
            warnings.warn("""Use tags instead.""", DeprecationWarning)
            pulumi.log.warn("""tag_lists is deprecated: Use tags instead.""")
        if tag_lists is not None:
            pulumi.set(__self__, "tag_lists", tag_lists)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tunnel_detection_time is not None:
            pulumi.set(__self__, "tunnel_detection_time", tunnel_detection_time)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_reg is not None:
            pulumi.set(__self__, "vpc_reg", vpc_reg)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter represents the name of a Cloud-Account in Aviatrix controller.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="allocateNewEip")
    def allocate_new_eip(self) -> Optional[pulumi.Input[bool]]:
        """
        When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.
        """
        return pulumi.get(self, "allocate_new_eip")

    @allocate_new_eip.setter
    def allocate_new_eip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allocate_new_eip", value)

    @property
    @pulumi.getter(name="approvedLearnedCidrs")
    def approved_learned_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of approved learned CIDRs. Only valid when `enable_learned_cidrs_approval` is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.
        """
        return pulumi.get(self, "approved_learned_cidrs")

    @approved_learned_cidrs.setter
    def approved_learned_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "approved_learned_cidrs", value)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "availability_domain")

    @availability_domain.setter
    def availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_domain", value)

    @property
    @pulumi.getter(name="azureEipNameResourceGroup")
    def azure_eip_name_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of public IP Address resource and its resource group in Azure to be assigned to the Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `allocate_new_eip` is false and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        """
        return pulumi.get(self, "azure_eip_name_resource_group")

    @azure_eip_name_resource_group.setter
    def azure_eip_name_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_eip_name_resource_group", value)

    @property
    @pulumi.getter(name="bgpEcmp")
    def bgp_ecmp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.
        """
        return pulumi.get(self, "bgp_ecmp")

    @bgp_ecmp.setter
    def bgp_ecmp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bgp_ecmp", value)

    @property
    @pulumi.getter(name="bgpHoldTime")
    def bgp_hold_time(self) -> Optional[pulumi.Input[int]]:
        """
        BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.
        """
        return pulumi.get(self, "bgp_hold_time")

    @bgp_hold_time.setter
    def bgp_hold_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_hold_time", value)

    @property
    @pulumi.getter(name="bgpLanInterfaces")
    def bgp_lan_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayBgpLanInterfaceArgs']]]]:
        """
        Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit. Each interface has the following attributes:
        """
        return pulumi.get(self, "bgp_lan_interfaces")

    @bgp_lan_interfaces.setter
    def bgp_lan_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayBgpLanInterfaceArgs']]]]):
        pulumi.set(self, "bgp_lan_interfaces", value)

    @property
    @pulumi.getter(name="bgpLanInterfacesCount")
    def bgp_lan_interfaces_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of interfaces that will be created for BGP over LAN enabled Azure transit. Valid value: 1~5 for FireNet case, 1~7 for Non-FireNet case. Default value: 1. Available as of provider version R2.22+.
        """
        return pulumi.get(self, "bgp_lan_interfaces_count")

    @bgp_lan_interfaces_count.setter
    def bgp_lan_interfaces_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_lan_interfaces_count", value)

    @property
    @pulumi.getter(name="bgpLanIpLists")
    def bgp_lan_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.
        """
        return pulumi.get(self, "bgp_lan_ip_lists")

    @bgp_lan_ip_lists.setter
    def bgp_lan_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bgp_lan_ip_lists", value)

    @property
    @pulumi.getter(name="bgpManualSpokeAdvertiseCidrs")
    def bgp_manual_spoke_advertise_cidrs(self) -> Optional[pulumi.Input[str]]:
        """
        Intended CIDR list to be advertised to external BGP router. Example: "10.2.0.0/16,10.4.0.0/16". Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        """
        return pulumi.get(self, "bgp_manual_spoke_advertise_cidrs")

    @bgp_manual_spoke_advertise_cidrs.setter
    def bgp_manual_spoke_advertise_cidrs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_manual_spoke_advertise_cidrs", value)

    @property
    @pulumi.getter(name="bgpPollingTime")
    def bgp_polling_time(self) -> Optional[pulumi.Input[str]]:
        """
        BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".
        """
        return pulumi.get(self, "bgp_polling_time")

    @bgp_polling_time.setter
    def bgp_polling_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_polling_time", value)

    @property
    @pulumi.getter(name="cloudInstanceId")
    def cloud_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud instance ID of the transit gateway.
        """
        return pulumi.get(self, "cloud_instance_id")

    @cloud_instance_id.setter
    def cloud_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_instance_id", value)

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> Optional[pulumi.Input[int]]:
        """
        Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.
        """
        return pulumi.get(self, "cloud_type")

    @cloud_type.setter
    def cloud_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_type", value)

    @property
    @pulumi.getter(name="connectedTransit")
    def connected_transit(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify Connected Transit status. If enabled, it allows spokes to run traffics to other spokes via transit gateway. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "connected_transit")

    @connected_transit.setter
    def connected_transit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connected_transit", value)

    @property
    @pulumi.getter(name="customerManagedKeys")
    def customer_managed_keys(self) -> Optional[pulumi.Input[str]]:
        """
        Customer managed key ID.
        """
        return pulumi.get(self, "customer_managed_keys")

    @customer_managed_keys.setter
    def customer_managed_keys(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_managed_keys", value)

    @property
    @pulumi.getter(name="customizedSpokeVpcRoutes")
    def customized_spoke_vpc_routes(self) -> Optional[pulumi.Input[str]]:
        """
        A list of comma-separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this transit gateway. Example: "10.0.0.0/16,10.2.0.0/16".
        """
        return pulumi.get(self, "customized_spoke_vpc_routes")

    @customized_spoke_vpc_routes.setter
    def customized_spoke_vpc_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customized_spoke_vpc_routes", value)

    @property
    @pulumi.getter(name="customizedTransitVpcRoutes")
    def customized_transit_vpc_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. To be effective, `enable_advertise_transit_cidr` or firewall management access for a Transit FireNet gateway must be enabled. Example: ["10.0.0.0/16", "10.2.0.0/16"].
        """
        return pulumi.get(self, "customized_transit_vpc_routes")

    @customized_transit_vpc_routes.setter
    def customized_transit_vpc_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "customized_transit_vpc_routes", value)

    @property
    @pulumi.getter
    def eip(self) -> Optional[pulumi.Input[str]]:
        """
        Required when `allocate_new_eip` is false. It uses the specified EIP for this gateway. Available in Controller version 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        """
        return pulumi.get(self, "eip")

    @eip.setter
    def eip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip", value)

    @property
    @pulumi.getter(name="enableActiveStandby")
    def enable_active_standby(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables [Active-Standby Mode](https://docs.aviatrix.com/HowTos/transit_advanced.html#active-standby). Available only with HA enabled. Valid values: true, false. Default value: false. Available in provider version R2.17.1+.
        """
        return pulumi.get(self, "enable_active_standby")

    @enable_active_standby.setter
    def enable_active_standby(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_active_standby", value)

    @property
    @pulumi.getter(name="enableActiveStandbyPreemptive")
    def enable_active_standby_preemptive(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_active_standby_preemptive")

    @enable_active_standby_preemptive.setter
    def enable_active_standby_preemptive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_active_standby_preemptive", value)

    @property
    @pulumi.getter(name="enableAdvertiseTransitCidr")
    def enable_advertise_transit_cidr(self) -> Optional[pulumi.Input[bool]]:
        """
        Switch to enable/disable advertise transit VPC network CIDR for a VGW connection. Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        """
        return pulumi.get(self, "enable_advertise_transit_cidr")

    @enable_advertise_transit_cidr.setter
    def enable_advertise_transit_cidr(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_advertise_transit_cidr", value)

    @property
    @pulumi.getter(name="enableBgpOverLan")
    def enable_bgp_over_lan(self) -> Optional[pulumi.Input[bool]]:
        """
        Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Must be enabled to create a BGP over LAN `AviatrixTransitExternalDeviceConn` resource with this Transit Gateway. Only valid for GCP (4), Azure (8), AzureGov (32) or AzureChina (2048). Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        """
        return pulumi.get(self, "enable_bgp_over_lan")

    @enable_bgp_over_lan.setter
    def enable_bgp_over_lan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_bgp_over_lan", value)

    @property
    @pulumi.getter(name="enableEgressTransitFirenet")
    def enable_egress_transit_firenet(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable [Egress Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_workflow.html#b-enable-transit-firenet-on-aviatrix-egress-transit-gateway). Valid values: true, false. Default value: false. Available in provider version R2.16.3+.
        """
        return pulumi.get(self, "enable_egress_transit_firenet")

    @enable_egress_transit_firenet.setter
    def enable_egress_transit_firenet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_egress_transit_firenet", value)

    @property
    @pulumi.getter(name="enableEncryptVolume")
    def enable_encrypt_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_encrypt_volume")

    @enable_encrypt_volume.setter
    def enable_encrypt_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_encrypt_volume", value)

    @property
    @pulumi.getter(name="enableFirenet")
    def enable_firenet(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to use gateway for legacy [AWS TGW-based FireNet](https://docs.aviatrix.com/HowTos/firewall_network_faq.html) connection. Valid values: true, false. Default value: false. **NOTE: If previously using an older provider version R2.5 where attribute name was `enable_firenet_interfaces`, please see notes here.**
        """
        return pulumi.get(self, "enable_firenet")

    @enable_firenet.setter
    def enable_firenet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_firenet", value)

    @property
    @pulumi.getter(name="enableGatewayLoadBalancer")
    def enable_gateway_load_balancer(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable FireNet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet` are set to true and `cloud_type` = 1 (AWS). Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        """
        return pulumi.get(self, "enable_gateway_load_balancer")

    @enable_gateway_load_balancer.setter
    def enable_gateway_load_balancer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_gateway_load_balancer", value)

    @property
    @pulumi.getter(name="enableHybridConnection")
    def enable_hybrid_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Sign of readiness for AWS TGW connection. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Example: false.
        """
        return pulumi.get(self, "enable_hybrid_connection")

    @enable_hybrid_connection.setter
    def enable_hybrid_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_hybrid_connection", value)

    @property
    @pulumi.getter(name="enableJumboFrame")
    def enable_jumbo_frame(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable jumbo frames for this transit gateway. Default value is true.
        """
        return pulumi.get(self, "enable_jumbo_frame")

    @enable_jumbo_frame.setter
    def enable_jumbo_frame(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_jumbo_frame", value)

    @property
    @pulumi.getter(name="enableLearnedCidrsApproval")
    def enable_learned_cidrs_approval(self) -> Optional[pulumi.Input[bool]]:
        """
        Switch to enable/disable encrypted transit approval for transit gateway. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_learned_cidrs_approval")

    @enable_learned_cidrs_approval.setter
    def enable_learned_cidrs_approval(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_learned_cidrs_approval", value)

    @property
    @pulumi.getter(name="enableMonitorGatewaySubnets")
    def enable_monitor_gateway_subnets(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the [Monitor Gateway Subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet) feature is enabled. Default value is false. Available in provider version R2.18+.
        """
        return pulumi.get(self, "enable_monitor_gateway_subnets")

    @enable_monitor_gateway_subnets.setter
    def enable_monitor_gateway_subnets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_monitor_gateway_subnets", value)

    @property
    @pulumi.getter(name="enableMultiTierTransit")
    def enable_multi_tier_transit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Multi-tier Transit mode on transit gateway. When enabled, transit gateway will propagate routes it receives from its transit peering peer to other transit peering peers. `local_as_number` is required. Default value: false. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "enable_multi_tier_transit")

    @enable_multi_tier_transit.setter
    def enable_multi_tier_transit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_multi_tier_transit", value)

    @property
    @pulumi.getter(name="enablePreserveAsPath")
    def enable_preserve_as_path(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable preserve as_path when advertising manual summary cidrs on transit gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+
        },
        """
        return pulumi.get(self, "enable_preserve_as_path")

    @enable_preserve_as_path.setter
    def enable_preserve_as_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_preserve_as_path", value)

    @property
    @pulumi.getter(name="enablePrivateOob")
    def enable_private_oob(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_private_oob")

    @enable_private_oob.setter
    def enable_private_oob(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_private_oob", value)

    @property
    @pulumi.getter(name="enableS2cRxBalancing")
    def enable_s2c_rx_balancing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable S2C receive packet CPU re-balancing on transit gateway. Valid values: true, false. Default value: false. Available in provider version R2.21.2+.
        """
        return pulumi.get(self, "enable_s2c_rx_balancing")

    @enable_s2c_rx_balancing.setter
    def enable_s2c_rx_balancing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_s2c_rx_balancing", value)

    @property
    @pulumi.getter(name="enableSegmentation")
    def enable_segmentation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable transit gateway for segmentation. Valid values: true, false. Default: false.
        """
        return pulumi.get(self, "enable_segmentation")

    @enable_segmentation.setter
    def enable_segmentation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_segmentation", value)

    @property
    @pulumi.getter(name="enableSpotInstance")
    def enable_spot_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable spot instance. NOT supported for production deployment.
        """
        return pulumi.get(self, "enable_spot_instance")

    @enable_spot_instance.setter
    def enable_spot_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_spot_instance", value)

    @property
    @pulumi.getter(name="enableTransitFirenet")
    def enable_transit_firenet(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to use gateway for [Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_faq.html) connection. Valid values: true, false. Default value: false. Available in provider version R2.12+.
        """
        return pulumi.get(self, "enable_transit_firenet")

    @enable_transit_firenet.setter
    def enable_transit_firenet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_transit_firenet", value)

    @property
    @pulumi.getter(name="enableTransitSummarizeCidrToTgw")
    def enable_transit_summarize_cidr_to_tgw(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable summarize CIDR to TGW. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_transit_summarize_cidr_to_tgw")

    @enable_transit_summarize_cidr_to_tgw.setter
    def enable_transit_summarize_cidr_to_tgw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_transit_summarize_cidr_to_tgw", value)

    @property
    @pulumi.getter(name="enableVpcDnsServer")
    def enable_vpc_dns_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_vpc_dns_server")

    @enable_vpc_dns_server.setter
    def enable_vpc_dns_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vpc_dns_server", value)

    @property
    @pulumi.getter(name="excludedAdvertisedSpokeRoutes")
    def excluded_advertised_spoke_routes(self) -> Optional[pulumi.Input[str]]:
        """
        A list of comma-separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'. Example: "10.4.0.0/16,10.5.0.0/16".
        """
        return pulumi.get(self, "excluded_advertised_spoke_routes")

    @excluded_advertised_spoke_routes.setter
    def excluded_advertised_spoke_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excluded_advertised_spoke_routes", value)

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "fault_domain")

    @fault_domain.setter
    def fault_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_domain", value)

    @property
    @pulumi.getter(name="filteredSpokeVpcRoutes")
    def filtered_spoke_vpc_routes(self) -> Optional[pulumi.Input[str]]:
        """
        A list of comma-separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all spoke gateways attached to this transit gateway. Example: "10.2.0.0/16,10.3.0.0/16".
        """
        return pulumi.get(self, "filtered_spoke_vpc_routes")

    @filtered_spoke_vpc_routes.setter
    def filtered_spoke_vpc_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filtered_spoke_vpc_routes", value)

    @property
    @pulumi.getter(name="gwName")
    def gw_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the gateway which is going to be created.
        """
        return pulumi.get(self, "gw_name")

    @gw_name.setter
    def gw_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gw_name", value)

    @property
    @pulumi.getter(name="gwSize")
    def gw_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size of the gateway instance. Example: AWS: "t2.large", Azure/AzureGov: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1", AWSGov: "t2.large", AWSChina: "t2.large", AzureChina: "Standard_A0".
        """
        return pulumi.get(self, "gw_size")

    @gw_size.setter
    def gw_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gw_size", value)

    @property
    @pulumi.getter(name="haAvailabilityDomain")
    def ha_availability_domain(self) -> Optional[pulumi.Input[str]]:
        """
        HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "ha_availability_domain")

    @ha_availability_domain.setter
    def ha_availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_availability_domain", value)

    @property
    @pulumi.getter(name="haAzureEipNameResourceGroup")
    def ha_azure_eip_name_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of public IP Address resource and its resource group in Azure to be assigned to the HA Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `ha_eip` is set and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        """
        return pulumi.get(self, "ha_azure_eip_name_resource_group")

    @ha_azure_eip_name_resource_group.setter
    def ha_azure_eip_name_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_azure_eip_name_resource_group", value)

    @property
    @pulumi.getter(name="haBgpLanInterfaces")
    def ha_bgp_lan_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]]:
        """
        Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit HA. Each interface has the following attributes:
        """
        return pulumi.get(self, "ha_bgp_lan_interfaces")

    @ha_bgp_lan_interfaces.setter
    def ha_bgp_lan_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]]):
        pulumi.set(self, "ha_bgp_lan_interfaces", value)

    @property
    @pulumi.getter(name="haBgpLanIpLists")
    def ha_bgp_lan_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.
        """
        return pulumi.get(self, "ha_bgp_lan_ip_lists")

    @ha_bgp_lan_ip_lists.setter
    def ha_bgp_lan_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ha_bgp_lan_ip_lists", value)

    @property
    @pulumi.getter(name="haCloudInstanceId")
    def ha_cloud_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud instance ID of the HA transit gateway.
        """
        return pulumi.get(self, "ha_cloud_instance_id")

    @ha_cloud_instance_id.setter
    def ha_cloud_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_cloud_instance_id", value)

    @property
    @pulumi.getter(name="haEip")
    def ha_eip(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        """
        return pulumi.get(self, "ha_eip")

    @ha_eip.setter
    def ha_eip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_eip", value)

    @property
    @pulumi.getter(name="haFaultDomain")
    def ha_fault_domain(self) -> Optional[pulumi.Input[str]]:
        """
        HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "ha_fault_domain")

    @ha_fault_domain.setter
    def ha_fault_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_fault_domain", value)

    @property
    @pulumi.getter(name="haGwName")
    def ha_gw_name(self) -> Optional[pulumi.Input[str]]:
        """
        Aviatrix transit gateway unique name of HA transit gateway.
        """
        return pulumi.get(self, "ha_gw_name")

    @ha_gw_name.setter
    def ha_gw_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_gw_name", value)

    @property
    @pulumi.getter(name="haGwSize")
    def ha_gw_size(self) -> Optional[pulumi.Input[str]]:
        """
        HA Gateway Size. Mandatory if enabling HA. Example: "t2.micro".
        """
        return pulumi.get(self, "ha_gw_size")

    @ha_gw_size.setter
    def ha_gw_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_gw_size", value)

    @property
    @pulumi.getter(name="haImageVersion")
    def ha_image_version(self) -> Optional[pulumi.Input[str]]:
        """
        The image version of the HA gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `ha_software_version`. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "ha_image_version")

    @ha_image_version.setter
    def ha_image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_image_version", value)

    @property
    @pulumi.getter(name="haInsaneModeAz")
    def ha_insane_mode_az(self) -> Optional[pulumi.Input[str]]:
        """
        AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret if `insane_mode` is enabled and `ha_subnet` is set. Example: AWS: "us-west-1a".
        """
        return pulumi.get(self, "ha_insane_mode_az")

    @ha_insane_mode_az.setter
    def ha_insane_mode_az(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_insane_mode_az", value)

    @property
    @pulumi.getter(name="haLanInterfaceCidr")
    def ha_lan_interface_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        LAN interface CIDR of the HA transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.18+.
        """
        return pulumi.get(self, "ha_lan_interface_cidr")

    @ha_lan_interface_cidr.setter
    def ha_lan_interface_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_lan_interface_cidr", value)

    @property
    @pulumi.getter(name="haOobAvailabilityZone")
    def ha_oob_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".
        """
        return pulumi.get(self, "ha_oob_availability_zone")

    @ha_oob_availability_zone.setter
    def ha_oob_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_oob_availability_zone", value)

    @property
    @pulumi.getter(name="haOobManagementSubnet")
    def ha_oob_management_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".
        """
        return pulumi.get(self, "ha_oob_management_subnet")

    @ha_oob_management_subnet.setter
    def ha_oob_management_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_oob_management_subnet", value)

    @property
    @pulumi.getter(name="haPrivateIp")
    def ha_private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Private IP address of the HA transit gateway created.
        """
        return pulumi.get(self, "ha_private_ip")

    @ha_private_ip.setter
    def ha_private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_private_ip", value)

    @property
    @pulumi.getter(name="haPrivateModeSubnetZone")
    def ha_private_mode_subnet_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov with HA. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "ha_private_mode_subnet_zone")

    @ha_private_mode_subnet_zone.setter
    def ha_private_mode_subnet_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_private_mode_subnet_zone", value)

    @property
    @pulumi.getter(name="haPublicIp")
    def ha_public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP address of the HA Transit Gateway.
        """
        return pulumi.get(self, "ha_public_ip")

    @ha_public_ip.setter
    def ha_public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_public_ip", value)

    @property
    @pulumi.getter(name="haSecurityGroupId")
    def ha_security_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        HA security group used for the transit gateway.
        """
        return pulumi.get(self, "ha_security_group_id")

    @ha_security_group_id.setter
    def ha_security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_security_group_id", value)

    @property
    @pulumi.getter(name="haSoftwareVersion")
    def ha_software_version(self) -> Optional[pulumi.Input[str]]:
        """
        The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "ha_software_version")

    @ha_software_version.setter
    def ha_software_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_software_version", value)

    @property
    @pulumi.getter(name="haSubnet")
    def ha_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        HA Subnet CIDR. Required only if enabling HA for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24".
        """
        return pulumi.get(self, "ha_subnet")

    @ha_subnet.setter
    def ha_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_subnet", value)

    @property
    @pulumi.getter(name="haZone")
    def ha_zone(self) -> Optional[pulumi.Input[str]]:
        """
        HA Zone. Required if enabling HA for GCP gateway. Optional if enabling HA for Azure gateway. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.
        """
        return pulumi.get(self, "ha_zone")

    @ha_zone.setter
    def ha_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_zone", value)

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> Optional[pulumi.Input[str]]:
        """
        The image version of the gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `software_version`. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "image_version")

    @image_version.setter
    def image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_version", value)

    @property
    @pulumi.getter(name="insaneMode")
    def insane_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true for [Insane Mode](https://docs.aviatrix.com/HowTos/insane_mode.html) high performance gateway. Insane Mode gateway size must be at least c5 size (AWS, AWSGov, AWS China, AWS Top Secret and AWS Secret) or Standard_D3_v2 (Azure and AzureGov); for GCP only four size are supported: "n1-highcpu-4", "n1-highcpu-8", "n1-highcpu-16" and "n1-highcpu-32". If enabled, you must specify a valid /26 CIDR segment of the VPC to create a new subnet for AWS, Azure, AzureGov, AWSGov, AWS Top Secret and AWS Secret. Only available for AWS, GCP/OCI, Azure, AzureGov, AzureChina, AWSGov, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "insane_mode")

    @insane_mode.setter
    def insane_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insane_mode", value)

    @property
    @pulumi.getter(name="insaneModeAz")
    def insane_mode_az(self) -> Optional[pulumi.Input[str]]:
        """
        AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if `insane_mode` is enabled. Example: AWS: "us-west-1a".
        """
        return pulumi.get(self, "insane_mode_az")

    @insane_mode_az.setter
    def insane_mode_az(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insane_mode_az", value)

    @property
    @pulumi.getter(name="lanInterfaceCidr")
    def lan_interface_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        LAN interface CIDR of the transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.17.1+.
        """
        return pulumi.get(self, "lan_interface_cidr")

    @lan_interface_cidr.setter
    def lan_interface_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_interface_cidr", value)

    @property
    @pulumi.getter(name="lanPrivateSubnet")
    def lan_private_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        LAN Private Subnet. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        """
        return pulumi.get(self, "lan_private_subnet")

    @lan_private_subnet.setter
    def lan_private_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_private_subnet", value)

    @property
    @pulumi.getter(name="lanVpcId")
    def lan_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        LAN VPC ID. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        """
        return pulumi.get(self, "lan_vpc_id")

    @lan_vpc_id.setter
    def lan_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_vpc_id", value)

    @property
    @pulumi.getter(name="learnedCidrsApprovalMode")
    def learned_cidrs_approval_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Learned CIDRs approval mode. Either "gateway" (approval on a per gateway basis) or "connection" (approval on a per connection basis). Default value: "gateway". Available as of provider version R2.18+.
        """
        return pulumi.get(self, "learned_cidrs_approval_mode")

    @learned_cidrs_approval_mode.setter
    def learned_cidrs_approval_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learned_cidrs_approval_mode", value)

    @property
    @pulumi.getter(name="localAsNumber")
    def local_as_number(self) -> Optional[pulumi.Input[str]]:
        """
        Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        """
        return pulumi.get(self, "local_as_number")

    @local_as_number.setter
    def local_as_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_number", value)

    @property
    @pulumi.getter(name="monitorExcludeLists")
    def monitor_exclude_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true. Available in provider version R2.18+.
        """
        return pulumi.get(self, "monitor_exclude_lists")

    @monitor_exclude_lists.setter
    def monitor_exclude_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitor_exclude_lists", value)

    @property
    @pulumi.getter(name="oobAvailabilityZone")
    def oob_availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".
        """
        return pulumi.get(self, "oob_availability_zone")

    @oob_availability_zone.setter
    def oob_availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oob_availability_zone", value)

    @property
    @pulumi.getter(name="oobManagementSubnet")
    def oob_management_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".
        """
        return pulumi.get(self, "oob_management_subnet")

    @oob_management_subnet.setter
    def oob_management_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oob_management_subnet", value)

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        """
        return pulumi.get(self, "prepend_as_paths")

    @prepend_as_paths.setter
    def prepend_as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prepend_as_paths", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Private IP address of the transit gateway created.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="privateModeLbVpcId")
    def private_mode_lb_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "private_mode_lb_vpc_id")

    @private_mode_lb_vpc_id.setter
    def private_mode_lb_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_mode_lb_vpc_id", value)

    @property
    @pulumi.getter(name="privateModeSubnetZone")
    def private_mode_subnet_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "private_mode_subnet_zone")

    @private_mode_subnet_zone.setter
    def private_mode_subnet_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_mode_subnet_zone", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP address of the Transit Gateway created.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="rxQueueSize")
    def rx_queue_size(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway ethernet interface RX queue size. Once set, can't be deleted or disabled. Available for AWS as of provider version R2.22+.
        """
        return pulumi.get(self, "rx_queue_size")

    @rx_queue_size.setter
    def rx_queue_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rx_queue_size", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Security group used for the transit gateway.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="singleAzHa")
    def single_az_ha(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true if this [feature](https://docs.aviatrix.com/Solutions/gateway_ha.html#single-az-gateway) is desired. Valid values: true, false.
        """
        return pulumi.get(self, "single_az_ha")

    @single_az_ha.setter
    def single_az_ha(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "single_az_ha", value)

    @property
    @pulumi.getter(name="singleIpSnat")
    def single_ip_snat(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable "single_ip" mode Source NAT for this container. Valid values: true, false. **NOTE: Please see notes here in regards to changes to this argument in R2.10.**
        """
        return pulumi.get(self, "single_ip_snat")

    @single_ip_snat.setter
    def single_ip_snat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "single_ip_snat", value)

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> Optional[pulumi.Input[str]]:
        """
        The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "software_version")

    @software_version.setter
    def software_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_version", value)

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[pulumi.Input[str]]:
        """
        Price for spot instance. NOT supported for production deployment.
        """
        return pulumi.get(self, "spot_price")

    @spot_price.setter
    def spot_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_price", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        A VPC Network address range selected from one of the available network ranges.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="tagLists")
    def tag_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina. Example: ["key1:value1","key2:value2"].
        """
        return pulumi.get(self, "tag_lists")

    @tag_lists.setter
    def tag_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_lists", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tunnelDetectionTime")
    def tunnel_detection_time(self) -> Optional[pulumi.Input[int]]:
        """
        The IPSec tunnel down detection time for the transit gateway.
        """
        return pulumi.get(self, "tunnel_detection_time")

    @tunnel_detection_time.setter
    def tunnel_detection_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_detection_time", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC-ID/VNet-Name of cloud provider.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcReg")
    def vpc_reg(self) -> Optional[pulumi.Input[str]]:
        """
        Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".
        """
        return pulumi.get(self, "vpc_reg")

    @vpc_reg.setter
    def vpc_reg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_reg", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'. Available in provider version R2.17+.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class AviatrixTransitGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 allocate_new_eip: Optional[pulumi.Input[bool]] = None,
                 approved_learned_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
                 bgp_ecmp: Optional[pulumi.Input[bool]] = None,
                 bgp_hold_time: Optional[pulumi.Input[int]] = None,
                 bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayBgpLanInterfaceArgs']]]]] = None,
                 bgp_lan_interfaces_count: Optional[pulumi.Input[int]] = None,
                 bgp_manual_spoke_advertise_cidrs: Optional[pulumi.Input[str]] = None,
                 bgp_polling_time: Optional[pulumi.Input[str]] = None,
                 cloud_type: Optional[pulumi.Input[int]] = None,
                 connected_transit: Optional[pulumi.Input[bool]] = None,
                 customer_managed_keys: Optional[pulumi.Input[str]] = None,
                 customized_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
                 customized_transit_vpc_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eip: Optional[pulumi.Input[str]] = None,
                 enable_active_standby: Optional[pulumi.Input[bool]] = None,
                 enable_active_standby_preemptive: Optional[pulumi.Input[bool]] = None,
                 enable_advertise_transit_cidr: Optional[pulumi.Input[bool]] = None,
                 enable_bgp_over_lan: Optional[pulumi.Input[bool]] = None,
                 enable_egress_transit_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_encrypt_volume: Optional[pulumi.Input[bool]] = None,
                 enable_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_gateway_load_balancer: Optional[pulumi.Input[bool]] = None,
                 enable_hybrid_connection: Optional[pulumi.Input[bool]] = None,
                 enable_jumbo_frame: Optional[pulumi.Input[bool]] = None,
                 enable_learned_cidrs_approval: Optional[pulumi.Input[bool]] = None,
                 enable_monitor_gateway_subnets: Optional[pulumi.Input[bool]] = None,
                 enable_multi_tier_transit: Optional[pulumi.Input[bool]] = None,
                 enable_preserve_as_path: Optional[pulumi.Input[bool]] = None,
                 enable_private_oob: Optional[pulumi.Input[bool]] = None,
                 enable_s2c_rx_balancing: Optional[pulumi.Input[bool]] = None,
                 enable_segmentation: Optional[pulumi.Input[bool]] = None,
                 enable_spot_instance: Optional[pulumi.Input[bool]] = None,
                 enable_transit_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_transit_summarize_cidr_to_tgw: Optional[pulumi.Input[bool]] = None,
                 enable_vpc_dns_server: Optional[pulumi.Input[bool]] = None,
                 excluded_advertised_spoke_routes: Optional[pulumi.Input[str]] = None,
                 fault_domain: Optional[pulumi.Input[str]] = None,
                 filtered_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
                 gw_name: Optional[pulumi.Input[str]] = None,
                 gw_size: Optional[pulumi.Input[str]] = None,
                 ha_availability_domain: Optional[pulumi.Input[str]] = None,
                 ha_azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
                 ha_bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]]] = None,
                 ha_eip: Optional[pulumi.Input[str]] = None,
                 ha_fault_domain: Optional[pulumi.Input[str]] = None,
                 ha_gw_size: Optional[pulumi.Input[str]] = None,
                 ha_image_version: Optional[pulumi.Input[str]] = None,
                 ha_insane_mode_az: Optional[pulumi.Input[str]] = None,
                 ha_oob_availability_zone: Optional[pulumi.Input[str]] = None,
                 ha_oob_management_subnet: Optional[pulumi.Input[str]] = None,
                 ha_private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
                 ha_software_version: Optional[pulumi.Input[str]] = None,
                 ha_subnet: Optional[pulumi.Input[str]] = None,
                 ha_zone: Optional[pulumi.Input[str]] = None,
                 image_version: Optional[pulumi.Input[str]] = None,
                 insane_mode: Optional[pulumi.Input[bool]] = None,
                 insane_mode_az: Optional[pulumi.Input[str]] = None,
                 lan_private_subnet: Optional[pulumi.Input[str]] = None,
                 lan_vpc_id: Optional[pulumi.Input[str]] = None,
                 learned_cidrs_approval_mode: Optional[pulumi.Input[str]] = None,
                 local_as_number: Optional[pulumi.Input[str]] = None,
                 monitor_exclude_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_availability_zone: Optional[pulumi.Input[str]] = None,
                 oob_management_subnet: Optional[pulumi.Input[str]] = None,
                 prepend_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_mode_lb_vpc_id: Optional[pulumi.Input[str]] = None,
                 private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
                 rx_queue_size: Optional[pulumi.Input[str]] = None,
                 single_az_ha: Optional[pulumi.Input[bool]] = None,
                 single_ip_snat: Optional[pulumi.Input[bool]] = None,
                 software_version: Optional[pulumi.Input[str]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tunnel_detection_time: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_reg: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        **transit_gateway** can be imported using the `gw_name`, e.g.

        ```sh
         $ pulumi import aviatrix:index/aviatrixTransitGateway:AviatrixTransitGateway test gw_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: This parameter represents the name of a Cloud-Account in Aviatrix controller.
        :param pulumi.Input[bool] allocate_new_eip: When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] approved_learned_cidrs: A set of approved learned CIDRs. Only valid when `enable_learned_cidrs_approval` is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.
        :param pulumi.Input[str] availability_domain: Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] azure_eip_name_resource_group: Name of public IP Address resource and its resource group in Azure to be assigned to the Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `allocate_new_eip` is false and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        :param pulumi.Input[bool] bgp_ecmp: Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.
        :param pulumi.Input[int] bgp_hold_time: BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayBgpLanInterfaceArgs']]]] bgp_lan_interfaces: Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit. Each interface has the following attributes:
        :param pulumi.Input[int] bgp_lan_interfaces_count: Number of interfaces that will be created for BGP over LAN enabled Azure transit. Valid value: 1~5 for FireNet case, 1~7 for Non-FireNet case. Default value: 1. Available as of provider version R2.22+.
        :param pulumi.Input[str] bgp_manual_spoke_advertise_cidrs: Intended CIDR list to be advertised to external BGP router. Example: "10.2.0.0/16,10.4.0.0/16". Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        :param pulumi.Input[str] bgp_polling_time: BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".
        :param pulumi.Input[int] cloud_type: Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.
        :param pulumi.Input[bool] connected_transit: Specify Connected Transit status. If enabled, it allows spokes to run traffics to other spokes via transit gateway. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] customer_managed_keys: Customer managed key ID.
        :param pulumi.Input[str] customized_spoke_vpc_routes: A list of comma-separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this transit gateway. Example: "10.0.0.0/16,10.2.0.0/16".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] customized_transit_vpc_routes: A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. To be effective, `enable_advertise_transit_cidr` or firewall management access for a Transit FireNet gateway must be enabled. Example: ["10.0.0.0/16", "10.2.0.0/16"].
        :param pulumi.Input[str] eip: Required when `allocate_new_eip` is false. It uses the specified EIP for this gateway. Available in Controller version 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        :param pulumi.Input[bool] enable_active_standby: Enables [Active-Standby Mode](https://docs.aviatrix.com/HowTos/transit_advanced.html#active-standby). Available only with HA enabled. Valid values: true, false. Default value: false. Available in provider version R2.17.1+.
        :param pulumi.Input[bool] enable_active_standby_preemptive: Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_advertise_transit_cidr: Switch to enable/disable advertise transit VPC network CIDR for a VGW connection. Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        :param pulumi.Input[bool] enable_bgp_over_lan: Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Must be enabled to create a BGP over LAN `AviatrixTransitExternalDeviceConn` resource with this Transit Gateway. Only valid for GCP (4), Azure (8), AzureGov (32) or AzureChina (2048). Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        :param pulumi.Input[bool] enable_egress_transit_firenet: Enable [Egress Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_workflow.html#b-enable-transit-firenet-on-aviatrix-egress-transit-gateway). Valid values: true, false. Default value: false. Available in provider version R2.16.3+.
        :param pulumi.Input[bool] enable_encrypt_volume: Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_firenet: Set to true to use gateway for legacy [AWS TGW-based FireNet](https://docs.aviatrix.com/HowTos/firewall_network_faq.html) connection. Valid values: true, false. Default value: false. **NOTE: If previously using an older provider version R2.5 where attribute name was `enable_firenet_interfaces`, please see notes here.**
        :param pulumi.Input[bool] enable_gateway_load_balancer: Enable FireNet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet` are set to true and `cloud_type` = 1 (AWS). Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        :param pulumi.Input[bool] enable_hybrid_connection: Sign of readiness for AWS TGW connection. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Example: false.
        :param pulumi.Input[bool] enable_jumbo_frame: Enable jumbo frames for this transit gateway. Default value is true.
        :param pulumi.Input[bool] enable_learned_cidrs_approval: Switch to enable/disable encrypted transit approval for transit gateway. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_monitor_gateway_subnets: If set to true, the [Monitor Gateway Subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet) feature is enabled. Default value is false. Available in provider version R2.18+.
        :param pulumi.Input[bool] enable_multi_tier_transit: Enable Multi-tier Transit mode on transit gateway. When enabled, transit gateway will propagate routes it receives from its transit peering peer to other transit peering peers. `local_as_number` is required. Default value: false. Available as of provider version R2.19+.
        :param pulumi.Input[bool] enable_preserve_as_path: Enable preserve as_path when advertising manual summary cidrs on transit gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+
               },
        :param pulumi.Input[bool] enable_private_oob: Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_s2c_rx_balancing: Enable S2C receive packet CPU re-balancing on transit gateway. Valid values: true, false. Default value: false. Available in provider version R2.21.2+.
        :param pulumi.Input[bool] enable_segmentation: Enable transit gateway for segmentation. Valid values: true, false. Default: false.
        :param pulumi.Input[bool] enable_spot_instance: Enable spot instance. NOT supported for production deployment.
        :param pulumi.Input[bool] enable_transit_firenet: Set to true to use gateway for [Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_faq.html) connection. Valid values: true, false. Default value: false. Available in provider version R2.12+.
        :param pulumi.Input[bool] enable_transit_summarize_cidr_to_tgw: Enable summarize CIDR to TGW. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_vpc_dns_server: Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] excluded_advertised_spoke_routes: A list of comma-separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'. Example: "10.4.0.0/16,10.5.0.0/16".
        :param pulumi.Input[str] fault_domain: Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] filtered_spoke_vpc_routes: A list of comma-separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all spoke gateways attached to this transit gateway. Example: "10.2.0.0/16,10.3.0.0/16".
        :param pulumi.Input[str] gw_name: Name of the gateway which is going to be created.
        :param pulumi.Input[str] gw_size: Size of the gateway instance. Example: AWS: "t2.large", Azure/AzureGov: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1", AWSGov: "t2.large", AWSChina: "t2.large", AzureChina: "Standard_A0".
        :param pulumi.Input[str] ha_availability_domain: HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] ha_azure_eip_name_resource_group: Name of public IP Address resource and its resource group in Azure to be assigned to the HA Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `ha_eip` is set and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]] ha_bgp_lan_interfaces: Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit HA. Each interface has the following attributes:
        :param pulumi.Input[str] ha_eip: Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        :param pulumi.Input[str] ha_fault_domain: HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] ha_gw_size: HA Gateway Size. Mandatory if enabling HA. Example: "t2.micro".
        :param pulumi.Input[str] ha_image_version: The image version of the HA gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `ha_software_version`. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        :param pulumi.Input[str] ha_insane_mode_az: AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret if `insane_mode` is enabled and `ha_subnet` is set. Example: AWS: "us-west-1a".
        :param pulumi.Input[str] ha_oob_availability_zone: HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".
        :param pulumi.Input[str] ha_oob_management_subnet: HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".
        :param pulumi.Input[str] ha_private_mode_subnet_zone: Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov with HA. Available in Provider version R2.23+.
        :param pulumi.Input[str] ha_software_version: The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        :param pulumi.Input[str] ha_subnet: HA Subnet CIDR. Required only if enabling HA for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24".
        :param pulumi.Input[str] ha_zone: HA Zone. Required if enabling HA for GCP gateway. Optional if enabling HA for Azure gateway. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.
        :param pulumi.Input[str] image_version: The image version of the gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `software_version`. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        :param pulumi.Input[bool] insane_mode: Specify true for [Insane Mode](https://docs.aviatrix.com/HowTos/insane_mode.html) high performance gateway. Insane Mode gateway size must be at least c5 size (AWS, AWSGov, AWS China, AWS Top Secret and AWS Secret) or Standard_D3_v2 (Azure and AzureGov); for GCP only four size are supported: "n1-highcpu-4", "n1-highcpu-8", "n1-highcpu-16" and "n1-highcpu-32". If enabled, you must specify a valid /26 CIDR segment of the VPC to create a new subnet for AWS, Azure, AzureGov, AWSGov, AWS Top Secret and AWS Secret. Only available for AWS, GCP/OCI, Azure, AzureGov, AzureChina, AWSGov, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] insane_mode_az: AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if `insane_mode` is enabled. Example: AWS: "us-west-1a".
        :param pulumi.Input[str] lan_private_subnet: LAN Private Subnet. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        :param pulumi.Input[str] lan_vpc_id: LAN VPC ID. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        :param pulumi.Input[str] learned_cidrs_approval_mode: Learned CIDRs approval mode. Either "gateway" (approval on a per gateway basis) or "connection" (approval on a per connection basis). Default value: "gateway". Available as of provider version R2.18+.
        :param pulumi.Input[str] local_as_number: Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitor_exclude_lists: Set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true. Available in provider version R2.18+.
        :param pulumi.Input[str] oob_availability_zone: OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".
        :param pulumi.Input[str] oob_management_subnet: OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prepend_as_paths: List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        :param pulumi.Input[str] private_mode_lb_vpc_id: VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in Provider version R2.23+.
        :param pulumi.Input[str] private_mode_subnet_zone: Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov. Available in Provider version R2.23+.
        :param pulumi.Input[str] rx_queue_size: Gateway ethernet interface RX queue size. Once set, can't be deleted or disabled. Available for AWS as of provider version R2.22+.
        :param pulumi.Input[bool] single_az_ha: Set to true if this [feature](https://docs.aviatrix.com/Solutions/gateway_ha.html#single-az-gateway) is desired. Valid values: true, false.
        :param pulumi.Input[bool] single_ip_snat: Enable "single_ip" mode Source NAT for this container. Valid values: true, false. **NOTE: Please see notes here in regards to changes to this argument in R2.10.**
        :param pulumi.Input[str] software_version: The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        :param pulumi.Input[str] spot_price: Price for spot instance. NOT supported for production deployment.
        :param pulumi.Input[str] subnet: A VPC Network address range selected from one of the available network ranges.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_lists: (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina. Example: ["key1:value1","key2:value2"].
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.
        :param pulumi.Input[int] tunnel_detection_time: The IPSec tunnel down detection time for the transit gateway.
        :param pulumi.Input[str] vpc_id: VPC-ID/VNet-Name of cloud provider.
        :param pulumi.Input[str] vpc_reg: Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".
        :param pulumi.Input[str] zone: Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'. Available in provider version R2.17+.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AviatrixTransitGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        **transit_gateway** can be imported using the `gw_name`, e.g.

        ```sh
         $ pulumi import aviatrix:index/aviatrixTransitGateway:AviatrixTransitGateway test gw_name
        ```

        :param str resource_name: The name of the resource.
        :param AviatrixTransitGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AviatrixTransitGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 allocate_new_eip: Optional[pulumi.Input[bool]] = None,
                 approved_learned_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
                 bgp_ecmp: Optional[pulumi.Input[bool]] = None,
                 bgp_hold_time: Optional[pulumi.Input[int]] = None,
                 bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayBgpLanInterfaceArgs']]]]] = None,
                 bgp_lan_interfaces_count: Optional[pulumi.Input[int]] = None,
                 bgp_manual_spoke_advertise_cidrs: Optional[pulumi.Input[str]] = None,
                 bgp_polling_time: Optional[pulumi.Input[str]] = None,
                 cloud_type: Optional[pulumi.Input[int]] = None,
                 connected_transit: Optional[pulumi.Input[bool]] = None,
                 customer_managed_keys: Optional[pulumi.Input[str]] = None,
                 customized_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
                 customized_transit_vpc_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eip: Optional[pulumi.Input[str]] = None,
                 enable_active_standby: Optional[pulumi.Input[bool]] = None,
                 enable_active_standby_preemptive: Optional[pulumi.Input[bool]] = None,
                 enable_advertise_transit_cidr: Optional[pulumi.Input[bool]] = None,
                 enable_bgp_over_lan: Optional[pulumi.Input[bool]] = None,
                 enable_egress_transit_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_encrypt_volume: Optional[pulumi.Input[bool]] = None,
                 enable_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_gateway_load_balancer: Optional[pulumi.Input[bool]] = None,
                 enable_hybrid_connection: Optional[pulumi.Input[bool]] = None,
                 enable_jumbo_frame: Optional[pulumi.Input[bool]] = None,
                 enable_learned_cidrs_approval: Optional[pulumi.Input[bool]] = None,
                 enable_monitor_gateway_subnets: Optional[pulumi.Input[bool]] = None,
                 enable_multi_tier_transit: Optional[pulumi.Input[bool]] = None,
                 enable_preserve_as_path: Optional[pulumi.Input[bool]] = None,
                 enable_private_oob: Optional[pulumi.Input[bool]] = None,
                 enable_s2c_rx_balancing: Optional[pulumi.Input[bool]] = None,
                 enable_segmentation: Optional[pulumi.Input[bool]] = None,
                 enable_spot_instance: Optional[pulumi.Input[bool]] = None,
                 enable_transit_firenet: Optional[pulumi.Input[bool]] = None,
                 enable_transit_summarize_cidr_to_tgw: Optional[pulumi.Input[bool]] = None,
                 enable_vpc_dns_server: Optional[pulumi.Input[bool]] = None,
                 excluded_advertised_spoke_routes: Optional[pulumi.Input[str]] = None,
                 fault_domain: Optional[pulumi.Input[str]] = None,
                 filtered_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
                 gw_name: Optional[pulumi.Input[str]] = None,
                 gw_size: Optional[pulumi.Input[str]] = None,
                 ha_availability_domain: Optional[pulumi.Input[str]] = None,
                 ha_azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
                 ha_bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]]] = None,
                 ha_eip: Optional[pulumi.Input[str]] = None,
                 ha_fault_domain: Optional[pulumi.Input[str]] = None,
                 ha_gw_size: Optional[pulumi.Input[str]] = None,
                 ha_image_version: Optional[pulumi.Input[str]] = None,
                 ha_insane_mode_az: Optional[pulumi.Input[str]] = None,
                 ha_oob_availability_zone: Optional[pulumi.Input[str]] = None,
                 ha_oob_management_subnet: Optional[pulumi.Input[str]] = None,
                 ha_private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
                 ha_software_version: Optional[pulumi.Input[str]] = None,
                 ha_subnet: Optional[pulumi.Input[str]] = None,
                 ha_zone: Optional[pulumi.Input[str]] = None,
                 image_version: Optional[pulumi.Input[str]] = None,
                 insane_mode: Optional[pulumi.Input[bool]] = None,
                 insane_mode_az: Optional[pulumi.Input[str]] = None,
                 lan_private_subnet: Optional[pulumi.Input[str]] = None,
                 lan_vpc_id: Optional[pulumi.Input[str]] = None,
                 learned_cidrs_approval_mode: Optional[pulumi.Input[str]] = None,
                 local_as_number: Optional[pulumi.Input[str]] = None,
                 monitor_exclude_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_availability_zone: Optional[pulumi.Input[str]] = None,
                 oob_management_subnet: Optional[pulumi.Input[str]] = None,
                 prepend_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_mode_lb_vpc_id: Optional[pulumi.Input[str]] = None,
                 private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
                 rx_queue_size: Optional[pulumi.Input[str]] = None,
                 single_az_ha: Optional[pulumi.Input[bool]] = None,
                 single_ip_snat: Optional[pulumi.Input[bool]] = None,
                 software_version: Optional[pulumi.Input[str]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tunnel_detection_time: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_reg: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AviatrixTransitGatewayArgs.__new__(AviatrixTransitGatewayArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            __props__.__dict__["allocate_new_eip"] = allocate_new_eip
            __props__.__dict__["approved_learned_cidrs"] = approved_learned_cidrs
            __props__.__dict__["availability_domain"] = availability_domain
            __props__.__dict__["azure_eip_name_resource_group"] = azure_eip_name_resource_group
            __props__.__dict__["bgp_ecmp"] = bgp_ecmp
            __props__.__dict__["bgp_hold_time"] = bgp_hold_time
            __props__.__dict__["bgp_lan_interfaces"] = bgp_lan_interfaces
            __props__.__dict__["bgp_lan_interfaces_count"] = bgp_lan_interfaces_count
            __props__.__dict__["bgp_manual_spoke_advertise_cidrs"] = bgp_manual_spoke_advertise_cidrs
            __props__.__dict__["bgp_polling_time"] = bgp_polling_time
            if cloud_type is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_type'")
            __props__.__dict__["cloud_type"] = cloud_type
            __props__.__dict__["connected_transit"] = connected_transit
            __props__.__dict__["customer_managed_keys"] = None if customer_managed_keys is None else pulumi.Output.secret(customer_managed_keys)
            __props__.__dict__["customized_spoke_vpc_routes"] = customized_spoke_vpc_routes
            __props__.__dict__["customized_transit_vpc_routes"] = customized_transit_vpc_routes
            __props__.__dict__["eip"] = eip
            __props__.__dict__["enable_active_standby"] = enable_active_standby
            __props__.__dict__["enable_active_standby_preemptive"] = enable_active_standby_preemptive
            __props__.__dict__["enable_advertise_transit_cidr"] = enable_advertise_transit_cidr
            __props__.__dict__["enable_bgp_over_lan"] = enable_bgp_over_lan
            __props__.__dict__["enable_egress_transit_firenet"] = enable_egress_transit_firenet
            __props__.__dict__["enable_encrypt_volume"] = enable_encrypt_volume
            __props__.__dict__["enable_firenet"] = enable_firenet
            __props__.__dict__["enable_gateway_load_balancer"] = enable_gateway_load_balancer
            __props__.__dict__["enable_hybrid_connection"] = enable_hybrid_connection
            __props__.__dict__["enable_jumbo_frame"] = enable_jumbo_frame
            __props__.__dict__["enable_learned_cidrs_approval"] = enable_learned_cidrs_approval
            __props__.__dict__["enable_monitor_gateway_subnets"] = enable_monitor_gateway_subnets
            __props__.__dict__["enable_multi_tier_transit"] = enable_multi_tier_transit
            __props__.__dict__["enable_preserve_as_path"] = enable_preserve_as_path
            __props__.__dict__["enable_private_oob"] = enable_private_oob
            __props__.__dict__["enable_s2c_rx_balancing"] = enable_s2c_rx_balancing
            __props__.__dict__["enable_segmentation"] = enable_segmentation
            __props__.__dict__["enable_spot_instance"] = enable_spot_instance
            __props__.__dict__["enable_transit_firenet"] = enable_transit_firenet
            __props__.__dict__["enable_transit_summarize_cidr_to_tgw"] = enable_transit_summarize_cidr_to_tgw
            __props__.__dict__["enable_vpc_dns_server"] = enable_vpc_dns_server
            __props__.__dict__["excluded_advertised_spoke_routes"] = excluded_advertised_spoke_routes
            __props__.__dict__["fault_domain"] = fault_domain
            __props__.__dict__["filtered_spoke_vpc_routes"] = filtered_spoke_vpc_routes
            if gw_name is None and not opts.urn:
                raise TypeError("Missing required property 'gw_name'")
            __props__.__dict__["gw_name"] = gw_name
            if gw_size is None and not opts.urn:
                raise TypeError("Missing required property 'gw_size'")
            __props__.__dict__["gw_size"] = gw_size
            __props__.__dict__["ha_availability_domain"] = ha_availability_domain
            __props__.__dict__["ha_azure_eip_name_resource_group"] = ha_azure_eip_name_resource_group
            __props__.__dict__["ha_bgp_lan_interfaces"] = ha_bgp_lan_interfaces
            __props__.__dict__["ha_eip"] = ha_eip
            __props__.__dict__["ha_fault_domain"] = ha_fault_domain
            __props__.__dict__["ha_gw_size"] = ha_gw_size
            __props__.__dict__["ha_image_version"] = ha_image_version
            __props__.__dict__["ha_insane_mode_az"] = ha_insane_mode_az
            __props__.__dict__["ha_oob_availability_zone"] = ha_oob_availability_zone
            __props__.__dict__["ha_oob_management_subnet"] = ha_oob_management_subnet
            __props__.__dict__["ha_private_mode_subnet_zone"] = ha_private_mode_subnet_zone
            __props__.__dict__["ha_software_version"] = ha_software_version
            __props__.__dict__["ha_subnet"] = ha_subnet
            __props__.__dict__["ha_zone"] = ha_zone
            __props__.__dict__["image_version"] = image_version
            __props__.__dict__["insane_mode"] = insane_mode
            __props__.__dict__["insane_mode_az"] = insane_mode_az
            __props__.__dict__["lan_private_subnet"] = lan_private_subnet
            __props__.__dict__["lan_vpc_id"] = lan_vpc_id
            __props__.__dict__["learned_cidrs_approval_mode"] = learned_cidrs_approval_mode
            __props__.__dict__["local_as_number"] = local_as_number
            __props__.__dict__["monitor_exclude_lists"] = monitor_exclude_lists
            __props__.__dict__["oob_availability_zone"] = oob_availability_zone
            __props__.__dict__["oob_management_subnet"] = oob_management_subnet
            __props__.__dict__["prepend_as_paths"] = prepend_as_paths
            __props__.__dict__["private_mode_lb_vpc_id"] = private_mode_lb_vpc_id
            __props__.__dict__["private_mode_subnet_zone"] = private_mode_subnet_zone
            __props__.__dict__["rx_queue_size"] = rx_queue_size
            __props__.__dict__["single_az_ha"] = single_az_ha
            __props__.__dict__["single_ip_snat"] = single_ip_snat
            __props__.__dict__["software_version"] = software_version
            __props__.__dict__["spot_price"] = spot_price
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            if tag_lists is not None and not opts.urn:
                warnings.warn("""Use tags instead.""", DeprecationWarning)
                pulumi.log.warn("""tag_lists is deprecated: Use tags instead.""")
            __props__.__dict__["tag_lists"] = tag_lists
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tunnel_detection_time"] = tunnel_detection_time
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            if vpc_reg is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_reg'")
            __props__.__dict__["vpc_reg"] = vpc_reg
            __props__.__dict__["zone"] = zone
            __props__.__dict__["bgp_lan_ip_lists"] = None
            __props__.__dict__["cloud_instance_id"] = None
            __props__.__dict__["ha_bgp_lan_ip_lists"] = None
            __props__.__dict__["ha_cloud_instance_id"] = None
            __props__.__dict__["ha_gw_name"] = None
            __props__.__dict__["ha_lan_interface_cidr"] = None
            __props__.__dict__["ha_private_ip"] = None
            __props__.__dict__["ha_public_ip"] = None
            __props__.__dict__["ha_security_group_id"] = None
            __props__.__dict__["lan_interface_cidr"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["security_group_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["customerManagedKeys"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AviatrixTransitGateway, __self__).__init__(
            'aviatrix:index/aviatrixTransitGateway:AviatrixTransitGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_name: Optional[pulumi.Input[str]] = None,
            allocate_new_eip: Optional[pulumi.Input[bool]] = None,
            approved_learned_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            availability_domain: Optional[pulumi.Input[str]] = None,
            azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
            bgp_ecmp: Optional[pulumi.Input[bool]] = None,
            bgp_hold_time: Optional[pulumi.Input[int]] = None,
            bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayBgpLanInterfaceArgs']]]]] = None,
            bgp_lan_interfaces_count: Optional[pulumi.Input[int]] = None,
            bgp_lan_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            bgp_manual_spoke_advertise_cidrs: Optional[pulumi.Input[str]] = None,
            bgp_polling_time: Optional[pulumi.Input[str]] = None,
            cloud_instance_id: Optional[pulumi.Input[str]] = None,
            cloud_type: Optional[pulumi.Input[int]] = None,
            connected_transit: Optional[pulumi.Input[bool]] = None,
            customer_managed_keys: Optional[pulumi.Input[str]] = None,
            customized_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
            customized_transit_vpc_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            eip: Optional[pulumi.Input[str]] = None,
            enable_active_standby: Optional[pulumi.Input[bool]] = None,
            enable_active_standby_preemptive: Optional[pulumi.Input[bool]] = None,
            enable_advertise_transit_cidr: Optional[pulumi.Input[bool]] = None,
            enable_bgp_over_lan: Optional[pulumi.Input[bool]] = None,
            enable_egress_transit_firenet: Optional[pulumi.Input[bool]] = None,
            enable_encrypt_volume: Optional[pulumi.Input[bool]] = None,
            enable_firenet: Optional[pulumi.Input[bool]] = None,
            enable_gateway_load_balancer: Optional[pulumi.Input[bool]] = None,
            enable_hybrid_connection: Optional[pulumi.Input[bool]] = None,
            enable_jumbo_frame: Optional[pulumi.Input[bool]] = None,
            enable_learned_cidrs_approval: Optional[pulumi.Input[bool]] = None,
            enable_monitor_gateway_subnets: Optional[pulumi.Input[bool]] = None,
            enable_multi_tier_transit: Optional[pulumi.Input[bool]] = None,
            enable_preserve_as_path: Optional[pulumi.Input[bool]] = None,
            enable_private_oob: Optional[pulumi.Input[bool]] = None,
            enable_s2c_rx_balancing: Optional[pulumi.Input[bool]] = None,
            enable_segmentation: Optional[pulumi.Input[bool]] = None,
            enable_spot_instance: Optional[pulumi.Input[bool]] = None,
            enable_transit_firenet: Optional[pulumi.Input[bool]] = None,
            enable_transit_summarize_cidr_to_tgw: Optional[pulumi.Input[bool]] = None,
            enable_vpc_dns_server: Optional[pulumi.Input[bool]] = None,
            excluded_advertised_spoke_routes: Optional[pulumi.Input[str]] = None,
            fault_domain: Optional[pulumi.Input[str]] = None,
            filtered_spoke_vpc_routes: Optional[pulumi.Input[str]] = None,
            gw_name: Optional[pulumi.Input[str]] = None,
            gw_size: Optional[pulumi.Input[str]] = None,
            ha_availability_domain: Optional[pulumi.Input[str]] = None,
            ha_azure_eip_name_resource_group: Optional[pulumi.Input[str]] = None,
            ha_bgp_lan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]]] = None,
            ha_bgp_lan_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ha_cloud_instance_id: Optional[pulumi.Input[str]] = None,
            ha_eip: Optional[pulumi.Input[str]] = None,
            ha_fault_domain: Optional[pulumi.Input[str]] = None,
            ha_gw_name: Optional[pulumi.Input[str]] = None,
            ha_gw_size: Optional[pulumi.Input[str]] = None,
            ha_image_version: Optional[pulumi.Input[str]] = None,
            ha_insane_mode_az: Optional[pulumi.Input[str]] = None,
            ha_lan_interface_cidr: Optional[pulumi.Input[str]] = None,
            ha_oob_availability_zone: Optional[pulumi.Input[str]] = None,
            ha_oob_management_subnet: Optional[pulumi.Input[str]] = None,
            ha_private_ip: Optional[pulumi.Input[str]] = None,
            ha_private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
            ha_public_ip: Optional[pulumi.Input[str]] = None,
            ha_security_group_id: Optional[pulumi.Input[str]] = None,
            ha_software_version: Optional[pulumi.Input[str]] = None,
            ha_subnet: Optional[pulumi.Input[str]] = None,
            ha_zone: Optional[pulumi.Input[str]] = None,
            image_version: Optional[pulumi.Input[str]] = None,
            insane_mode: Optional[pulumi.Input[bool]] = None,
            insane_mode_az: Optional[pulumi.Input[str]] = None,
            lan_interface_cidr: Optional[pulumi.Input[str]] = None,
            lan_private_subnet: Optional[pulumi.Input[str]] = None,
            lan_vpc_id: Optional[pulumi.Input[str]] = None,
            learned_cidrs_approval_mode: Optional[pulumi.Input[str]] = None,
            local_as_number: Optional[pulumi.Input[str]] = None,
            monitor_exclude_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oob_availability_zone: Optional[pulumi.Input[str]] = None,
            oob_management_subnet: Optional[pulumi.Input[str]] = None,
            prepend_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            private_ip: Optional[pulumi.Input[str]] = None,
            private_mode_lb_vpc_id: Optional[pulumi.Input[str]] = None,
            private_mode_subnet_zone: Optional[pulumi.Input[str]] = None,
            public_ip: Optional[pulumi.Input[str]] = None,
            rx_queue_size: Optional[pulumi.Input[str]] = None,
            security_group_id: Optional[pulumi.Input[str]] = None,
            single_az_ha: Optional[pulumi.Input[bool]] = None,
            single_ip_snat: Optional[pulumi.Input[bool]] = None,
            software_version: Optional[pulumi.Input[str]] = None,
            spot_price: Optional[pulumi.Input[str]] = None,
            subnet: Optional[pulumi.Input[str]] = None,
            tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tunnel_detection_time: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vpc_reg: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'AviatrixTransitGateway':
        """
        Get an existing AviatrixTransitGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: This parameter represents the name of a Cloud-Account in Aviatrix controller.
        :param pulumi.Input[bool] allocate_new_eip: When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] approved_learned_cidrs: A set of approved learned CIDRs. Only valid when `enable_learned_cidrs_approval` is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.
        :param pulumi.Input[str] availability_domain: Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] azure_eip_name_resource_group: Name of public IP Address resource and its resource group in Azure to be assigned to the Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `allocate_new_eip` is false and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        :param pulumi.Input[bool] bgp_ecmp: Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.
        :param pulumi.Input[int] bgp_hold_time: BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayBgpLanInterfaceArgs']]]] bgp_lan_interfaces: Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit. Each interface has the following attributes:
        :param pulumi.Input[int] bgp_lan_interfaces_count: Number of interfaces that will be created for BGP over LAN enabled Azure transit. Valid value: 1~5 for FireNet case, 1~7 for Non-FireNet case. Default value: 1. Available as of provider version R2.22+.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bgp_lan_ip_lists: List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.
        :param pulumi.Input[str] bgp_manual_spoke_advertise_cidrs: Intended CIDR list to be advertised to external BGP router. Example: "10.2.0.0/16,10.4.0.0/16". Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        :param pulumi.Input[str] bgp_polling_time: BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".
        :param pulumi.Input[str] cloud_instance_id: Cloud instance ID of the transit gateway.
        :param pulumi.Input[int] cloud_type: Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.
        :param pulumi.Input[bool] connected_transit: Specify Connected Transit status. If enabled, it allows spokes to run traffics to other spokes via transit gateway. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] customer_managed_keys: Customer managed key ID.
        :param pulumi.Input[str] customized_spoke_vpc_routes: A list of comma-separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this transit gateway. Example: "10.0.0.0/16,10.2.0.0/16".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] customized_transit_vpc_routes: A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. To be effective, `enable_advertise_transit_cidr` or firewall management access for a Transit FireNet gateway must be enabled. Example: ["10.0.0.0/16", "10.2.0.0/16"].
        :param pulumi.Input[str] eip: Required when `allocate_new_eip` is false. It uses the specified EIP for this gateway. Available in Controller version 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        :param pulumi.Input[bool] enable_active_standby: Enables [Active-Standby Mode](https://docs.aviatrix.com/HowTos/transit_advanced.html#active-standby). Available only with HA enabled. Valid values: true, false. Default value: false. Available in provider version R2.17.1+.
        :param pulumi.Input[bool] enable_active_standby_preemptive: Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_advertise_transit_cidr: Switch to enable/disable advertise transit VPC network CIDR for a VGW connection. Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        :param pulumi.Input[bool] enable_bgp_over_lan: Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Must be enabled to create a BGP over LAN `AviatrixTransitExternalDeviceConn` resource with this Transit Gateway. Only valid for GCP (4), Azure (8), AzureGov (32) or AzureChina (2048). Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        :param pulumi.Input[bool] enable_egress_transit_firenet: Enable [Egress Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_workflow.html#b-enable-transit-firenet-on-aviatrix-egress-transit-gateway). Valid values: true, false. Default value: false. Available in provider version R2.16.3+.
        :param pulumi.Input[bool] enable_encrypt_volume: Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_firenet: Set to true to use gateway for legacy [AWS TGW-based FireNet](https://docs.aviatrix.com/HowTos/firewall_network_faq.html) connection. Valid values: true, false. Default value: false. **NOTE: If previously using an older provider version R2.5 where attribute name was `enable_firenet_interfaces`, please see notes here.**
        :param pulumi.Input[bool] enable_gateway_load_balancer: Enable FireNet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet` are set to true and `cloud_type` = 1 (AWS). Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        :param pulumi.Input[bool] enable_hybrid_connection: Sign of readiness for AWS TGW connection. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Example: false.
        :param pulumi.Input[bool] enable_jumbo_frame: Enable jumbo frames for this transit gateway. Default value is true.
        :param pulumi.Input[bool] enable_learned_cidrs_approval: Switch to enable/disable encrypted transit approval for transit gateway. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_monitor_gateway_subnets: If set to true, the [Monitor Gateway Subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet) feature is enabled. Default value is false. Available in provider version R2.18+.
        :param pulumi.Input[bool] enable_multi_tier_transit: Enable Multi-tier Transit mode on transit gateway. When enabled, transit gateway will propagate routes it receives from its transit peering peer to other transit peering peers. `local_as_number` is required. Default value: false. Available as of provider version R2.19+.
        :param pulumi.Input[bool] enable_preserve_as_path: Enable preserve as_path when advertising manual summary cidrs on transit gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+
               },
        :param pulumi.Input[bool] enable_private_oob: Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_s2c_rx_balancing: Enable S2C receive packet CPU re-balancing on transit gateway. Valid values: true, false. Default value: false. Available in provider version R2.21.2+.
        :param pulumi.Input[bool] enable_segmentation: Enable transit gateway for segmentation. Valid values: true, false. Default: false.
        :param pulumi.Input[bool] enable_spot_instance: Enable spot instance. NOT supported for production deployment.
        :param pulumi.Input[bool] enable_transit_firenet: Set to true to use gateway for [Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_faq.html) connection. Valid values: true, false. Default value: false. Available in provider version R2.12+.
        :param pulumi.Input[bool] enable_transit_summarize_cidr_to_tgw: Enable summarize CIDR to TGW. Valid values: true, false. Default value: false.
        :param pulumi.Input[bool] enable_vpc_dns_server: Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] excluded_advertised_spoke_routes: A list of comma-separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'. Example: "10.4.0.0/16,10.5.0.0/16".
        :param pulumi.Input[str] fault_domain: Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] filtered_spoke_vpc_routes: A list of comma-separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all spoke gateways attached to this transit gateway. Example: "10.2.0.0/16,10.3.0.0/16".
        :param pulumi.Input[str] gw_name: Name of the gateway which is going to be created.
        :param pulumi.Input[str] gw_size: Size of the gateway instance. Example: AWS: "t2.large", Azure/AzureGov: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1", AWSGov: "t2.large", AWSChina: "t2.large", AzureChina: "Standard_A0".
        :param pulumi.Input[str] ha_availability_domain: HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] ha_azure_eip_name_resource_group: Name of public IP Address resource and its resource group in Azure to be assigned to the HA Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `ha_eip` is set and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AviatrixTransitGatewayHaBgpLanInterfaceArgs']]]] ha_bgp_lan_interfaces: Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit HA. Each interface has the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ha_bgp_lan_ip_lists: List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.
        :param pulumi.Input[str] ha_cloud_instance_id: Cloud instance ID of the HA transit gateway.
        :param pulumi.Input[str] ha_eip: Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        :param pulumi.Input[str] ha_fault_domain: HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        :param pulumi.Input[str] ha_gw_name: Aviatrix transit gateway unique name of HA transit gateway.
        :param pulumi.Input[str] ha_gw_size: HA Gateway Size. Mandatory if enabling HA. Example: "t2.micro".
        :param pulumi.Input[str] ha_image_version: The image version of the HA gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `ha_software_version`. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        :param pulumi.Input[str] ha_insane_mode_az: AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret if `insane_mode` is enabled and `ha_subnet` is set. Example: AWS: "us-west-1a".
        :param pulumi.Input[str] ha_lan_interface_cidr: LAN interface CIDR of the HA transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.18+.
        :param pulumi.Input[str] ha_oob_availability_zone: HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".
        :param pulumi.Input[str] ha_oob_management_subnet: HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".
        :param pulumi.Input[str] ha_private_ip: Private IP address of the HA transit gateway created.
        :param pulumi.Input[str] ha_private_mode_subnet_zone: Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov with HA. Available in Provider version R2.23+.
        :param pulumi.Input[str] ha_public_ip: Public IP address of the HA Transit Gateway.
        :param pulumi.Input[str] ha_security_group_id: HA security group used for the transit gateway.
        :param pulumi.Input[str] ha_software_version: The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        :param pulumi.Input[str] ha_subnet: HA Subnet CIDR. Required only if enabling HA for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24".
        :param pulumi.Input[str] ha_zone: HA Zone. Required if enabling HA for GCP gateway. Optional if enabling HA for Azure gateway. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.
        :param pulumi.Input[str] image_version: The image version of the gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `software_version`. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        :param pulumi.Input[bool] insane_mode: Specify true for [Insane Mode](https://docs.aviatrix.com/HowTos/insane_mode.html) high performance gateway. Insane Mode gateway size must be at least c5 size (AWS, AWSGov, AWS China, AWS Top Secret and AWS Secret) or Standard_D3_v2 (Azure and AzureGov); for GCP only four size are supported: "n1-highcpu-4", "n1-highcpu-8", "n1-highcpu-16" and "n1-highcpu-32". If enabled, you must specify a valid /26 CIDR segment of the VPC to create a new subnet for AWS, Azure, AzureGov, AWSGov, AWS Top Secret and AWS Secret. Only available for AWS, GCP/OCI, Azure, AzureGov, AzureChina, AWSGov, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        :param pulumi.Input[str] insane_mode_az: AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if `insane_mode` is enabled. Example: AWS: "us-west-1a".
        :param pulumi.Input[str] lan_interface_cidr: LAN interface CIDR of the transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.17.1+.
        :param pulumi.Input[str] lan_private_subnet: LAN Private Subnet. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        :param pulumi.Input[str] lan_vpc_id: LAN VPC ID. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        :param pulumi.Input[str] learned_cidrs_approval_mode: Learned CIDRs approval mode. Either "gateway" (approval on a per gateway basis) or "connection" (approval on a per connection basis). Default value: "gateway". Available as of provider version R2.18+.
        :param pulumi.Input[str] local_as_number: Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitor_exclude_lists: Set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true. Available in provider version R2.18+.
        :param pulumi.Input[str] oob_availability_zone: OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".
        :param pulumi.Input[str] oob_management_subnet: OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prepend_as_paths: List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        :param pulumi.Input[str] private_ip: Private IP address of the transit gateway created.
        :param pulumi.Input[str] private_mode_lb_vpc_id: VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in Provider version R2.23+.
        :param pulumi.Input[str] private_mode_subnet_zone: Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov. Available in Provider version R2.23+.
        :param pulumi.Input[str] public_ip: Public IP address of the Transit Gateway created.
        :param pulumi.Input[str] rx_queue_size: Gateway ethernet interface RX queue size. Once set, can't be deleted or disabled. Available for AWS as of provider version R2.22+.
        :param pulumi.Input[str] security_group_id: Security group used for the transit gateway.
        :param pulumi.Input[bool] single_az_ha: Set to true if this [feature](https://docs.aviatrix.com/Solutions/gateway_ha.html#single-az-gateway) is desired. Valid values: true, false.
        :param pulumi.Input[bool] single_ip_snat: Enable "single_ip" mode Source NAT for this container. Valid values: true, false. **NOTE: Please see notes here in regards to changes to this argument in R2.10.**
        :param pulumi.Input[str] software_version: The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        :param pulumi.Input[str] spot_price: Price for spot instance. NOT supported for production deployment.
        :param pulumi.Input[str] subnet: A VPC Network address range selected from one of the available network ranges.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_lists: (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina. Example: ["key1:value1","key2:value2"].
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.
        :param pulumi.Input[int] tunnel_detection_time: The IPSec tunnel down detection time for the transit gateway.
        :param pulumi.Input[str] vpc_id: VPC-ID/VNet-Name of cloud provider.
        :param pulumi.Input[str] vpc_reg: Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".
        :param pulumi.Input[str] zone: Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'. Available in provider version R2.17+.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AviatrixTransitGatewayState.__new__(_AviatrixTransitGatewayState)

        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["allocate_new_eip"] = allocate_new_eip
        __props__.__dict__["approved_learned_cidrs"] = approved_learned_cidrs
        __props__.__dict__["availability_domain"] = availability_domain
        __props__.__dict__["azure_eip_name_resource_group"] = azure_eip_name_resource_group
        __props__.__dict__["bgp_ecmp"] = bgp_ecmp
        __props__.__dict__["bgp_hold_time"] = bgp_hold_time
        __props__.__dict__["bgp_lan_interfaces"] = bgp_lan_interfaces
        __props__.__dict__["bgp_lan_interfaces_count"] = bgp_lan_interfaces_count
        __props__.__dict__["bgp_lan_ip_lists"] = bgp_lan_ip_lists
        __props__.__dict__["bgp_manual_spoke_advertise_cidrs"] = bgp_manual_spoke_advertise_cidrs
        __props__.__dict__["bgp_polling_time"] = bgp_polling_time
        __props__.__dict__["cloud_instance_id"] = cloud_instance_id
        __props__.__dict__["cloud_type"] = cloud_type
        __props__.__dict__["connected_transit"] = connected_transit
        __props__.__dict__["customer_managed_keys"] = customer_managed_keys
        __props__.__dict__["customized_spoke_vpc_routes"] = customized_spoke_vpc_routes
        __props__.__dict__["customized_transit_vpc_routes"] = customized_transit_vpc_routes
        __props__.__dict__["eip"] = eip
        __props__.__dict__["enable_active_standby"] = enable_active_standby
        __props__.__dict__["enable_active_standby_preemptive"] = enable_active_standby_preemptive
        __props__.__dict__["enable_advertise_transit_cidr"] = enable_advertise_transit_cidr
        __props__.__dict__["enable_bgp_over_lan"] = enable_bgp_over_lan
        __props__.__dict__["enable_egress_transit_firenet"] = enable_egress_transit_firenet
        __props__.__dict__["enable_encrypt_volume"] = enable_encrypt_volume
        __props__.__dict__["enable_firenet"] = enable_firenet
        __props__.__dict__["enable_gateway_load_balancer"] = enable_gateway_load_balancer
        __props__.__dict__["enable_hybrid_connection"] = enable_hybrid_connection
        __props__.__dict__["enable_jumbo_frame"] = enable_jumbo_frame
        __props__.__dict__["enable_learned_cidrs_approval"] = enable_learned_cidrs_approval
        __props__.__dict__["enable_monitor_gateway_subnets"] = enable_monitor_gateway_subnets
        __props__.__dict__["enable_multi_tier_transit"] = enable_multi_tier_transit
        __props__.__dict__["enable_preserve_as_path"] = enable_preserve_as_path
        __props__.__dict__["enable_private_oob"] = enable_private_oob
        __props__.__dict__["enable_s2c_rx_balancing"] = enable_s2c_rx_balancing
        __props__.__dict__["enable_segmentation"] = enable_segmentation
        __props__.__dict__["enable_spot_instance"] = enable_spot_instance
        __props__.__dict__["enable_transit_firenet"] = enable_transit_firenet
        __props__.__dict__["enable_transit_summarize_cidr_to_tgw"] = enable_transit_summarize_cidr_to_tgw
        __props__.__dict__["enable_vpc_dns_server"] = enable_vpc_dns_server
        __props__.__dict__["excluded_advertised_spoke_routes"] = excluded_advertised_spoke_routes
        __props__.__dict__["fault_domain"] = fault_domain
        __props__.__dict__["filtered_spoke_vpc_routes"] = filtered_spoke_vpc_routes
        __props__.__dict__["gw_name"] = gw_name
        __props__.__dict__["gw_size"] = gw_size
        __props__.__dict__["ha_availability_domain"] = ha_availability_domain
        __props__.__dict__["ha_azure_eip_name_resource_group"] = ha_azure_eip_name_resource_group
        __props__.__dict__["ha_bgp_lan_interfaces"] = ha_bgp_lan_interfaces
        __props__.__dict__["ha_bgp_lan_ip_lists"] = ha_bgp_lan_ip_lists
        __props__.__dict__["ha_cloud_instance_id"] = ha_cloud_instance_id
        __props__.__dict__["ha_eip"] = ha_eip
        __props__.__dict__["ha_fault_domain"] = ha_fault_domain
        __props__.__dict__["ha_gw_name"] = ha_gw_name
        __props__.__dict__["ha_gw_size"] = ha_gw_size
        __props__.__dict__["ha_image_version"] = ha_image_version
        __props__.__dict__["ha_insane_mode_az"] = ha_insane_mode_az
        __props__.__dict__["ha_lan_interface_cidr"] = ha_lan_interface_cidr
        __props__.__dict__["ha_oob_availability_zone"] = ha_oob_availability_zone
        __props__.__dict__["ha_oob_management_subnet"] = ha_oob_management_subnet
        __props__.__dict__["ha_private_ip"] = ha_private_ip
        __props__.__dict__["ha_private_mode_subnet_zone"] = ha_private_mode_subnet_zone
        __props__.__dict__["ha_public_ip"] = ha_public_ip
        __props__.__dict__["ha_security_group_id"] = ha_security_group_id
        __props__.__dict__["ha_software_version"] = ha_software_version
        __props__.__dict__["ha_subnet"] = ha_subnet
        __props__.__dict__["ha_zone"] = ha_zone
        __props__.__dict__["image_version"] = image_version
        __props__.__dict__["insane_mode"] = insane_mode
        __props__.__dict__["insane_mode_az"] = insane_mode_az
        __props__.__dict__["lan_interface_cidr"] = lan_interface_cidr
        __props__.__dict__["lan_private_subnet"] = lan_private_subnet
        __props__.__dict__["lan_vpc_id"] = lan_vpc_id
        __props__.__dict__["learned_cidrs_approval_mode"] = learned_cidrs_approval_mode
        __props__.__dict__["local_as_number"] = local_as_number
        __props__.__dict__["monitor_exclude_lists"] = monitor_exclude_lists
        __props__.__dict__["oob_availability_zone"] = oob_availability_zone
        __props__.__dict__["oob_management_subnet"] = oob_management_subnet
        __props__.__dict__["prepend_as_paths"] = prepend_as_paths
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["private_mode_lb_vpc_id"] = private_mode_lb_vpc_id
        __props__.__dict__["private_mode_subnet_zone"] = private_mode_subnet_zone
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["rx_queue_size"] = rx_queue_size
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["single_az_ha"] = single_az_ha
        __props__.__dict__["single_ip_snat"] = single_ip_snat
        __props__.__dict__["software_version"] = software_version
        __props__.__dict__["spot_price"] = spot_price
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["tag_lists"] = tag_lists
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tunnel_detection_time"] = tunnel_detection_time
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vpc_reg"] = vpc_reg
        __props__.__dict__["zone"] = zone
        return AviatrixTransitGateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[str]:
        """
        This parameter represents the name of a Cloud-Account in Aviatrix controller.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="allocateNewEip")
    def allocate_new_eip(self) -> pulumi.Output[Optional[bool]]:
        """
        When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.
        """
        return pulumi.get(self, "allocate_new_eip")

    @property
    @pulumi.getter(name="approvedLearnedCidrs")
    def approved_learned_cidrs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of approved learned CIDRs. Only valid when `enable_learned_cidrs_approval` is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.
        """
        return pulumi.get(self, "approved_learned_cidrs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> pulumi.Output[str]:
        """
        Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="azureEipNameResourceGroup")
    def azure_eip_name_resource_group(self) -> pulumi.Output[str]:
        """
        Name of public IP Address resource and its resource group in Azure to be assigned to the Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `allocate_new_eip` is false and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        """
        return pulumi.get(self, "azure_eip_name_resource_group")

    @property
    @pulumi.getter(name="bgpEcmp")
    def bgp_ecmp(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.
        """
        return pulumi.get(self, "bgp_ecmp")

    @property
    @pulumi.getter(name="bgpHoldTime")
    def bgp_hold_time(self) -> pulumi.Output[Optional[int]]:
        """
        BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.
        """
        return pulumi.get(self, "bgp_hold_time")

    @property
    @pulumi.getter(name="bgpLanInterfaces")
    def bgp_lan_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.AviatrixTransitGatewayBgpLanInterface']]]:
        """
        Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit. Each interface has the following attributes:
        """
        return pulumi.get(self, "bgp_lan_interfaces")

    @property
    @pulumi.getter(name="bgpLanInterfacesCount")
    def bgp_lan_interfaces_count(self) -> pulumi.Output[Optional[int]]:
        """
        Number of interfaces that will be created for BGP over LAN enabled Azure transit. Valid value: 1~5 for FireNet case, 1~7 for Non-FireNet case. Default value: 1. Available as of provider version R2.22+.
        """
        return pulumi.get(self, "bgp_lan_interfaces_count")

    @property
    @pulumi.getter(name="bgpLanIpLists")
    def bgp_lan_ip_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.
        """
        return pulumi.get(self, "bgp_lan_ip_lists")

    @property
    @pulumi.getter(name="bgpManualSpokeAdvertiseCidrs")
    def bgp_manual_spoke_advertise_cidrs(self) -> pulumi.Output[Optional[str]]:
        """
        Intended CIDR list to be advertised to external BGP router. Example: "10.2.0.0/16,10.4.0.0/16". Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        """
        return pulumi.get(self, "bgp_manual_spoke_advertise_cidrs")

    @property
    @pulumi.getter(name="bgpPollingTime")
    def bgp_polling_time(self) -> pulumi.Output[Optional[str]]:
        """
        BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".
        """
        return pulumi.get(self, "bgp_polling_time")

    @property
    @pulumi.getter(name="cloudInstanceId")
    def cloud_instance_id(self) -> pulumi.Output[str]:
        """
        Cloud instance ID of the transit gateway.
        """
        return pulumi.get(self, "cloud_instance_id")

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> pulumi.Output[int]:
        """
        Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.
        """
        return pulumi.get(self, "cloud_type")

    @property
    @pulumi.getter(name="connectedTransit")
    def connected_transit(self) -> pulumi.Output[Optional[bool]]:
        """
        Specify Connected Transit status. If enabled, it allows spokes to run traffics to other spokes via transit gateway. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "connected_transit")

    @property
    @pulumi.getter(name="customerManagedKeys")
    def customer_managed_keys(self) -> pulumi.Output[Optional[str]]:
        """
        Customer managed key ID.
        """
        return pulumi.get(self, "customer_managed_keys")

    @property
    @pulumi.getter(name="customizedSpokeVpcRoutes")
    def customized_spoke_vpc_routes(self) -> pulumi.Output[Optional[str]]:
        """
        A list of comma-separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this transit gateway. Example: "10.0.0.0/16,10.2.0.0/16".
        """
        return pulumi.get(self, "customized_spoke_vpc_routes")

    @property
    @pulumi.getter(name="customizedTransitVpcRoutes")
    def customized_transit_vpc_routes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. To be effective, `enable_advertise_transit_cidr` or firewall management access for a Transit FireNet gateway must be enabled. Example: ["10.0.0.0/16", "10.2.0.0/16"].
        """
        return pulumi.get(self, "customized_transit_vpc_routes")

    @property
    @pulumi.getter
    def eip(self) -> pulumi.Output[str]:
        """
        Required when `allocate_new_eip` is false. It uses the specified EIP for this gateway. Available in Controller version 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        """
        return pulumi.get(self, "eip")

    @property
    @pulumi.getter(name="enableActiveStandby")
    def enable_active_standby(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables [Active-Standby Mode](https://docs.aviatrix.com/HowTos/transit_advanced.html#active-standby). Available only with HA enabled. Valid values: true, false. Default value: false. Available in provider version R2.17.1+.
        """
        return pulumi.get(self, "enable_active_standby")

    @property
    @pulumi.getter(name="enableActiveStandbyPreemptive")
    def enable_active_standby_preemptive(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_active_standby_preemptive")

    @property
    @pulumi.getter(name="enableAdvertiseTransitCidr")
    def enable_advertise_transit_cidr(self) -> pulumi.Output[Optional[bool]]:
        """
        Switch to enable/disable advertise transit VPC network CIDR for a VGW connection. Available as of R2.6. **NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes here.**
        """
        return pulumi.get(self, "enable_advertise_transit_cidr")

    @property
    @pulumi.getter(name="enableBgpOverLan")
    def enable_bgp_over_lan(self) -> pulumi.Output[Optional[bool]]:
        """
        Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Must be enabled to create a BGP over LAN `AviatrixTransitExternalDeviceConn` resource with this Transit Gateway. Only valid for GCP (4), Azure (8), AzureGov (32) or AzureChina (2048). Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        """
        return pulumi.get(self, "enable_bgp_over_lan")

    @property
    @pulumi.getter(name="enableEgressTransitFirenet")
    def enable_egress_transit_firenet(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable [Egress Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_workflow.html#b-enable-transit-firenet-on-aviatrix-egress-transit-gateway). Valid values: true, false. Default value: false. Available in provider version R2.16.3+.
        """
        return pulumi.get(self, "enable_egress_transit_firenet")

    @property
    @pulumi.getter(name="enableEncryptVolume")
    def enable_encrypt_volume(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_encrypt_volume")

    @property
    @pulumi.getter(name="enableFirenet")
    def enable_firenet(self) -> pulumi.Output[Optional[bool]]:
        """
        Set to true to use gateway for legacy [AWS TGW-based FireNet](https://docs.aviatrix.com/HowTos/firewall_network_faq.html) connection. Valid values: true, false. Default value: false. **NOTE: If previously using an older provider version R2.5 where attribute name was `enable_firenet_interfaces`, please see notes here.**
        """
        return pulumi.get(self, "enable_firenet")

    @property
    @pulumi.getter(name="enableGatewayLoadBalancer")
    def enable_gateway_load_balancer(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable FireNet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet` are set to true and `cloud_type` = 1 (AWS). Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.
        """
        return pulumi.get(self, "enable_gateway_load_balancer")

    @property
    @pulumi.getter(name="enableHybridConnection")
    def enable_hybrid_connection(self) -> pulumi.Output[Optional[bool]]:
        """
        Sign of readiness for AWS TGW connection. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Example: false.
        """
        return pulumi.get(self, "enable_hybrid_connection")

    @property
    @pulumi.getter(name="enableJumboFrame")
    def enable_jumbo_frame(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable jumbo frames for this transit gateway. Default value is true.
        """
        return pulumi.get(self, "enable_jumbo_frame")

    @property
    @pulumi.getter(name="enableLearnedCidrsApproval")
    def enable_learned_cidrs_approval(self) -> pulumi.Output[Optional[bool]]:
        """
        Switch to enable/disable encrypted transit approval for transit gateway. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_learned_cidrs_approval")

    @property
    @pulumi.getter(name="enableMonitorGatewaySubnets")
    def enable_monitor_gateway_subnets(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to true, the [Monitor Gateway Subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet) feature is enabled. Default value is false. Available in provider version R2.18+.
        """
        return pulumi.get(self, "enable_monitor_gateway_subnets")

    @property
    @pulumi.getter(name="enableMultiTierTransit")
    def enable_multi_tier_transit(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable Multi-tier Transit mode on transit gateway. When enabled, transit gateway will propagate routes it receives from its transit peering peer to other transit peering peers. `local_as_number` is required. Default value: false. Available as of provider version R2.19+.
        """
        return pulumi.get(self, "enable_multi_tier_transit")

    @property
    @pulumi.getter(name="enablePreserveAsPath")
    def enable_preserve_as_path(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable preserve as_path when advertising manual summary cidrs on transit gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+
        },
        """
        return pulumi.get(self, "enable_preserve_as_path")

    @property
    @pulumi.getter(name="enablePrivateOob")
    def enable_private_oob(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_private_oob")

    @property
    @pulumi.getter(name="enableS2cRxBalancing")
    def enable_s2c_rx_balancing(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable S2C receive packet CPU re-balancing on transit gateway. Valid values: true, false. Default value: false. Available in provider version R2.21.2+.
        """
        return pulumi.get(self, "enable_s2c_rx_balancing")

    @property
    @pulumi.getter(name="enableSegmentation")
    def enable_segmentation(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable transit gateway for segmentation. Valid values: true, false. Default: false.
        """
        return pulumi.get(self, "enable_segmentation")

    @property
    @pulumi.getter(name="enableSpotInstance")
    def enable_spot_instance(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable spot instance. NOT supported for production deployment.
        """
        return pulumi.get(self, "enable_spot_instance")

    @property
    @pulumi.getter(name="enableTransitFirenet")
    def enable_transit_firenet(self) -> pulumi.Output[Optional[bool]]:
        """
        Set to true to use gateway for [Transit FireNet](https://docs.aviatrix.com/HowTos/transit_firenet_faq.html) connection. Valid values: true, false. Default value: false. Available in provider version R2.12+.
        """
        return pulumi.get(self, "enable_transit_firenet")

    @property
    @pulumi.getter(name="enableTransitSummarizeCidrToTgw")
    def enable_transit_summarize_cidr_to_tgw(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable summarize CIDR to TGW. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_transit_summarize_cidr_to_tgw")

    @property
    @pulumi.getter(name="enableVpcDnsServer")
    def enable_vpc_dns_server(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "enable_vpc_dns_server")

    @property
    @pulumi.getter(name="excludedAdvertisedSpokeRoutes")
    def excluded_advertised_spoke_routes(self) -> pulumi.Output[Optional[str]]:
        """
        A list of comma-separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'. Example: "10.4.0.0/16,10.5.0.0/16".
        """
        return pulumi.get(self, "excluded_advertised_spoke_routes")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> pulumi.Output[str]:
        """
        Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="filteredSpokeVpcRoutes")
    def filtered_spoke_vpc_routes(self) -> pulumi.Output[Optional[str]]:
        """
        A list of comma-separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all spoke gateways attached to this transit gateway. Example: "10.2.0.0/16,10.3.0.0/16".
        """
        return pulumi.get(self, "filtered_spoke_vpc_routes")

    @property
    @pulumi.getter(name="gwName")
    def gw_name(self) -> pulumi.Output[str]:
        """
        Name of the gateway which is going to be created.
        """
        return pulumi.get(self, "gw_name")

    @property
    @pulumi.getter(name="gwSize")
    def gw_size(self) -> pulumi.Output[str]:
        """
        Size of the gateway instance. Example: AWS: "t2.large", Azure/AzureGov: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1", AWSGov: "t2.large", AWSChina: "t2.large", AzureChina: "Standard_A0".
        """
        return pulumi.get(self, "gw_size")

    @property
    @pulumi.getter(name="haAvailabilityDomain")
    def ha_availability_domain(self) -> pulumi.Output[str]:
        """
        HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "ha_availability_domain")

    @property
    @pulumi.getter(name="haAzureEipNameResourceGroup")
    def ha_azure_eip_name_resource_group(self) -> pulumi.Output[str]:
        """
        Name of public IP Address resource and its resource group in Azure to be assigned to the HA Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if `ha_eip` is set and `cloud_type` is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.
        """
        return pulumi.get(self, "ha_azure_eip_name_resource_group")

    @property
    @pulumi.getter(name="haBgpLanInterfaces")
    def ha_bgp_lan_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.AviatrixTransitGatewayHaBgpLanInterface']]]:
        """
        Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit HA. Each interface has the following attributes:
        """
        return pulumi.get(self, "ha_bgp_lan_interfaces")

    @property
    @pulumi.getter(name="haBgpLanIpLists")
    def ha_bgp_lan_ip_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.
        """
        return pulumi.get(self, "ha_bgp_lan_ip_lists")

    @property
    @pulumi.getter(name="haCloudInstanceId")
    def ha_cloud_instance_id(self) -> pulumi.Output[str]:
        """
        Cloud instance ID of the HA transit gateway.
        """
        return pulumi.get(self, "ha_cloud_instance_id")

    @property
    @pulumi.getter(name="haEip")
    def ha_eip(self) -> pulumi.Output[str]:
        """
        Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.
        """
        return pulumi.get(self, "ha_eip")

    @property
    @pulumi.getter(name="haFaultDomain")
    def ha_fault_domain(self) -> pulumi.Output[str]:
        """
        HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.
        """
        return pulumi.get(self, "ha_fault_domain")

    @property
    @pulumi.getter(name="haGwName")
    def ha_gw_name(self) -> pulumi.Output[str]:
        """
        Aviatrix transit gateway unique name of HA transit gateway.
        """
        return pulumi.get(self, "ha_gw_name")

    @property
    @pulumi.getter(name="haGwSize")
    def ha_gw_size(self) -> pulumi.Output[Optional[str]]:
        """
        HA Gateway Size. Mandatory if enabling HA. Example: "t2.micro".
        """
        return pulumi.get(self, "ha_gw_size")

    @property
    @pulumi.getter(name="haImageVersion")
    def ha_image_version(self) -> pulumi.Output[str]:
        """
        The image version of the HA gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `ha_software_version`. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "ha_image_version")

    @property
    @pulumi.getter(name="haInsaneModeAz")
    def ha_insane_mode_az(self) -> pulumi.Output[Optional[str]]:
        """
        AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret if `insane_mode` is enabled and `ha_subnet` is set. Example: AWS: "us-west-1a".
        """
        return pulumi.get(self, "ha_insane_mode_az")

    @property
    @pulumi.getter(name="haLanInterfaceCidr")
    def ha_lan_interface_cidr(self) -> pulumi.Output[str]:
        """
        LAN interface CIDR of the HA transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.18+.
        """
        return pulumi.get(self, "ha_lan_interface_cidr")

    @property
    @pulumi.getter(name="haOobAvailabilityZone")
    def ha_oob_availability_zone(self) -> pulumi.Output[Optional[str]]:
        """
        HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".
        """
        return pulumi.get(self, "ha_oob_availability_zone")

    @property
    @pulumi.getter(name="haOobManagementSubnet")
    def ha_oob_management_subnet(self) -> pulumi.Output[Optional[str]]:
        """
        HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".
        """
        return pulumi.get(self, "ha_oob_management_subnet")

    @property
    @pulumi.getter(name="haPrivateIp")
    def ha_private_ip(self) -> pulumi.Output[str]:
        """
        Private IP address of the HA transit gateway created.
        """
        return pulumi.get(self, "ha_private_ip")

    @property
    @pulumi.getter(name="haPrivateModeSubnetZone")
    def ha_private_mode_subnet_zone(self) -> pulumi.Output[Optional[str]]:
        """
        Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov with HA. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "ha_private_mode_subnet_zone")

    @property
    @pulumi.getter(name="haPublicIp")
    def ha_public_ip(self) -> pulumi.Output[str]:
        """
        Public IP address of the HA Transit Gateway.
        """
        return pulumi.get(self, "ha_public_ip")

    @property
    @pulumi.getter(name="haSecurityGroupId")
    def ha_security_group_id(self) -> pulumi.Output[str]:
        """
        HA security group used for the transit gateway.
        """
        return pulumi.get(self, "ha_security_group_id")

    @property
    @pulumi.getter(name="haSoftwareVersion")
    def ha_software_version(self) -> pulumi.Output[str]:
        """
        The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "ha_software_version")

    @property
    @pulumi.getter(name="haSubnet")
    def ha_subnet(self) -> pulumi.Output[Optional[str]]:
        """
        HA Subnet CIDR. Required only if enabling HA for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24".
        """
        return pulumi.get(self, "ha_subnet")

    @property
    @pulumi.getter(name="haZone")
    def ha_zone(self) -> pulumi.Output[Optional[str]]:
        """
        HA Zone. Required if enabling HA for GCP gateway. Optional if enabling HA for Azure gateway. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.
        """
        return pulumi.get(self, "ha_zone")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> pulumi.Output[str]:
        """
        The image version of the gateway. Use `get_aviatrix_gateway_image` data source to programmatically retrieve this value for the desired `software_version`. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="insaneMode")
    def insane_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Specify true for [Insane Mode](https://docs.aviatrix.com/HowTos/insane_mode.html) high performance gateway. Insane Mode gateway size must be at least c5 size (AWS, AWSGov, AWS China, AWS Top Secret and AWS Secret) or Standard_D3_v2 (Azure and AzureGov); for GCP only four size are supported: "n1-highcpu-4", "n1-highcpu-8", "n1-highcpu-16" and "n1-highcpu-32". If enabled, you must specify a valid /26 CIDR segment of the VPC to create a new subnet for AWS, Azure, AzureGov, AWSGov, AWS Top Secret and AWS Secret. Only available for AWS, GCP/OCI, Azure, AzureGov, AzureChina, AWSGov, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.
        """
        return pulumi.get(self, "insane_mode")

    @property
    @pulumi.getter(name="insaneModeAz")
    def insane_mode_az(self) -> pulumi.Output[Optional[str]]:
        """
        AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if `insane_mode` is enabled. Example: AWS: "us-west-1a".
        """
        return pulumi.get(self, "insane_mode_az")

    @property
    @pulumi.getter(name="lanInterfaceCidr")
    def lan_interface_cidr(self) -> pulumi.Output[str]:
        """
        LAN interface CIDR of the transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.17.1+.
        """
        return pulumi.get(self, "lan_interface_cidr")

    @property
    @pulumi.getter(name="lanPrivateSubnet")
    def lan_private_subnet(self) -> pulumi.Output[Optional[str]]:
        """
        LAN Private Subnet. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        """
        return pulumi.get(self, "lan_private_subnet")

    @property
    @pulumi.getter(name="lanVpcId")
    def lan_vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        LAN VPC ID. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.
        """
        return pulumi.get(self, "lan_vpc_id")

    @property
    @pulumi.getter(name="learnedCidrsApprovalMode")
    def learned_cidrs_approval_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Learned CIDRs approval mode. Either "gateway" (approval on a per gateway basis) or "connection" (approval on a per connection basis). Default value: "gateway". Available as of provider version R2.18+.
        """
        return pulumi.get(self, "learned_cidrs_approval_mode")

    @property
    @pulumi.getter(name="localAsNumber")
    def local_as_number(self) -> pulumi.Output[str]:
        """
        Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        """
        return pulumi.get(self, "local_as_number")

    @property
    @pulumi.getter(name="monitorExcludeLists")
    def monitor_exclude_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true. Available in provider version R2.18+.
        """
        return pulumi.get(self, "monitor_exclude_lists")

    @property
    @pulumi.getter(name="oobAvailabilityZone")
    def oob_availability_zone(self) -> pulumi.Output[Optional[str]]:
        """
        OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".
        """
        return pulumi.get(self, "oob_availability_zone")

    @property
    @pulumi.getter(name="oobManagementSubnet")
    def oob_management_subnet(self) -> pulumi.Output[Optional[str]]:
        """
        OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".
        """
        return pulumi.get(self, "oob_management_subnet")

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        """
        return pulumi.get(self, "prepend_as_paths")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[str]:
        """
        Private IP address of the transit gateway created.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="privateModeLbVpcId")
    def private_mode_lb_vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "private_mode_lb_vpc_id")

    @property
    @pulumi.getter(name="privateModeSubnetZone")
    def private_mode_subnet_zone(self) -> pulumi.Output[Optional[str]]:
        """
        Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and `cloud_type` is AWS or AWSGov. Available in Provider version R2.23+.
        """
        return pulumi.get(self, "private_mode_subnet_zone")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[str]:
        """
        Public IP address of the Transit Gateway created.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="rxQueueSize")
    def rx_queue_size(self) -> pulumi.Output[Optional[str]]:
        """
        Gateway ethernet interface RX queue size. Once set, can't be deleted or disabled. Available for AWS as of provider version R2.22+.
        """
        return pulumi.get(self, "rx_queue_size")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[str]:
        """
        Security group used for the transit gateway.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="singleAzHa")
    def single_az_ha(self) -> pulumi.Output[Optional[bool]]:
        """
        Set to true if this [feature](https://docs.aviatrix.com/Solutions/gateway_ha.html#single-az-gateway) is desired. Valid values: true, false.
        """
        return pulumi.get(self, "single_az_ha")

    @property
    @pulumi.getter(name="singleIpSnat")
    def single_ip_snat(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable "single_ip" mode Source NAT for this container. Valid values: true, false. **NOTE: Please see notes here in regards to changes to this argument in R2.10.**
        """
        return pulumi.get(self, "single_ip_snat")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> pulumi.Output[str]:
        """
        The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the `AviatrixControllerConfig` resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.
        """
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> pulumi.Output[Optional[str]]:
        """
        Price for spot instance. NOT supported for production deployment.
        """
        return pulumi.get(self, "spot_price")

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[str]:
        """
        A VPC Network address range selected from one of the available network ranges.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="tagLists")
    def tag_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina. Example: ["key1:value1","key2:value2"].
        """
        return pulumi.get(self, "tag_lists")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tunnelDetectionTime")
    def tunnel_detection_time(self) -> pulumi.Output[int]:
        """
        The IPSec tunnel down detection time for the transit gateway.
        """
        return pulumi.get(self, "tunnel_detection_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        VPC-ID/VNet-Name of cloud provider.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcReg")
    def vpc_reg(self) -> pulumi.Output[str]:
        """
        Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".
        """
        return pulumi.get(self, "vpc_reg")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[Optional[str]]:
        """
        Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'. Available in provider version R2.17+.
        """
        return pulumi.get(self, "zone")

