# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AviatrixAwsGuardDutyArgs', 'AviatrixAwsGuardDuty']

@pulumi.input_type
class AviatrixAwsGuardDutyArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 excluded_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a AviatrixAwsGuardDuty resource.
        :param pulumi.Input[str] account_name: Account name.
        :param pulumi.Input[str] region: Region.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_ips: Set of excluded IPs.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "region", region)
        if excluded_ips is not None:
            pulumi.set(__self__, "excluded_ips", excluded_ips)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Account name.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="excludedIps")
    def excluded_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of excluded IPs.
        """
        return pulumi.get(self, "excluded_ips")

    @excluded_ips.setter
    def excluded_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_ips", value)


@pulumi.input_type
class _AviatrixAwsGuardDutyState:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 excluded_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AviatrixAwsGuardDuty resources.
        :param pulumi.Input[str] account_name: Account name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_ips: Set of excluded IPs.
        :param pulumi.Input[str] region: Region.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if excluded_ips is not None:
            pulumi.set(__self__, "excluded_ips", excluded_ips)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Account name.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="excludedIps")
    def excluded_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of excluded IPs.
        """
        return pulumi.get(self, "excluded_ips")

    @excluded_ips.setter
    def excluded_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_ips", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class AviatrixAwsGuardDuty(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 excluded_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_aviatrix as aviatrix

        # Configure AWS GuardDuty 
        test_aws_guard_duty = aviatrix.AviatrixAwsGuardDuty("testAwsGuardDuty",
            account_name=aviatrix_account["account_1"]["account_name"],
            region="us-west-1",
            excluded_ips=[
                "127.0.0.1",
                "10.0.0.1",
            ])
        ```

        ## Import

        **aws_guard_duty** resource can be imported with the `account_name` and `region` in the form "account_name~~region", e.g.

        ```sh
         $ pulumi import aviatrix:index/aviatrixAwsGuardDuty:AviatrixAwsGuardDuty test_aws_guard_duty devops-acc~~us-west-1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: Account name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_ips: Set of excluded IPs.
        :param pulumi.Input[str] region: Region.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AviatrixAwsGuardDutyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_aviatrix as aviatrix

        # Configure AWS GuardDuty 
        test_aws_guard_duty = aviatrix.AviatrixAwsGuardDuty("testAwsGuardDuty",
            account_name=aviatrix_account["account_1"]["account_name"],
            region="us-west-1",
            excluded_ips=[
                "127.0.0.1",
                "10.0.0.1",
            ])
        ```

        ## Import

        **aws_guard_duty** resource can be imported with the `account_name` and `region` in the form "account_name~~region", e.g.

        ```sh
         $ pulumi import aviatrix:index/aviatrixAwsGuardDuty:AviatrixAwsGuardDuty test_aws_guard_duty devops-acc~~us-west-1
        ```

        :param str resource_name: The name of the resource.
        :param AviatrixAwsGuardDutyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AviatrixAwsGuardDutyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 excluded_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AviatrixAwsGuardDutyArgs.__new__(AviatrixAwsGuardDutyArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            __props__.__dict__["excluded_ips"] = excluded_ips
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
        super(AviatrixAwsGuardDuty, __self__).__init__(
            'aviatrix:index/aviatrixAwsGuardDuty:AviatrixAwsGuardDuty',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_name: Optional[pulumi.Input[str]] = None,
            excluded_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'AviatrixAwsGuardDuty':
        """
        Get an existing AviatrixAwsGuardDuty resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: Account name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_ips: Set of excluded IPs.
        :param pulumi.Input[str] region: Region.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AviatrixAwsGuardDutyState.__new__(_AviatrixAwsGuardDutyState)

        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["excluded_ips"] = excluded_ips
        __props__.__dict__["region"] = region
        return AviatrixAwsGuardDuty(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[str]:
        """
        Account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="excludedIps")
    def excluded_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Set of excluded IPs.
        """
        return pulumi.get(self, "excluded_ips")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Region.
        """
        return pulumi.get(self, "region")

