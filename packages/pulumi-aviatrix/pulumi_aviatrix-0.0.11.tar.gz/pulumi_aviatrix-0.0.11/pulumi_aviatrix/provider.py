# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 controller_ip: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 ignore_tags: Optional[pulumi.Input['ProviderIgnoreTagsArgs']] = None,
                 path_to_ca_certificate: Optional[pulumi.Input[str]] = None,
                 skip_version_validation: Optional[pulumi.Input[bool]] = None,
                 verify_ssl_certificate: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input['ProviderIgnoreTagsArgs'] ignore_tags: Configuration block with settings to ignore tags across all resources.
        """
        pulumi.set(__self__, "controller_ip", controller_ip)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if ignore_tags is not None:
            pulumi.set(__self__, "ignore_tags", ignore_tags)
        if path_to_ca_certificate is not None:
            pulumi.set(__self__, "path_to_ca_certificate", path_to_ca_certificate)
        if skip_version_validation is not None:
            pulumi.set(__self__, "skip_version_validation", skip_version_validation)
        if verify_ssl_certificate is not None:
            pulumi.set(__self__, "verify_ssl_certificate", verify_ssl_certificate)

    @property
    @pulumi.getter(name="controllerIp")
    def controller_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "controller_ip")

    @controller_ip.setter
    def controller_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "controller_ip", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="ignoreTags")
    def ignore_tags(self) -> Optional[pulumi.Input['ProviderIgnoreTagsArgs']]:
        """
        Configuration block with settings to ignore tags across all resources.
        """
        return pulumi.get(self, "ignore_tags")

    @ignore_tags.setter
    def ignore_tags(self, value: Optional[pulumi.Input['ProviderIgnoreTagsArgs']]):
        pulumi.set(self, "ignore_tags", value)

    @property
    @pulumi.getter(name="pathToCaCertificate")
    def path_to_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_to_ca_certificate")

    @path_to_ca_certificate.setter
    def path_to_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_to_ca_certificate", value)

    @property
    @pulumi.getter(name="skipVersionValidation")
    def skip_version_validation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_version_validation")

    @skip_version_validation.setter
    def skip_version_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_version_validation", value)

    @property
    @pulumi.getter(name="verifySslCertificate")
    def verify_ssl_certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify_ssl_certificate")

    @verify_ssl_certificate.setter
    def verify_ssl_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_ssl_certificate", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 controller_ip: Optional[pulumi.Input[str]] = None,
                 ignore_tags: Optional[pulumi.Input[pulumi.InputType['ProviderIgnoreTagsArgs']]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path_to_ca_certificate: Optional[pulumi.Input[str]] = None,
                 skip_version_validation: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 verify_ssl_certificate: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The provider type for the aviatrix package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ProviderIgnoreTagsArgs']] ignore_tags: Configuration block with settings to ignore tags across all resources.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the aviatrix package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 controller_ip: Optional[pulumi.Input[str]] = None,
                 ignore_tags: Optional[pulumi.Input[pulumi.InputType['ProviderIgnoreTagsArgs']]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 path_to_ca_certificate: Optional[pulumi.Input[str]] = None,
                 skip_version_validation: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 verify_ssl_certificate: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if controller_ip is None and not opts.urn:
                raise TypeError("Missing required property 'controller_ip'")
            __props__.__dict__["controller_ip"] = controller_ip
            __props__.__dict__["ignore_tags"] = pulumi.Output.from_input(ignore_tags).apply(pulumi.runtime.to_json) if ignore_tags is not None else None
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = password
            __props__.__dict__["path_to_ca_certificate"] = path_to_ca_certificate
            __props__.__dict__["skip_version_validation"] = pulumi.Output.from_input(skip_version_validation).apply(pulumi.runtime.to_json) if skip_version_validation is not None else None
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["verify_ssl_certificate"] = pulumi.Output.from_input(verify_ssl_certificate).apply(pulumi.runtime.to_json) if verify_ssl_certificate is not None else None
        super(Provider, __self__).__init__(
            'aviatrix',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="controllerIp")
    def controller_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "controller_ip")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pathToCaCertificate")
    def path_to_ca_certificate(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "path_to_ca_certificate")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        return pulumi.get(self, "username")

