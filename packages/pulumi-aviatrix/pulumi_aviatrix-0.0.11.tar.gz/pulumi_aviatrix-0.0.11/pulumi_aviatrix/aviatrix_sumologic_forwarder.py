# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AviatrixSumologicForwarderArgs', 'AviatrixSumologicForwarder']

@pulumi.input_type
class AviatrixSumologicForwarderArgs:
    def __init__(__self__, *,
                 access_id: pulumi.Input[str],
                 access_key: pulumi.Input[str],
                 custom_configuration: Optional[pulumi.Input[str]] = None,
                 excluded_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_category: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AviatrixSumologicForwarder resource.
        :param pulumi.Input[str] access_id: Access ID.
        :param pulumi.Input[str] access_key: Access Key.
        :param pulumi.Input[str] custom_configuration: Custom configuration. The format should be key=value pairs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_gateways: List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        :param pulumi.Input[str] source_category: Source category. "Aviatrix_syslog" by default.
        """
        pulumi.set(__self__, "access_id", access_id)
        pulumi.set(__self__, "access_key", access_key)
        if custom_configuration is not None:
            pulumi.set(__self__, "custom_configuration", custom_configuration)
        if excluded_gateways is not None:
            pulumi.set(__self__, "excluded_gateways", excluded_gateways)
        if source_category is not None:
            pulumi.set(__self__, "source_category", source_category)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> pulumi.Input[str]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_id")

    @access_id.setter
    def access_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_id", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        Access Key.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="customConfiguration")
    def custom_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Custom configuration. The format should be key=value pairs.
        """
        return pulumi.get(self, "custom_configuration")

    @custom_configuration.setter
    def custom_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_configuration", value)

    @property
    @pulumi.getter(name="excludedGateways")
    def excluded_gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        """
        return pulumi.get(self, "excluded_gateways")

    @excluded_gateways.setter
    def excluded_gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_gateways", value)

    @property
    @pulumi.getter(name="sourceCategory")
    def source_category(self) -> Optional[pulumi.Input[str]]:
        """
        Source category. "Aviatrix_syslog" by default.
        """
        return pulumi.get(self, "source_category")

    @source_category.setter
    def source_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_category", value)


@pulumi.input_type
class _AviatrixSumologicForwarderState:
    def __init__(__self__, *,
                 access_id: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 custom_configuration: Optional[pulumi.Input[str]] = None,
                 excluded_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_category: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AviatrixSumologicForwarder resources.
        :param pulumi.Input[str] access_id: Access ID.
        :param pulumi.Input[str] access_key: Access Key.
        :param pulumi.Input[str] custom_configuration: Custom configuration. The format should be key=value pairs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_gateways: List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        :param pulumi.Input[str] source_category: Source category. "Aviatrix_syslog" by default.
        :param pulumi.Input[str] status: The status of sumologic forwarder.
        """
        if access_id is not None:
            pulumi.set(__self__, "access_id", access_id)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if custom_configuration is not None:
            pulumi.set(__self__, "custom_configuration", custom_configuration)
        if excluded_gateways is not None:
            pulumi.set(__self__, "excluded_gateways", excluded_gateways)
        if source_category is not None:
            pulumi.set(__self__, "source_category", source_category)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> Optional[pulumi.Input[str]]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_id")

    @access_id.setter
    def access_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_id", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access Key.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="customConfiguration")
    def custom_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Custom configuration. The format should be key=value pairs.
        """
        return pulumi.get(self, "custom_configuration")

    @custom_configuration.setter
    def custom_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_configuration", value)

    @property
    @pulumi.getter(name="excludedGateways")
    def excluded_gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        """
        return pulumi.get(self, "excluded_gateways")

    @excluded_gateways.setter
    def excluded_gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_gateways", value)

    @property
    @pulumi.getter(name="sourceCategory")
    def source_category(self) -> Optional[pulumi.Input[str]]:
        """
        Source category. "Aviatrix_syslog" by default.
        """
        return pulumi.get(self, "source_category")

    @source_category.setter
    def source_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_category", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of sumologic forwarder.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class AviatrixSumologicForwarder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_id: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 custom_configuration: Optional[pulumi.Input[str]] = None,
                 excluded_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_category: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The **aviatrix_sumologic_forwarder** resource allows the enabling and disabling of sumologic forwarder.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aviatrix as aviatrix

        # Enable sumologic forwarder
        test_sumologic_forwarder = aviatrix.AviatrixSumologicForwarder("testSumologicForwarder",
            access_id="0",
            access_key="1.2.3.4")
        ```

        ## Import

        **sumologic_forwarder** can be imported using "sumologic_forwarder", e.g.

        ```sh
         $ pulumi import aviatrix:index/aviatrixSumologicForwarder:AviatrixSumologicForwarder test sumologic_forwarder
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_id: Access ID.
        :param pulumi.Input[str] access_key: Access Key.
        :param pulumi.Input[str] custom_configuration: Custom configuration. The format should be key=value pairs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_gateways: List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        :param pulumi.Input[str] source_category: Source category. "Aviatrix_syslog" by default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AviatrixSumologicForwarderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **aviatrix_sumologic_forwarder** resource allows the enabling and disabling of sumologic forwarder.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aviatrix as aviatrix

        # Enable sumologic forwarder
        test_sumologic_forwarder = aviatrix.AviatrixSumologicForwarder("testSumologicForwarder",
            access_id="0",
            access_key="1.2.3.4")
        ```

        ## Import

        **sumologic_forwarder** can be imported using "sumologic_forwarder", e.g.

        ```sh
         $ pulumi import aviatrix:index/aviatrixSumologicForwarder:AviatrixSumologicForwarder test sumologic_forwarder
        ```

        :param str resource_name: The name of the resource.
        :param AviatrixSumologicForwarderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AviatrixSumologicForwarderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_id: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 custom_configuration: Optional[pulumi.Input[str]] = None,
                 excluded_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_category: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AviatrixSumologicForwarderArgs.__new__(AviatrixSumologicForwarderArgs)

            if access_id is None and not opts.urn:
                raise TypeError("Missing required property 'access_id'")
            __props__.__dict__["access_id"] = access_id
            if access_key is None and not opts.urn:
                raise TypeError("Missing required property 'access_key'")
            __props__.__dict__["access_key"] = None if access_key is None else pulumi.Output.secret(access_key)
            __props__.__dict__["custom_configuration"] = custom_configuration
            __props__.__dict__["excluded_gateways"] = excluded_gateways
            __props__.__dict__["source_category"] = source_category
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AviatrixSumologicForwarder, __self__).__init__(
            'aviatrix:index/aviatrixSumologicForwarder:AviatrixSumologicForwarder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_id: Optional[pulumi.Input[str]] = None,
            access_key: Optional[pulumi.Input[str]] = None,
            custom_configuration: Optional[pulumi.Input[str]] = None,
            excluded_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            source_category: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'AviatrixSumologicForwarder':
        """
        Get an existing AviatrixSumologicForwarder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_id: Access ID.
        :param pulumi.Input[str] access_key: Access Key.
        :param pulumi.Input[str] custom_configuration: Custom configuration. The format should be key=value pairs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_gateways: List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        :param pulumi.Input[str] source_category: Source category. "Aviatrix_syslog" by default.
        :param pulumi.Input[str] status: The status of sumologic forwarder.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AviatrixSumologicForwarderState.__new__(_AviatrixSumologicForwarderState)

        __props__.__dict__["access_id"] = access_id
        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["custom_configuration"] = custom_configuration
        __props__.__dict__["excluded_gateways"] = excluded_gateways
        __props__.__dict__["source_category"] = source_category
        __props__.__dict__["status"] = status
        return AviatrixSumologicForwarder(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> pulumi.Output[str]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_id")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[str]:
        """
        Access Key.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="customConfiguration")
    def custom_configuration(self) -> pulumi.Output[Optional[str]]:
        """
        Custom configuration. The format should be key=value pairs.
        """
        return pulumi.get(self, "custom_configuration")

    @property
    @pulumi.getter(name="excludedGateways")
    def excluded_gateways(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].
        """
        return pulumi.get(self, "excluded_gateways")

    @property
    @pulumi.getter(name="sourceCategory")
    def source_category(self) -> pulumi.Output[Optional[str]]:
        """
        Source category. "Aviatrix_syslog" by default.
        """
        return pulumi.get(self, "source_category")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of sumologic forwarder.
        """
        return pulumi.get(self, "status")

