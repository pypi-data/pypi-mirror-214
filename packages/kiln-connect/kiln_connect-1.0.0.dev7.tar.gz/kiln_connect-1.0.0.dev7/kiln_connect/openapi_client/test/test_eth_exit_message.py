# coding: utf-8

"""
    Kiln API Docs (dev)

    This API provides reporting staking data on various protocols as well as network wide data, staking transaction crafting features and so on. In order to use it, you should first get an API token from your Kiln dashboard (applications section). If you don't have access to our dashboard, please get in touch at hello@kiln.fi. Once you have your API token, you can set it as a bearer token in your request headers.  ### Backward Compatibility  This is an experimental specification used for development and testing, do not rely on what is here unless you know the implications.  The official Kiln API specification following backward compatible changes can be found [here](/).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@kiln.fi
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kiln_connect.openapi_client
from kiln_connect.openapi_client.models.eth_exit_message import ETHExitMessage  # noqa: E501
from kiln_connect.openapi_client.rest import ApiException

class TestETHExitMessage(unittest.TestCase):
    """ETHExitMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ETHExitMessage
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ETHExitMessage`
        """
        model = kiln_connect.openapi_client.models.eth_exit_message.ETHExitMessage()  # noqa: E501
        if include_optional :
            return ETHExitMessage(
                validator_address = '0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412', 
                gpg_public_key = 'Hubert Bonisseur de La Bath (hubert) <hubert@kiln.fi>', 
                payload = '-----BEGIN PGP MESSAGE-----

hQEMAw2MqHavoVh9AQf/f5paxAuOB25SlXqKmLea0yHJBXnwuMuByfDZbXOBe4mD
iXz4ZJakeKGLbeJ/pP3Nwtu9vnIagQKF0YVNmrenkt8bL1jo/B6r34ycGIat/+GX
1dc3GxyOBxju2q4JMe5chXdR4HXX3uU9QaynD24D5tsFgTxGM2I8JqV6BXEXgbBZ
MXqtAjBcYd+krE1w135fuEYA6Nb/89QjLPcWXk92aS1K0WC39iAZxPsa7nyuhvRg
dGXGQX+RrJ8jHAS4a074C3eAB3wCecvDk9d+FoUI3kaczUd4Ew7vUY0FX55oO60N
qZxA5VwSHTfoH4fNPINeKr4Dx1mVLNcNM3z5qWcA6NKaAQak+arCnAYhLFCg/ydh
zEcEWW1ebI4Ab3aweR17jme2I+XoWEwIBtUX7op6K7RUb3x9cBdGy4PDw6syBQJ3
LExv8qZ43F9u0hD8UizpYQZESduT3x+To1/UQ3qBILuq2yszWaXP/kav1+fafLNb
yEuHE2EoB27vDv6hSpwlDrXesGoMCc5NlAZBLnWiUcwzu2X19ASWnBSAmQ==
=9AeP
-----END PGP MESSAGE-----
', 
                updated_at = '2023-01-14T01:13:59Z'
            )
        else :
            return ETHExitMessage(
        )
        """

    def testETHExitMessage(self):
        """Test ETHExitMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
