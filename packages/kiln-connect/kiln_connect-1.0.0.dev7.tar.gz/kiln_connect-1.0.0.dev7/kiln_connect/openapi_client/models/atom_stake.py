# coding: utf-8

"""
    Kiln API Docs (dev)

    This API provides reporting staking data on various protocols as well as network wide data, staking transaction crafting features and so on. In order to use it, you should first get an API token from your Kiln dashboard (applications section). If you don't have access to our dashboard, please get in touch at hello@kiln.fi. Once you have your API token, you can set it as a bearer token in your request headers.  ### Backward Compatibility  This is an experimental specification used for development and testing, do not rely on what is here unless you know the implications.  The official Kiln API specification following backward compatible changes can be found [here](/).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@kiln.fi
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ATOMStake(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    validator_address: Optional[StrictStr] = Field(None, description="Public key of the validator")
    delegator_address: Optional[StrictStr] = Field(None, description="Public key of the delegator")
    delegated_at: Optional[datetime] = Field(None, description="Date of delegation for the stake")
    undelegated_at: Optional[datetime] = Field(None, description="Date of undelegation for the stake")
    rewards: Optional[StrictStr] = Field(None, description="Total rewards accumulated by this stake since its delegation in uATOM")
    available_rewards: Optional[StrictStr] = Field(None, description="Available rewards in uATOM that can be withdrawn by this stake")
    balance: Optional[StrictStr] = Field(None, description="Staked balance on this stake in uATOM")
    net_apy: Optional[float] = Field(None, description="Net annual percentage yield")
    updated_at: Optional[datetime] = Field(None, description="Last date this data was updated")
    __properties = ["validator_address", "delegator_address", "delegated_at", "undelegated_at", "rewards", "available_rewards", "balance", "net_apy", "updated_at"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ATOMStake:
        """Create an instance of ATOMStake from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if delegated_at (nullable) is None
        if self.delegated_at is None:
            _dict['delegated_at'] = None

        # set to None if undelegated_at (nullable) is None
        if self.undelegated_at is None:
            _dict['undelegated_at'] = None

        # set to None if rewards (nullable) is None
        if self.rewards is None:
            _dict['rewards'] = None

        # set to None if available_rewards (nullable) is None
        if self.available_rewards is None:
            _dict['available_rewards'] = None

        # set to None if balance (nullable) is None
        if self.balance is None:
            _dict['balance'] = None

        # set to None if net_apy (nullable) is None
        if self.net_apy is None:
            _dict['net_apy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ATOMStake:
        """Create an instance of ATOMStake from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ATOMStake.parse_obj(obj)

        _obj = ATOMStake.parse_obj({
            "validator_address": obj.get("validator_address"),
            "delegator_address": obj.get("delegator_address"),
            "delegated_at": obj.get("delegated_at"),
            "undelegated_at": obj.get("undelegated_at"),
            "rewards": obj.get("rewards"),
            "available_rewards": obj.get("available_rewards"),
            "balance": obj.get("balance"),
            "net_apy": obj.get("net_apy"),
            "updated_at": obj.get("updated_at")
        })
        return _obj

