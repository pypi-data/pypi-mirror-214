
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN ASTERISK COMMENT DOT LBRACE LPAR LSQB MINUS NAME NEWLINE OPTIONAL PLUS RBRACE REGEX RPAR RSQB SEMICOLON STRING VBAR\n        start : grammar start\n              | grammar\n        \n        grammar : comment\n                | import\n                | rule\n                | newline\n        \n        newline : NEWLINE newline\n                | NEWLINE\n        \n        comment : COMMENT\n        \n        import : import_statement newline\n               | import_statement\n               | from_statement newline\n               | from_statement\n        \n        import_statement : NAME import_items\n        \n        from_statement : NAME dotted_name NAME ASTERISK\n                       | NAME dotted_name NAME import_items\n        \n        dotted_name : dots name_parts\n                    | name_parts\n        \n        dots : DOT dots\n             | DOT\n        \n        name_parts : NAME DOT name_parts\n                   | NAME\n        \n        import_items : import_name "," import_items\n                     | import_name\n        \n        import_name : NAME NAME NAME\n                    | NAME\n        \n        import_items_multiline : LPAR NEWLINE import_name NEWLINE RPAR\n        \n        rule : NAME ASSIGN rhs terminator\n             | NAME ASSIGN rhs\n        \n        rhs : factor NEWLINE VBAR rhs\n            | factor VBAR rhs\n            | factor NEWLINE\n            | factor rhs\n            | factor\n        \n        factor : term OPTIONAL\n               | term ASTERISK\n               | term PLUS\n               | term MINUS term\n               | term\n        \n        term : LPAR term_group RPAR\n             | LSQB term_group RSQB\n             | LBRACE term_group RBRACE\n             | regex\n             | string\n             | name\n        \n        term_group : factor NEWLINE VBAR term_group\n                   | factor VBAR term_group\n                   | factor term_group\n                   | factor\n        \n        regex : REGEX\n        \n        string : STRING\n        \n        name : NAME\n        \n        terminator : SEMICOLON\n                   | DOT\n        '
    
_lr_action_items = {'COMMENT':([0,2,3,4,5,6,7,8,9,11,13,14,15,17,19,23,26,27,28,29,33,34,35,36,37,43,45,46,47,48,50,51,52,53,59,60,61,62,64,65,66,70,71,72,],[7,7,-3,-4,-5,-6,-9,-11,-13,-8,-10,-12,-26,-14,-24,-7,-52,-29,-34,-39,-43,-44,-45,-50,-51,-25,-28,-53,-54,-32,-33,-35,-36,-37,-26,-15,-16,-23,-31,-38,-40,-41,-42,-30,]),'NAME':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,59,60,61,62,63,64,65,66,68,70,71,72,73,],[10,10,-3,-4,-5,-6,-9,-11,-13,15,-8,-10,-12,24,26,-14,38,-24,41,-18,-20,-7,43,41,-52,-29,26,-39,26,26,26,-43,-44,-45,-50,-51,59,59,-17,-22,-19,-25,-21,-28,-53,-54,-32,26,-33,-35,-36,-37,26,26,24,-15,-16,-23,26,-31,-38,-40,26,-41,-42,-30,26,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,11,13,14,15,17,19,23,26,27,28,29,33,34,35,36,37,43,45,46,47,48,50,51,52,53,56,59,60,61,62,64,65,66,70,71,72,],[11,11,-3,-4,-5,-6,-9,11,11,11,-10,-12,-26,-14,-24,-7,-52,-29,48,-39,-43,-44,-45,-50,-51,-25,-28,-53,-54,-32,-33,-35,-36,-37,67,-26,-15,-16,-23,-31,-38,-40,-41,-42,-30,]),'$end':([1,2,3,4,5,6,7,8,9,11,12,13,14,15,17,19,23,26,27,28,29,33,34,35,36,37,43,45,46,47,48,50,51,52,53,59,60,61,62,64,65,66,70,71,72,],[0,-2,-3,-4,-5,-6,-9,-11,-13,-8,-1,-10,-12,-26,-14,-24,-7,-52,-29,-34,-39,-43,-44,-45,-50,-51,-25,-28,-53,-54,-32,-33,-35,-36,-37,-26,-15,-16,-23,-31,-38,-40,-41,-42,-30,]),'ASSIGN':([10,],[16,]),'DOT':([10,15,22,26,27,28,29,33,34,35,36,37,41,48,50,51,52,53,64,65,66,70,71,72,],[22,25,22,-52,47,-34,-39,-43,-44,-45,-50,-51,25,-32,-33,-35,-36,-37,-31,-38,-40,-41,-42,-30,]),',':([15,19,43,59,],[-26,39,-25,-26,]),'LPAR':([16,26,28,29,30,31,32,33,34,35,36,37,49,51,52,53,54,56,63,65,66,68,70,71,73,],[30,-52,30,-39,30,30,30,-43,-44,-45,-50,-51,30,-35,-36,-37,30,30,30,-38,-40,30,-41,-42,30,]),'LSQB':([16,26,28,29,30,31,32,33,34,35,36,37,49,51,52,53,54,56,63,65,66,68,70,71,73,],[31,-52,31,-39,31,31,31,-43,-44,-45,-50,-51,31,-35,-36,-37,31,31,31,-38,-40,31,-41,-42,31,]),'LBRACE':([16,26,28,29,30,31,32,33,34,35,36,37,49,51,52,53,54,56,63,65,66,68,70,71,73,],[32,-52,32,-39,32,32,32,-43,-44,-45,-50,-51,32,-35,-36,-37,32,32,32,-38,-40,32,-41,-42,32,]),'REGEX':([16,26,28,29,30,31,32,33,34,35,36,37,49,51,52,53,54,56,63,65,66,68,70,71,73,],[36,-52,36,-39,36,36,36,-43,-44,-45,-50,-51,36,-35,-36,-37,36,36,36,-38,-40,36,-41,-42,36,]),'STRING':([16,26,28,29,30,31,32,33,34,35,36,37,49,51,52,53,54,56,63,65,66,68,70,71,73,],[37,-52,37,-39,37,37,37,-43,-44,-45,-50,-51,37,-35,-36,-37,37,37,37,-38,-40,37,-41,-42,37,]),'OPTIONAL':([26,29,33,34,35,36,37,66,70,71,],[-52,51,-43,-44,-45,-50,-51,-40,-41,-42,]),'ASTERISK':([26,29,33,34,35,36,37,38,66,70,71,],[-52,52,-43,-44,-45,-50,-51,60,-40,-41,-42,]),'PLUS':([26,29,33,34,35,36,37,66,70,71,],[-52,53,-43,-44,-45,-50,-51,-40,-41,-42,]),'MINUS':([26,29,33,34,35,36,37,66,70,71,],[-52,54,-43,-44,-45,-50,-51,-40,-41,-42,]),'VBAR':([26,28,29,33,34,35,36,37,48,51,52,53,56,65,66,67,70,71,],[-52,49,-39,-43,-44,-45,-50,-51,63,-35,-36,-37,68,-38,-40,73,-41,-42,]),'SEMICOLON':([26,27,28,29,33,34,35,36,37,48,50,51,52,53,64,65,66,70,71,72,],[-52,46,-34,-39,-43,-44,-45,-50,-51,-32,-33,-35,-36,-37,-31,-38,-40,-41,-42,-30,]),'RPAR':([26,29,33,34,35,36,37,51,52,53,55,56,65,66,69,70,71,74,75,],[-52,-39,-43,-44,-45,-50,-51,-35,-36,-37,66,-49,-38,-40,-48,-41,-42,-47,-46,]),'RSQB':([26,29,33,34,35,36,37,51,52,53,56,57,65,66,69,70,71,74,75,],[-52,-39,-43,-44,-45,-50,-51,-35,-36,-37,-49,70,-38,-40,-48,-41,-42,-47,-46,]),'RBRACE':([26,29,33,34,35,36,37,51,52,53,56,58,65,66,69,70,71,74,75,],[-52,-39,-43,-44,-45,-50,-51,-35,-36,-37,-49,71,-38,-40,-48,-41,-42,-47,-46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,2,],[1,12,]),'grammar':([0,2,],[2,2,]),'comment':([0,2,],[3,3,]),'import':([0,2,],[4,4,]),'rule':([0,2,],[5,5,]),'newline':([0,2,8,9,11,],[6,6,13,14,23,]),'import_statement':([0,2,],[8,8,]),'from_statement':([0,2,],[9,9,]),'import_items':([10,38,39,],[17,61,62,]),'dotted_name':([10,],[18,]),'import_name':([10,38,39,],[19,19,19,]),'dots':([10,22,],[20,42,]),'name_parts':([10,20,25,],[21,40,44,]),'rhs':([16,28,49,63,],[27,50,64,72,]),'factor':([16,28,30,31,32,49,56,63,68,73,],[28,28,56,56,56,28,56,28,56,56,]),'term':([16,28,30,31,32,49,54,56,63,68,73,],[29,29,29,29,29,29,65,29,29,29,29,]),'regex':([16,28,30,31,32,49,54,56,63,68,73,],[33,33,33,33,33,33,33,33,33,33,33,]),'string':([16,28,30,31,32,49,54,56,63,68,73,],[34,34,34,34,34,34,34,34,34,34,34,]),'name':([16,28,30,31,32,49,54,56,63,68,73,],[35,35,35,35,35,35,35,35,35,35,35,]),'terminator':([27,],[45,]),'term_group':([30,31,32,56,68,73,],[55,57,58,69,74,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> grammar start','start',2,'p_start','parsers.py',38),
  ('start -> grammar','start',1,'p_start','parsers.py',39),
  ('grammar -> comment','grammar',1,'p_grammar','parsers.py',45),
  ('grammar -> import','grammar',1,'p_grammar','parsers.py',46),
  ('grammar -> rule','grammar',1,'p_grammar','parsers.py',47),
  ('grammar -> newline','grammar',1,'p_grammar','parsers.py',48),
  ('newline -> NEWLINE newline','newline',2,'p_newline','parsers.py',55),
  ('newline -> NEWLINE','newline',1,'p_newline','parsers.py',56),
  ('comment -> COMMENT','comment',1,'p_comment','parsers.py',62),
  ('import -> import_statement newline','import',2,'p_import','parsers.py',70),
  ('import -> import_statement','import',1,'p_import','parsers.py',71),
  ('import -> from_statement newline','import',2,'p_import','parsers.py',72),
  ('import -> from_statement','import',1,'p_import','parsers.py',73),
  ('import_statement -> NAME import_items','import_statement',2,'p_import_statement','parsers.py',79),
  ('from_statement -> NAME dotted_name NAME ASTERISK','from_statement',4,'p_from_statement','parsers.py',86),
  ('from_statement -> NAME dotted_name NAME import_items','from_statement',4,'p_from_statement','parsers.py',87),
  ('dotted_name -> dots name_parts','dotted_name',2,'p_dotted_name','parsers.py',94),
  ('dotted_name -> name_parts','dotted_name',1,'p_dotted_name','parsers.py',95),
  ('dots -> DOT dots','dots',2,'p_dotted_name_dots','parsers.py',101),
  ('dots -> DOT','dots',1,'p_dotted_name_dots','parsers.py',102),
  ('name_parts -> NAME DOT name_parts','name_parts',3,'p_dotted_name_name_parts','parsers.py',108),
  ('name_parts -> NAME','name_parts',1,'p_dotted_name_name_parts','parsers.py',109),
  ('import_items -> import_name , import_items','import_items',3,'p_import_items','parsers.py',115),
  ('import_items -> import_name','import_items',1,'p_import_items','parsers.py',116),
  ('import_name -> NAME NAME NAME','import_name',3,'p_import_name','parsers.py',125),
  ('import_name -> NAME','import_name',1,'p_import_name','parsers.py',126),
  ('import_items_multiline -> LPAR NEWLINE import_name NEWLINE RPAR','import_items_multiline',5,'p_import_items_multiline','parsers.py',137),
  ('rule -> NAME ASSIGN rhs terminator','rule',4,'p_rule','parsers.py',144),
  ('rule -> NAME ASSIGN rhs','rule',3,'p_rule','parsers.py',145),
  ('rhs -> factor NEWLINE VBAR rhs','rhs',4,'p_rhs','parsers.py',151),
  ('rhs -> factor VBAR rhs','rhs',3,'p_rhs','parsers.py',152),
  ('rhs -> factor NEWLINE','rhs',2,'p_rhs','parsers.py',153),
  ('rhs -> factor rhs','rhs',2,'p_rhs','parsers.py',154),
  ('rhs -> factor','rhs',1,'p_rhs','parsers.py',155),
  ('factor -> term OPTIONAL','factor',2,'p_factor','parsers.py',173),
  ('factor -> term ASTERISK','factor',2,'p_factor','parsers.py',174),
  ('factor -> term PLUS','factor',2,'p_factor','parsers.py',175),
  ('factor -> term MINUS term','factor',3,'p_factor','parsers.py',176),
  ('factor -> term','factor',1,'p_factor','parsers.py',177),
  ('term -> LPAR term_group RPAR','term',3,'p_term','parsers.py',188),
  ('term -> LSQB term_group RSQB','term',3,'p_term','parsers.py',189),
  ('term -> LBRACE term_group RBRACE','term',3,'p_term','parsers.py',190),
  ('term -> regex','term',1,'p_term','parsers.py',191),
  ('term -> string','term',1,'p_term','parsers.py',192),
  ('term -> name','term',1,'p_term','parsers.py',193),
  ('term_group -> factor NEWLINE VBAR term_group','term_group',4,'p_term_group','parsers.py',202),
  ('term_group -> factor VBAR term_group','term_group',3,'p_term_group','parsers.py',203),
  ('term_group -> factor term_group','term_group',2,'p_term_group','parsers.py',204),
  ('term_group -> factor','term_group',1,'p_term_group','parsers.py',205),
  ('regex -> REGEX','regex',1,'p_regex','parsers.py',218),
  ('string -> STRING','string',1,'p_string','parsers.py',224),
  ('name -> NAME','name',1,'p_name','parsers.py',230),
  ('terminator -> SEMICOLON','terminator',1,'p_terminator','parsers.py',236),
  ('terminator -> DOT','terminator',1,'p_terminator','parsers.py',237),
]
