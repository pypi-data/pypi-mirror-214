# Generated from openpulseParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,112,844,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,1,0,5,0,134,8,0,10,0,12,0,137,9,0,1,1,1,1,5,1,141,8,1,10,1,12,
        1,144,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,168,8,1,3,1,170,8,1,1,2,1,
        2,3,2,174,8,2,1,2,1,2,3,2,178,8,2,1,2,1,2,3,2,182,8,2,1,2,1,2,3,
        2,186,8,2,1,2,1,2,3,2,190,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,200,8,2,1,2,1,2,1,2,3,2,205,8,2,1,3,3,3,208,8,3,1,3,5,3,211,8,
        3,10,3,12,3,214,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,5,5,224,8,5,
        10,5,12,5,227,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,3,5,257,8,5,3,5,259,8,5,1,6,1,6,3,6,263,8,6,1,7,1,7,5,7,267,8,
        7,10,7,12,7,270,9,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,3,9,279,8,9,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        3,15,308,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
        319,8,16,1,17,1,17,1,17,3,17,324,8,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,3,19,336,8,19,1,19,1,19,1,20,1,20,3,20,342,
        8,20,1,20,1,20,1,21,1,21,1,21,3,21,349,8,21,1,21,1,21,1,22,5,22,
        354,8,22,10,22,12,22,357,9,22,1,22,1,22,1,22,3,22,362,8,22,1,22,
        3,22,365,8,22,1,22,3,22,368,8,22,1,22,1,22,1,22,1,22,5,22,374,8,
        22,10,22,12,22,377,9,22,1,22,1,22,1,22,3,22,382,8,22,1,22,3,22,385,
        8,22,1,22,3,22,388,8,22,1,22,3,22,391,8,22,1,22,3,22,394,8,22,1,
        23,1,23,1,23,3,23,399,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,25,1,25,1,26,1,26,3,26,415,8,26,1,26,1,26,1,26,3,
        26,420,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,
        28,1,28,3,28,434,8,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,442,8,29,
        1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,454,8,31,
        1,31,1,31,3,31,458,8,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,466,8,
        32,1,32,1,32,3,32,470,8,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,478,
        8,33,1,33,3,33,481,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,
        490,8,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,3,36,500,8,36,1,
        36,1,36,1,37,1,37,1,37,1,37,3,37,508,8,37,1,37,3,37,511,8,37,1,37,
        1,37,3,37,515,8,37,1,37,1,37,3,37,519,8,37,1,37,1,37,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,532,8,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,546,8,38,1,38,1,
        38,3,38,550,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,
        38,587,8,38,10,38,12,38,590,9,38,1,39,1,39,1,39,5,39,595,8,39,10,
        39,12,39,598,9,39,1,40,1,40,1,40,3,40,603,8,40,1,41,1,41,1,41,1,
        42,3,42,609,8,42,1,42,1,42,3,42,613,8,42,1,42,1,42,3,42,617,8,42,
        1,43,1,43,1,43,1,43,5,43,623,8,43,10,43,12,43,626,9,43,1,43,3,43,
        629,8,43,1,43,1,43,1,44,1,44,1,44,3,44,636,8,44,1,44,1,44,1,44,3,
        44,641,8,44,5,44,643,8,44,10,44,12,44,646,9,44,1,44,3,44,649,8,44,
        1,44,1,44,1,45,1,45,1,45,1,45,3,45,657,8,45,1,45,1,45,1,45,3,45,
        662,8,45,5,45,664,8,45,10,45,12,45,667,9,45,1,45,3,45,670,8,45,3,
        45,672,8,45,1,45,1,45,1,46,1,46,5,46,678,8,46,10,46,12,46,681,9,
        46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,3,48,697,8,48,3,48,699,8,48,1,48,1,48,1,49,1,49,3,49,705,
        8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,723,8,51,1,51,1,51,1,52,1,52,1,52,1,52,
        1,53,1,53,1,54,1,54,3,54,735,8,54,1,55,1,55,1,56,1,56,3,56,741,8,
        56,1,57,1,57,1,57,1,57,3,57,747,8,57,3,57,749,8,57,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,3,58,760,8,58,1,58,1,58,1,58,3,58,
        765,8,58,1,59,1,59,1,59,5,59,770,8,59,10,59,12,59,773,9,59,1,59,
        3,59,776,8,59,1,60,1,60,1,60,5,60,781,8,60,10,60,12,60,784,9,60,
        1,60,3,60,787,8,60,1,61,1,61,1,61,5,61,792,8,61,10,61,12,61,795,
        9,61,1,61,3,61,798,8,61,1,62,1,62,1,62,5,62,803,8,62,10,62,12,62,
        806,9,62,1,62,3,62,809,8,62,1,63,1,63,1,63,5,63,814,8,63,10,63,12,
        63,817,9,63,1,63,3,63,820,8,63,1,64,1,64,1,64,5,64,825,8,64,10,64,
        12,64,828,9,64,1,64,3,64,831,8,64,1,65,1,65,1,65,5,65,836,8,65,10,
        65,12,65,839,9,65,1,65,3,65,842,8,65,1,65,0,1,76,66,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        0,11,1,0,25,26,2,0,30,30,32,32,2,0,66,66,84,84,2,0,70,70,81,82,2,
        0,55,55,88,97,2,0,71,71,73,74,2,0,68,68,70,70,1,0,47,48,1,0,28,29,
        2,0,51,53,93,93,1,0,93,94,952,0,135,1,0,0,0,2,169,1,0,0,0,4,204,
        1,0,0,0,6,207,1,0,0,0,8,217,1,0,0,0,10,258,1,0,0,0,12,260,1,0,0,
        0,14,264,1,0,0,0,16,273,1,0,0,0,18,278,1,0,0,0,20,280,1,0,0,0,22,
        284,1,0,0,0,24,288,1,0,0,0,26,291,1,0,0,0,28,294,1,0,0,0,30,297,
        1,0,0,0,32,311,1,0,0,0,34,320,1,0,0,0,36,327,1,0,0,0,38,333,1,0,
        0,0,40,339,1,0,0,0,42,345,1,0,0,0,44,393,1,0,0,0,46,395,1,0,0,0,
        48,402,1,0,0,0,50,406,1,0,0,0,52,414,1,0,0,0,54,423,1,0,0,0,56,430,
        1,0,0,0,58,438,1,0,0,0,60,445,1,0,0,0,62,449,1,0,0,0,64,461,1,0,
        0,0,66,473,1,0,0,0,68,485,1,0,0,0,70,493,1,0,0,0,72,496,1,0,0,0,
        74,503,1,0,0,0,76,549,1,0,0,0,78,591,1,0,0,0,80,602,1,0,0,0,82,604,
        1,0,0,0,84,608,1,0,0,0,86,618,1,0,0,0,88,632,1,0,0,0,90,652,1,0,
        0,0,92,675,1,0,0,0,94,682,1,0,0,0,96,698,1,0,0,0,98,702,1,0,0,0,
        100,706,1,0,0,0,102,713,1,0,0,0,104,726,1,0,0,0,106,730,1,0,0,0,
        108,734,1,0,0,0,110,736,1,0,0,0,112,740,1,0,0,0,114,748,1,0,0,0,
        116,764,1,0,0,0,118,766,1,0,0,0,120,777,1,0,0,0,122,788,1,0,0,0,
        124,799,1,0,0,0,126,810,1,0,0,0,128,821,1,0,0,0,130,832,1,0,0,0,
        132,134,3,2,1,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,
        135,136,1,0,0,0,136,1,1,0,0,0,137,135,1,0,0,0,138,170,3,16,8,0,139,
        141,3,12,6,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,
        143,1,0,0,0,143,167,1,0,0,0,144,142,1,0,0,0,145,168,3,50,25,0,146,
        168,3,68,34,0,147,168,3,38,19,0,148,168,3,40,20,0,149,168,3,24,12,
        0,150,168,3,52,26,0,151,168,3,54,27,0,152,168,3,26,13,0,153,168,
        3,62,31,0,154,168,3,42,21,0,155,168,3,28,14,0,156,168,3,70,35,0,
        157,168,3,64,32,0,158,168,3,30,15,0,159,168,3,44,22,0,160,168,3,
        32,16,0,161,168,3,22,11,0,162,168,3,56,28,0,163,168,3,60,30,0,164,
        168,3,48,24,0,165,168,3,34,17,0,166,168,3,36,18,0,167,145,1,0,0,
        0,167,146,1,0,0,0,167,147,1,0,0,0,167,148,1,0,0,0,167,149,1,0,0,
        0,167,150,1,0,0,0,167,151,1,0,0,0,167,152,1,0,0,0,167,153,1,0,0,
        0,167,154,1,0,0,0,167,155,1,0,0,0,167,156,1,0,0,0,167,157,1,0,0,
        0,167,158,1,0,0,0,167,159,1,0,0,0,167,160,1,0,0,0,167,161,1,0,0,
        0,167,162,1,0,0,0,167,163,1,0,0,0,167,164,1,0,0,0,167,165,1,0,0,
        0,167,166,1,0,0,0,168,170,1,0,0,0,169,138,1,0,0,0,169,142,1,0,0,
        0,170,3,1,0,0,0,171,173,5,34,0,0,172,174,3,104,52,0,173,172,1,0,
        0,0,173,174,1,0,0,0,174,205,1,0,0,0,175,177,5,35,0,0,176,178,3,104,
        52,0,177,176,1,0,0,0,177,178,1,0,0,0,178,205,1,0,0,0,179,181,5,36,
        0,0,180,182,3,104,52,0,181,180,1,0,0,0,181,182,1,0,0,0,182,205,1,
        0,0,0,183,185,5,37,0,0,184,186,3,104,52,0,185,184,1,0,0,0,185,186,
        1,0,0,0,186,205,1,0,0,0,187,189,5,38,0,0,188,190,3,104,52,0,189,
        188,1,0,0,0,189,190,1,0,0,0,190,205,1,0,0,0,191,205,5,33,0,0,192,
        205,5,42,0,0,193,205,5,43,0,0,194,199,5,39,0,0,195,196,5,56,0,0,
        196,197,3,4,2,0,197,198,5,57,0,0,198,200,1,0,0,0,199,195,1,0,0,0,
        199,200,1,0,0,0,200,205,1,0,0,0,201,205,5,1,0,0,202,205,5,2,0,0,
        203,205,5,3,0,0,204,171,1,0,0,0,204,175,1,0,0,0,204,179,1,0,0,0,
        204,183,1,0,0,0,204,187,1,0,0,0,204,191,1,0,0,0,204,192,1,0,0,0,
        204,193,1,0,0,0,204,194,1,0,0,0,204,201,1,0,0,0,204,202,1,0,0,0,
        204,203,1,0,0,0,205,5,1,0,0,0,206,208,3,8,4,0,207,206,1,0,0,0,207,
        208,1,0,0,0,208,212,1,0,0,0,209,211,3,10,5,0,210,209,1,0,0,0,211,
        214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,
        212,1,0,0,0,215,216,5,0,0,1,216,7,1,0,0,0,217,218,5,6,0,0,218,219,
        5,104,0,0,219,220,5,63,0,0,220,9,1,0,0,0,221,259,3,16,8,0,222,224,
        3,12,6,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,
        1,0,0,0,226,256,1,0,0,0,227,225,1,0,0,0,228,257,3,50,25,0,229,257,
        3,68,34,0,230,257,3,38,19,0,231,257,3,40,20,0,232,257,3,24,12,0,
        233,257,3,72,36,0,234,257,3,20,10,0,235,257,3,52,26,0,236,257,3,
        54,27,0,237,257,3,26,13,0,238,257,3,62,31,0,239,257,3,74,37,0,240,
        257,3,42,21,0,241,257,3,28,14,0,242,257,3,70,35,0,243,257,3,64,32,
        0,244,257,3,30,15,0,245,257,3,44,22,0,246,257,3,66,33,0,247,257,
        3,32,16,0,248,257,3,22,11,0,249,257,3,56,28,0,250,257,3,46,23,0,
        251,257,3,58,29,0,252,257,3,60,30,0,253,257,3,48,24,0,254,257,3,
        34,17,0,255,257,3,36,18,0,256,228,1,0,0,0,256,229,1,0,0,0,256,230,
        1,0,0,0,256,231,1,0,0,0,256,232,1,0,0,0,256,233,1,0,0,0,256,234,
        1,0,0,0,256,235,1,0,0,0,256,236,1,0,0,0,256,237,1,0,0,0,256,238,
        1,0,0,0,256,239,1,0,0,0,256,240,1,0,0,0,256,241,1,0,0,0,256,242,
        1,0,0,0,256,243,1,0,0,0,256,244,1,0,0,0,256,245,1,0,0,0,256,246,
        1,0,0,0,256,247,1,0,0,0,256,248,1,0,0,0,256,249,1,0,0,0,256,250,
        1,0,0,0,256,251,1,0,0,0,256,252,1,0,0,0,256,253,1,0,0,0,256,254,
        1,0,0,0,256,255,1,0,0,0,257,259,1,0,0,0,258,221,1,0,0,0,258,225,
        1,0,0,0,259,11,1,0,0,0,260,262,5,24,0,0,261,263,5,107,0,0,262,261,
        1,0,0,0,262,263,1,0,0,0,263,13,1,0,0,0,264,268,5,58,0,0,265,267,
        3,10,5,0,266,265,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,
        1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,272,5,59,0,0,272,15,
        1,0,0,0,273,274,5,23,0,0,274,275,5,107,0,0,275,17,1,0,0,0,276,279,
        3,10,5,0,277,279,3,14,7,0,278,276,1,0,0,0,278,277,1,0,0,0,279,19,
        1,0,0,0,280,281,5,8,0,0,281,282,5,98,0,0,282,283,5,63,0,0,283,21,
        1,0,0,0,284,285,5,7,0,0,285,286,5,98,0,0,286,287,5,63,0,0,287,23,
        1,0,0,0,288,289,5,14,0,0,289,290,5,63,0,0,290,25,1,0,0,0,291,292,
        5,15,0,0,292,293,5,63,0,0,293,27,1,0,0,0,294,295,5,18,0,0,295,296,
        5,63,0,0,296,29,1,0,0,0,297,298,5,20,0,0,298,299,3,4,2,0,299,300,
        5,93,0,0,300,307,5,22,0,0,301,308,3,86,43,0,302,303,5,56,0,0,303,
        304,3,84,42,0,304,305,5,57,0,0,305,308,1,0,0,0,306,308,3,76,38,0,
        307,301,1,0,0,0,307,302,1,0,0,0,307,306,1,0,0,0,308,309,1,0,0,0,
        309,310,3,18,9,0,310,31,1,0,0,0,311,312,5,16,0,0,312,313,5,60,0,
        0,313,314,3,76,38,0,314,315,5,61,0,0,315,318,3,18,9,0,316,317,5,
        17,0,0,317,319,3,18,9,0,318,316,1,0,0,0,318,319,1,0,0,0,319,33,1,
        0,0,0,320,323,5,19,0,0,321,324,3,76,38,0,322,324,3,82,41,0,323,321,
        1,0,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,326,
        5,63,0,0,326,35,1,0,0,0,327,328,5,21,0,0,328,329,5,60,0,0,329,330,
        3,76,38,0,330,331,5,61,0,0,331,332,3,18,9,0,332,37,1,0,0,0,333,335,
        5,54,0,0,334,336,3,128,64,0,335,334,1,0,0,0,335,336,1,0,0,0,336,
        337,1,0,0,0,337,338,5,63,0,0,338,39,1,0,0,0,339,341,5,12,0,0,340,
        342,3,104,52,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,
        344,3,14,7,0,344,41,1,0,0,0,345,346,5,51,0,0,346,348,3,104,52,0,
        347,349,3,128,64,0,348,347,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,
        0,350,351,5,63,0,0,351,43,1,0,0,0,352,354,3,96,48,0,353,352,1,0,
        0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,358,1,0,
        0,0,357,355,1,0,0,0,358,364,5,93,0,0,359,361,5,60,0,0,360,362,3,
        124,62,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,365,
        5,61,0,0,364,359,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,368,
        3,104,52,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,
        3,128,64,0,370,371,5,63,0,0,371,394,1,0,0,0,372,374,3,96,48,0,373,
        372,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,
        378,1,0,0,0,377,375,1,0,0,0,378,384,5,44,0,0,379,381,5,60,0,0,380,
        382,3,124,62,0,381,380,1,0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,
        385,5,61,0,0,384,379,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,
        388,3,104,52,0,387,386,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,
        391,3,128,64,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,
        394,5,63,0,0,393,355,1,0,0,0,393,375,1,0,0,0,394,45,1,0,0,0,395,
        398,3,82,41,0,396,397,5,67,0,0,397,399,3,92,46,0,398,396,1,0,0,0,
        398,399,1,0,0,0,399,400,1,0,0,0,400,401,5,63,0,0,401,47,1,0,0,0,
        402,403,5,52,0,0,403,404,3,112,56,0,404,405,5,63,0,0,405,49,1,0,
        0,0,406,407,5,13,0,0,407,408,5,93,0,0,408,409,5,66,0,0,409,410,3,
        78,39,0,410,411,5,63,0,0,411,51,1,0,0,0,412,415,3,4,2,0,413,415,
        3,100,50,0,414,412,1,0,0,0,414,413,1,0,0,0,415,416,1,0,0,0,416,419,
        5,93,0,0,417,418,5,66,0,0,418,420,3,80,40,0,419,417,1,0,0,0,419,
        420,1,0,0,0,420,421,1,0,0,0,421,422,5,63,0,0,422,53,1,0,0,0,423,
        424,5,27,0,0,424,425,3,4,2,0,425,426,5,93,0,0,426,427,5,66,0,0,427,
        428,3,80,40,0,428,429,5,63,0,0,429,55,1,0,0,0,430,433,7,0,0,0,431,
        434,3,4,2,0,432,434,3,100,50,0,433,431,1,0,0,0,433,432,1,0,0,0,434,
        435,1,0,0,0,435,436,5,93,0,0,436,437,5,63,0,0,437,57,1,0,0,0,438,
        439,7,1,0,0,439,441,5,93,0,0,440,442,3,104,52,0,441,440,1,0,0,0,
        441,442,1,0,0,0,442,443,1,0,0,0,443,444,5,63,0,0,444,59,1,0,0,0,
        445,446,3,98,49,0,446,447,5,93,0,0,447,448,5,63,0,0,448,61,1,0,0,
        0,449,450,5,9,0,0,450,451,5,93,0,0,451,453,5,60,0,0,452,454,3,118,
        59,0,453,452,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,457,5,61,
        0,0,456,458,3,94,47,0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,
        0,0,0,459,460,3,14,7,0,460,63,1,0,0,0,461,462,5,11,0,0,462,463,5,
        93,0,0,463,465,5,60,0,0,464,466,3,130,65,0,465,464,1,0,0,0,465,466,
        1,0,0,0,466,467,1,0,0,0,467,469,5,61,0,0,468,470,3,94,47,0,469,468,
        1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,5,63,0,0,472,65,
        1,0,0,0,473,474,5,10,0,0,474,480,5,93,0,0,475,477,5,60,0,0,476,478,
        3,126,63,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,481,
        5,61,0,0,480,475,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,483,
        3,126,63,0,483,484,3,14,7,0,484,67,1,0,0,0,485,486,3,92,46,0,486,
        489,7,2,0,0,487,490,3,76,38,0,488,490,3,82,41,0,489,487,1,0,0,0,
        489,488,1,0,0,0,490,491,1,0,0,0,491,492,5,63,0,0,492,69,1,0,0,0,
        493,494,3,76,38,0,494,495,5,63,0,0,495,71,1,0,0,0,496,497,5,4,0,
        0,497,499,5,58,0,0,498,500,5,112,0,0,499,498,1,0,0,0,499,500,1,0,
        0,0,500,501,1,0,0,0,501,502,5,59,0,0,502,73,1,0,0,0,503,504,5,5,
        0,0,504,510,3,106,53,0,505,507,5,60,0,0,506,508,3,120,60,0,507,506,
        1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,511,5,61,0,0,510,505,
        1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,514,3,122,61,0,513,515,
        3,94,47,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,518,
        5,58,0,0,517,519,5,112,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,520,
        1,0,0,0,520,521,5,59,0,0,521,75,1,0,0,0,522,523,6,38,-1,0,523,524,
        5,60,0,0,524,525,3,76,38,0,525,526,5,61,0,0,526,550,1,0,0,0,527,
        528,7,3,0,0,528,550,3,76,38,15,529,532,3,4,2,0,530,532,3,100,50,
        0,531,529,1,0,0,0,531,530,1,0,0,0,532,533,1,0,0,0,533,534,5,60,0,
        0,534,535,3,76,38,0,535,536,5,61,0,0,536,550,1,0,0,0,537,538,5,50,
        0,0,538,539,5,60,0,0,539,540,3,14,7,0,540,541,5,61,0,0,541,550,1,
        0,0,0,542,543,5,93,0,0,543,545,5,60,0,0,544,546,3,124,62,0,545,544,
        1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,550,5,61,0,0,548,550,
        7,4,0,0,549,522,1,0,0,0,549,527,1,0,0,0,549,531,1,0,0,0,549,537,
        1,0,0,0,549,542,1,0,0,0,549,548,1,0,0,0,550,588,1,0,0,0,551,552,
        10,16,0,0,552,553,5,72,0,0,553,587,3,76,38,16,554,555,10,14,0,0,
        555,556,7,5,0,0,556,587,3,76,38,15,557,558,10,13,0,0,558,559,7,6,
        0,0,559,587,3,76,38,14,560,561,10,12,0,0,561,562,5,86,0,0,562,587,
        3,76,38,13,563,564,10,11,0,0,564,565,5,85,0,0,565,587,3,76,38,12,
        566,567,10,10,0,0,567,568,5,83,0,0,568,587,3,76,38,11,569,570,10,
        9,0,0,570,571,5,77,0,0,571,587,3,76,38,10,572,573,10,8,0,0,573,574,
        5,79,0,0,574,587,3,76,38,9,575,576,10,7,0,0,576,577,5,75,0,0,577,
        587,3,76,38,8,578,579,10,6,0,0,579,580,5,78,0,0,580,587,3,76,38,
        7,581,582,10,5,0,0,582,583,5,76,0,0,583,587,3,76,38,6,584,585,10,
        17,0,0,585,587,3,90,45,0,586,551,1,0,0,0,586,554,1,0,0,0,586,557,
        1,0,0,0,586,560,1,0,0,0,586,563,1,0,0,0,586,566,1,0,0,0,586,569,
        1,0,0,0,586,572,1,0,0,0,586,575,1,0,0,0,586,578,1,0,0,0,586,581,
        1,0,0,0,586,584,1,0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,588,589,
        1,0,0,0,589,77,1,0,0,0,590,588,1,0,0,0,591,596,3,76,38,0,592,593,
        5,69,0,0,593,595,3,76,38,0,594,592,1,0,0,0,595,598,1,0,0,0,596,594,
        1,0,0,0,596,597,1,0,0,0,597,79,1,0,0,0,598,596,1,0,0,0,599,603,3,
        88,44,0,600,603,3,76,38,0,601,603,3,82,41,0,602,599,1,0,0,0,602,
        600,1,0,0,0,602,601,1,0,0,0,603,81,1,0,0,0,604,605,5,53,0,0,605,
        606,3,112,56,0,606,83,1,0,0,0,607,609,3,76,38,0,608,607,1,0,0,0,
        608,609,1,0,0,0,609,610,1,0,0,0,610,612,5,62,0,0,611,613,3,76,38,
        0,612,611,1,0,0,0,612,613,1,0,0,0,613,616,1,0,0,0,614,615,5,62,0,
        0,615,617,3,76,38,0,616,614,1,0,0,0,616,617,1,0,0,0,617,85,1,0,0,
        0,618,619,5,58,0,0,619,624,3,76,38,0,620,621,5,65,0,0,621,623,3,
        76,38,0,622,620,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,
        1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,627,629,5,65,0,0,628,627,
        1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,631,5,59,0,0,631,87,
        1,0,0,0,632,635,5,58,0,0,633,636,3,76,38,0,634,636,3,88,44,0,635,
        633,1,0,0,0,635,634,1,0,0,0,636,644,1,0,0,0,637,640,5,65,0,0,638,
        641,3,76,38,0,639,641,3,88,44,0,640,638,1,0,0,0,640,639,1,0,0,0,
        641,643,1,0,0,0,642,637,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,
        644,645,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,647,649,5,65,0,0,
        648,647,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,651,5,59,0,0,
        651,89,1,0,0,0,652,671,5,56,0,0,653,672,3,86,43,0,654,657,3,76,38,
        0,655,657,3,84,42,0,656,654,1,0,0,0,656,655,1,0,0,0,657,665,1,0,
        0,0,658,661,5,65,0,0,659,662,3,76,38,0,660,662,3,84,42,0,661,659,
        1,0,0,0,661,660,1,0,0,0,662,664,1,0,0,0,663,658,1,0,0,0,664,667,
        1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,669,1,0,0,0,667,665,
        1,0,0,0,668,670,5,65,0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,672,
        1,0,0,0,671,653,1,0,0,0,671,656,1,0,0,0,672,673,1,0,0,0,673,674,
        5,57,0,0,674,91,1,0,0,0,675,679,5,93,0,0,676,678,3,90,45,0,677,676,
        1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,93,1,
        0,0,0,681,679,1,0,0,0,682,683,5,67,0,0,683,684,3,4,2,0,684,95,1,
        0,0,0,685,699,5,45,0,0,686,687,5,46,0,0,687,688,5,60,0,0,688,689,
        3,76,38,0,689,690,5,61,0,0,690,699,1,0,0,0,691,696,7,7,0,0,692,693,
        5,60,0,0,693,694,3,76,38,0,694,695,5,61,0,0,695,697,1,0,0,0,696,
        692,1,0,0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,685,1,0,0,0,698,
        686,1,0,0,0,698,691,1,0,0,0,699,700,1,0,0,0,700,701,5,80,0,0,701,
        97,1,0,0,0,702,704,5,31,0,0,703,705,3,104,52,0,704,703,1,0,0,0,704,
        705,1,0,0,0,705,99,1,0,0,0,706,707,5,40,0,0,707,708,5,56,0,0,708,
        709,3,4,2,0,709,710,5,65,0,0,710,711,3,124,62,0,711,712,5,57,0,0,
        712,101,1,0,0,0,713,714,7,8,0,0,714,715,5,40,0,0,715,716,5,56,0,
        0,716,717,3,4,2,0,717,722,5,65,0,0,718,723,3,124,62,0,719,720,5,
        49,0,0,720,721,5,66,0,0,721,723,3,76,38,0,722,718,1,0,0,0,722,719,
        1,0,0,0,723,724,1,0,0,0,724,725,5,57,0,0,725,103,1,0,0,0,726,727,
        5,56,0,0,727,728,3,76,38,0,728,729,5,57,0,0,729,105,1,0,0,0,730,
        731,7,9,0,0,731,107,1,0,0,0,732,735,3,76,38,0,733,735,3,116,58,0,
        734,732,1,0,0,0,734,733,1,0,0,0,735,109,1,0,0,0,736,737,7,10,0,0,
        737,111,1,0,0,0,738,741,3,92,46,0,739,741,5,94,0,0,740,738,1,0,0,
        0,740,739,1,0,0,0,741,113,1,0,0,0,742,749,3,4,2,0,743,749,3,102,
        51,0,744,746,5,32,0,0,745,747,3,104,52,0,746,745,1,0,0,0,746,747,
        1,0,0,0,747,749,1,0,0,0,748,742,1,0,0,0,748,743,1,0,0,0,748,744,
        1,0,0,0,749,115,1,0,0,0,750,751,3,4,2,0,751,752,5,93,0,0,752,765,
        1,0,0,0,753,754,3,98,49,0,754,755,5,93,0,0,755,765,1,0,0,0,756,757,
        7,1,0,0,757,759,5,93,0,0,758,760,3,104,52,0,759,758,1,0,0,0,759,
        760,1,0,0,0,760,765,1,0,0,0,761,762,3,102,51,0,762,763,5,93,0,0,
        763,765,1,0,0,0,764,750,1,0,0,0,764,753,1,0,0,0,764,756,1,0,0,0,
        764,761,1,0,0,0,765,117,1,0,0,0,766,771,3,116,58,0,767,768,5,65,
        0,0,768,770,3,116,58,0,769,767,1,0,0,0,770,773,1,0,0,0,771,769,1,
        0,0,0,771,772,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,774,776,5,
        65,0,0,775,774,1,0,0,0,775,776,1,0,0,0,776,119,1,0,0,0,777,782,3,
        108,54,0,778,779,5,65,0,0,779,781,3,108,54,0,780,778,1,0,0,0,781,
        784,1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,783,786,1,0,0,0,784,
        782,1,0,0,0,785,787,5,65,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,
        121,1,0,0,0,788,793,3,110,55,0,789,790,5,65,0,0,790,792,3,110,55,
        0,791,789,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,793,794,1,0,0,
        0,794,797,1,0,0,0,795,793,1,0,0,0,796,798,5,65,0,0,797,796,1,0,0,
        0,797,798,1,0,0,0,798,123,1,0,0,0,799,804,3,76,38,0,800,801,5,65,
        0,0,801,803,3,76,38,0,802,800,1,0,0,0,803,806,1,0,0,0,804,802,1,
        0,0,0,804,805,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,807,809,5,
        65,0,0,808,807,1,0,0,0,808,809,1,0,0,0,809,125,1,0,0,0,810,815,5,
        93,0,0,811,812,5,65,0,0,812,814,5,93,0,0,813,811,1,0,0,0,814,817,
        1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,819,1,0,0,0,817,815,
        1,0,0,0,818,820,5,65,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,127,
        1,0,0,0,821,826,3,112,56,0,822,823,5,65,0,0,823,825,3,112,56,0,824,
        822,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,0,827,
        830,1,0,0,0,828,826,1,0,0,0,829,831,5,65,0,0,830,829,1,0,0,0,830,
        831,1,0,0,0,831,129,1,0,0,0,832,837,3,114,57,0,833,834,5,65,0,0,
        834,836,3,114,57,0,835,833,1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,
        0,837,838,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,840,842,5,65,0,
        0,841,840,1,0,0,0,841,842,1,0,0,0,842,131,1,0,0,0,98,135,142,167,
        169,173,177,181,185,189,199,204,207,212,225,256,258,262,268,278,
        307,318,323,335,341,348,355,361,364,367,375,381,384,387,390,393,
        398,414,419,433,441,453,457,465,469,477,480,489,499,507,510,514,
        518,531,545,549,586,588,596,602,608,612,616,624,628,635,640,644,
        648,656,661,665,669,671,679,696,698,704,722,734,740,746,748,759,
        764,771,775,782,786,793,797,804,808,815,819,826,830,837,841
    ]

class openpulseParser ( Parser ):

    grammarFileName = "openpulseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'waveform'", "'port'", "'frame'", "'cal'", 
                     "'defcal'", "'OPENQASM'", "'include'", "'defcalgrammar'", 
                     "'def'", "'gate'", "'extern'", "'box'", "'let'", "'break'", 
                     "'continue'", "'if'", "'else'", "'end'", "'return'", 
                     "'for'", "'while'", "'in'", "<INVALID>", "<INVALID>", 
                     "'input'", "'output'", "'const'", "'readonly'", "'mutable'", 
                     "'qreg'", "'qubit'", "'creg'", "'bool'", "'bit'", "'int'", 
                     "'uint'", "'float'", "'angle'", "'complex'", "'array'", 
                     "'void'", "'duration'", "'stretch'", "'gphase'", "'inv'", 
                     "'pow'", "'ctrl'", "'negctrl'", "'#dim'", "'durationof'", 
                     "'delay'", "'reset'", "'measure'", "'barrier'", "<INVALID>", 
                     "'['", "']'", "'{'", "'}'", "'('", "')'", "':'", "';'", 
                     "'.'", "','", "'='", "'->'", "'+'", "'++'", "'-'", 
                     "'*'", "'**'", "'/'", "'%'", "'|'", "'||'", "'&'", 
                     "'&&'", "'^'", "'@'", "'~'", "'!'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'im'" ]

    symbolicNames = [ "<INVALID>", "WAVEFORM", "PORT", "FRAME", "CAL", "DEFCAL", 
                      "OPENQASM", "INCLUDE", "DEFCALGRAMMAR", "DEF", "GATE", 
                      "EXTERN", "BOX", "LET", "BREAK", "CONTINUE", "IF", 
                      "ELSE", "END", "RETURN", "FOR", "WHILE", "IN", "PRAGMA", 
                      "AnnotationKeyword", "INPUT", "OUTPUT", "CONST", "READONLY", 
                      "MUTABLE", "QREG", "QUBIT", "CREG", "BOOL", "BIT", 
                      "INT", "UINT", "FLOAT", "ANGLE", "COMPLEX", "ARRAY", 
                      "VOID", "DURATION", "STRETCH", "GPHASE", "INV", "POW", 
                      "CTRL", "NEGCTRL", "DIM", "DURATIONOF", "DELAY", "RESET", 
                      "MEASURE", "BARRIER", "BooleanLiteral", "LBRACKET", 
                      "RBRACKET", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
                      "COLON", "SEMICOLON", "DOT", "COMMA", "EQUALS", "ARROW", 
                      "PLUS", "DOUBLE_PLUS", "MINUS", "ASTERISK", "DOUBLE_ASTERISK", 
                      "SLASH", "PERCENT", "PIPE", "DOUBLE_PIPE", "AMPERSAND", 
                      "DOUBLE_AMPERSAND", "CARET", "AT", "TILDE", "EXCLAMATION_POINT", 
                      "EqualityOperator", "CompoundAssignmentOperator", 
                      "ComparisonOperator", "BitshiftOperator", "IMAG", 
                      "ImaginaryLiteral", "BinaryIntegerLiteral", "OctalIntegerLiteral", 
                      "DecimalIntegerLiteral", "HexIntegerLiteral", "Identifier", 
                      "HardwareQubit", "FloatLiteral", "TimingLiteral", 
                      "BitstringLiteral", "StringLiteral", "Whitespace", 
                      "Newline", "LineComment", "BlockComment", "VERSION_IDENTIFER_WHITESPACE", 
                      "VersionSpecifier", "EAT_INITIAL_SPACE", "EAT_LINE_END", 
                      "RemainingLineContent", "CAL_PRELUDE_WHITESPACE", 
                      "CAL_PRELUDE_COMMENT", "DEFCAL_PRELUDE_WHITESPACE", 
                      "DEFCAL_PRELUDE_COMMENT", "CalibrationBlock" ]

    RULE_calibrationBlock = 0
    RULE_openpulseStatement = 1
    RULE_scalarType = 2
    RULE_program = 3
    RULE_version = 4
    RULE_statement = 5
    RULE_annotation = 6
    RULE_scope = 7
    RULE_pragma = 8
    RULE_statementOrScope = 9
    RULE_calibrationGrammarStatement = 10
    RULE_includeStatement = 11
    RULE_breakStatement = 12
    RULE_continueStatement = 13
    RULE_endStatement = 14
    RULE_forStatement = 15
    RULE_ifStatement = 16
    RULE_returnStatement = 17
    RULE_whileStatement = 18
    RULE_barrierStatement = 19
    RULE_boxStatement = 20
    RULE_delayStatement = 21
    RULE_gateCallStatement = 22
    RULE_measureArrowAssignmentStatement = 23
    RULE_resetStatement = 24
    RULE_aliasDeclarationStatement = 25
    RULE_classicalDeclarationStatement = 26
    RULE_constDeclarationStatement = 27
    RULE_ioDeclarationStatement = 28
    RULE_oldStyleDeclarationStatement = 29
    RULE_quantumDeclarationStatement = 30
    RULE_defStatement = 31
    RULE_externStatement = 32
    RULE_gateStatement = 33
    RULE_assignmentStatement = 34
    RULE_expressionStatement = 35
    RULE_calStatement = 36
    RULE_defcalStatement = 37
    RULE_expression = 38
    RULE_aliasExpression = 39
    RULE_declarationExpression = 40
    RULE_measureExpression = 41
    RULE_rangeExpression = 42
    RULE_setExpression = 43
    RULE_arrayLiteral = 44
    RULE_indexOperator = 45
    RULE_indexedIdentifier = 46
    RULE_returnSignature = 47
    RULE_gateModifier = 48
    RULE_qubitType = 49
    RULE_arrayType = 50
    RULE_arrayReferenceType = 51
    RULE_designator = 52
    RULE_defcalTarget = 53
    RULE_defcalArgumentDefinition = 54
    RULE_defcalOperand = 55
    RULE_gateOperand = 56
    RULE_externArgument = 57
    RULE_argumentDefinition = 58
    RULE_argumentDefinitionList = 59
    RULE_defcalArgumentDefinitionList = 60
    RULE_defcalOperandList = 61
    RULE_expressionList = 62
    RULE_identifierList = 63
    RULE_gateOperandList = 64
    RULE_externArgumentList = 65

    ruleNames =  [ "calibrationBlock", "openpulseStatement", "scalarType", 
                   "program", "version", "statement", "annotation", "scope", 
                   "pragma", "statementOrScope", "calibrationGrammarStatement", 
                   "includeStatement", "breakStatement", "continueStatement", 
                   "endStatement", "forStatement", "ifStatement", "returnStatement", 
                   "whileStatement", "barrierStatement", "boxStatement", 
                   "delayStatement", "gateCallStatement", "measureArrowAssignmentStatement", 
                   "resetStatement", "aliasDeclarationStatement", "classicalDeclarationStatement", 
                   "constDeclarationStatement", "ioDeclarationStatement", 
                   "oldStyleDeclarationStatement", "quantumDeclarationStatement", 
                   "defStatement", "externStatement", "gateStatement", "assignmentStatement", 
                   "expressionStatement", "calStatement", "defcalStatement", 
                   "expression", "aliasExpression", "declarationExpression", 
                   "measureExpression", "rangeExpression", "setExpression", 
                   "arrayLiteral", "indexOperator", "indexedIdentifier", 
                   "returnSignature", "gateModifier", "qubitType", "arrayType", 
                   "arrayReferenceType", "designator", "defcalTarget", "defcalArgumentDefinition", 
                   "defcalOperand", "gateOperand", "externArgument", "argumentDefinition", 
                   "argumentDefinitionList", "defcalArgumentDefinitionList", 
                   "defcalOperandList", "expressionList", "identifierList", 
                   "gateOperandList", "externArgumentList" ]

    EOF = Token.EOF
    WAVEFORM=1
    PORT=2
    FRAME=3
    CAL=4
    DEFCAL=5
    OPENQASM=6
    INCLUDE=7
    DEFCALGRAMMAR=8
    DEF=9
    GATE=10
    EXTERN=11
    BOX=12
    LET=13
    BREAK=14
    CONTINUE=15
    IF=16
    ELSE=17
    END=18
    RETURN=19
    FOR=20
    WHILE=21
    IN=22
    PRAGMA=23
    AnnotationKeyword=24
    INPUT=25
    OUTPUT=26
    CONST=27
    READONLY=28
    MUTABLE=29
    QREG=30
    QUBIT=31
    CREG=32
    BOOL=33
    BIT=34
    INT=35
    UINT=36
    FLOAT=37
    ANGLE=38
    COMPLEX=39
    ARRAY=40
    VOID=41
    DURATION=42
    STRETCH=43
    GPHASE=44
    INV=45
    POW=46
    CTRL=47
    NEGCTRL=48
    DIM=49
    DURATIONOF=50
    DELAY=51
    RESET=52
    MEASURE=53
    BARRIER=54
    BooleanLiteral=55
    LBRACKET=56
    RBRACKET=57
    LBRACE=58
    RBRACE=59
    LPAREN=60
    RPAREN=61
    COLON=62
    SEMICOLON=63
    DOT=64
    COMMA=65
    EQUALS=66
    ARROW=67
    PLUS=68
    DOUBLE_PLUS=69
    MINUS=70
    ASTERISK=71
    DOUBLE_ASTERISK=72
    SLASH=73
    PERCENT=74
    PIPE=75
    DOUBLE_PIPE=76
    AMPERSAND=77
    DOUBLE_AMPERSAND=78
    CARET=79
    AT=80
    TILDE=81
    EXCLAMATION_POINT=82
    EqualityOperator=83
    CompoundAssignmentOperator=84
    ComparisonOperator=85
    BitshiftOperator=86
    IMAG=87
    ImaginaryLiteral=88
    BinaryIntegerLiteral=89
    OctalIntegerLiteral=90
    DecimalIntegerLiteral=91
    HexIntegerLiteral=92
    Identifier=93
    HardwareQubit=94
    FloatLiteral=95
    TimingLiteral=96
    BitstringLiteral=97
    StringLiteral=98
    Whitespace=99
    Newline=100
    LineComment=101
    BlockComment=102
    VERSION_IDENTIFER_WHITESPACE=103
    VersionSpecifier=104
    EAT_INITIAL_SPACE=105
    EAT_LINE_END=106
    RemainingLineContent=107
    CAL_PRELUDE_WHITESPACE=108
    CAL_PRELUDE_COMMENT=109
    DEFCAL_PRELUDE_WHITESPACE=110
    DEFCAL_PRELUDE_COMMENT=111
    CalibrationBlock=112

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CalibrationBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openpulseStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.OpenpulseStatementContext)
            else:
                return self.getTypedRuleContext(openpulseParser.OpenpulseStatementContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_calibrationBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationBlock" ):
                listener.enterCalibrationBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationBlock" ):
                listener.exitCalibrationBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationBlock" ):
                return visitor.visitCalibrationBlock(self)
            else:
                return visitor.visitChildren(self)




    def calibrationBlock(self):

        localctx = openpulseParser.CalibrationBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_calibrationBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.INCLUDE) | (1 << openpulseParser.DEF) | (1 << openpulseParser.EXTERN) | (1 << openpulseParser.BOX) | (1 << openpulseParser.LET) | (1 << openpulseParser.BREAK) | (1 << openpulseParser.CONTINUE) | (1 << openpulseParser.IF) | (1 << openpulseParser.END) | (1 << openpulseParser.RETURN) | (1 << openpulseParser.FOR) | (1 << openpulseParser.WHILE) | (1 << openpulseParser.PRAGMA) | (1 << openpulseParser.AnnotationKeyword) | (1 << openpulseParser.INPUT) | (1 << openpulseParser.OUTPUT) | (1 << openpulseParser.CONST) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.GPHASE) | (1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.DELAY) | (1 << openpulseParser.RESET) | (1 << openpulseParser.BARRIER) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 132
                self.openpulseStatement()
                self.state = 137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenpulseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(openpulseParser.PragmaContext,0)


        def aliasDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.AliasDeclarationStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.AssignmentStatementContext,0)


        def barrierStatement(self):
            return self.getTypedRuleContext(openpulseParser.BarrierStatementContext,0)


        def boxStatement(self):
            return self.getTypedRuleContext(openpulseParser.BoxStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(openpulseParser.BreakStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ClassicalDeclarationStatementContext,0)


        def constDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ConstDeclarationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(openpulseParser.ContinueStatementContext,0)


        def defStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefStatementContext,0)


        def delayStatement(self):
            return self.getTypedRuleContext(openpulseParser.DelayStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(openpulseParser.EndStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionStatementContext,0)


        def externStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExternStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(openpulseParser.ForStatementContext,0)


        def gateCallStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateCallStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(openpulseParser.IfStatementContext,0)


        def includeStatement(self):
            return self.getTypedRuleContext(openpulseParser.IncludeStatementContext,0)


        def ioDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.IoDeclarationStatementContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.QuantumDeclarationStatementContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(openpulseParser.ResetStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(openpulseParser.ReturnStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(openpulseParser.WhileStatementContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(openpulseParser.AnnotationContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_openpulseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenpulseStatement" ):
                listener.enterOpenpulseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenpulseStatement" ):
                listener.exitOpenpulseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenpulseStatement" ):
                return visitor.visitOpenpulseStatement(self)
            else:
                return visitor.visitChildren(self)




    def openpulseStatement(self):

        localctx = openpulseParser.OpenpulseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_openpulseStatement)
        self._la = 0 # Token type
        try:
            self.state = 169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.PRAGMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 138
                self.pragma()
                pass
            elif token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.INCLUDE, openpulseParser.DEF, openpulseParser.EXTERN, openpulseParser.BOX, openpulseParser.LET, openpulseParser.BREAK, openpulseParser.CONTINUE, openpulseParser.IF, openpulseParser.END, openpulseParser.RETURN, openpulseParser.FOR, openpulseParser.WHILE, openpulseParser.AnnotationKeyword, openpulseParser.INPUT, openpulseParser.OUTPUT, openpulseParser.CONST, openpulseParser.QUBIT, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.GPHASE, openpulseParser.INV, openpulseParser.POW, openpulseParser.CTRL, openpulseParser.NEGCTRL, openpulseParser.DURATIONOF, openpulseParser.DELAY, openpulseParser.RESET, openpulseParser.BARRIER, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openpulseParser.AnnotationKeyword:
                    self.state = 139
                    self.annotation()
                    self.state = 144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 145
                    self.aliasDeclarationStatement()
                    pass

                elif la_ == 2:
                    self.state = 146
                    self.assignmentStatement()
                    pass

                elif la_ == 3:
                    self.state = 147
                    self.barrierStatement()
                    pass

                elif la_ == 4:
                    self.state = 148
                    self.boxStatement()
                    pass

                elif la_ == 5:
                    self.state = 149
                    self.breakStatement()
                    pass

                elif la_ == 6:
                    self.state = 150
                    self.classicalDeclarationStatement()
                    pass

                elif la_ == 7:
                    self.state = 151
                    self.constDeclarationStatement()
                    pass

                elif la_ == 8:
                    self.state = 152
                    self.continueStatement()
                    pass

                elif la_ == 9:
                    self.state = 153
                    self.defStatement()
                    pass

                elif la_ == 10:
                    self.state = 154
                    self.delayStatement()
                    pass

                elif la_ == 11:
                    self.state = 155
                    self.endStatement()
                    pass

                elif la_ == 12:
                    self.state = 156
                    self.expressionStatement()
                    pass

                elif la_ == 13:
                    self.state = 157
                    self.externStatement()
                    pass

                elif la_ == 14:
                    self.state = 158
                    self.forStatement()
                    pass

                elif la_ == 15:
                    self.state = 159
                    self.gateCallStatement()
                    pass

                elif la_ == 16:
                    self.state = 160
                    self.ifStatement()
                    pass

                elif la_ == 17:
                    self.state = 161
                    self.includeStatement()
                    pass

                elif la_ == 18:
                    self.state = 162
                    self.ioDeclarationStatement()
                    pass

                elif la_ == 19:
                    self.state = 163
                    self.quantumDeclarationStatement()
                    pass

                elif la_ == 20:
                    self.state = 164
                    self.resetStatement()
                    pass

                elif la_ == 21:
                    self.state = 165
                    self.returnStatement()
                    pass

                elif la_ == 22:
                    self.state = 166
                    self.whileStatement()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(openpulseParser.BIT, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def INT(self):
            return self.getToken(openpulseParser.INT, 0)

        def UINT(self):
            return self.getToken(openpulseParser.UINT, 0)

        def FLOAT(self):
            return self.getToken(openpulseParser.FLOAT, 0)

        def ANGLE(self):
            return self.getToken(openpulseParser.ANGLE, 0)

        def BOOL(self):
            return self.getToken(openpulseParser.BOOL, 0)

        def DURATION(self):
            return self.getToken(openpulseParser.DURATION, 0)

        def STRETCH(self):
            return self.getToken(openpulseParser.STRETCH, 0)

        def COMPLEX(self):
            return self.getToken(openpulseParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def WAVEFORM(self):
            return self.getToken(openpulseParser.WAVEFORM, 0)

        def PORT(self):
            return self.getToken(openpulseParser.PORT, 0)

        def FRAME(self):
            return self.getToken(openpulseParser.FRAME, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_scalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarType" ):
                listener.enterScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarType" ):
                listener.exitScalarType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarType" ):
                return visitor.visitScalarType(self)
            else:
                return visitor.visitChildren(self)




    def scalarType(self):

        localctx = openpulseParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_scalarType)
        self._la = 0 # Token type
        try:
            self.state = 204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.BIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 171
                self.match(openpulseParser.BIT)
                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 172
                    self.designator()


                pass
            elif token in [openpulseParser.INT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.match(openpulseParser.INT)
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 176
                    self.designator()


                pass
            elif token in [openpulseParser.UINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 179
                self.match(openpulseParser.UINT)
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 180
                    self.designator()


                pass
            elif token in [openpulseParser.FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 183
                self.match(openpulseParser.FLOAT)
                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 184
                    self.designator()


                pass
            elif token in [openpulseParser.ANGLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 187
                self.match(openpulseParser.ANGLE)
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 188
                    self.designator()


                pass
            elif token in [openpulseParser.BOOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 191
                self.match(openpulseParser.BOOL)
                pass
            elif token in [openpulseParser.DURATION]:
                self.enterOuterAlt(localctx, 7)
                self.state = 192
                self.match(openpulseParser.DURATION)
                pass
            elif token in [openpulseParser.STRETCH]:
                self.enterOuterAlt(localctx, 8)
                self.state = 193
                self.match(openpulseParser.STRETCH)
                pass
            elif token in [openpulseParser.COMPLEX]:
                self.enterOuterAlt(localctx, 9)
                self.state = 194
                self.match(openpulseParser.COMPLEX)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 195
                    self.match(openpulseParser.LBRACKET)
                    self.state = 196
                    self.scalarType()
                    self.state = 197
                    self.match(openpulseParser.RBRACKET)


                pass
            elif token in [openpulseParser.WAVEFORM]:
                self.enterOuterAlt(localctx, 10)
                self.state = 201
                self.match(openpulseParser.WAVEFORM)
                pass
            elif token in [openpulseParser.PORT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 202
                self.match(openpulseParser.PORT)
                pass
            elif token in [openpulseParser.FRAME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 203
                self.match(openpulseParser.FRAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(openpulseParser.EOF, 0)

        def version(self):
            return self.getTypedRuleContext(openpulseParser.VersionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = openpulseParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.OPENQASM:
                self.state = 206
                self.version()


            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.CAL) | (1 << openpulseParser.DEFCAL) | (1 << openpulseParser.INCLUDE) | (1 << openpulseParser.DEFCALGRAMMAR) | (1 << openpulseParser.DEF) | (1 << openpulseParser.GATE) | (1 << openpulseParser.EXTERN) | (1 << openpulseParser.BOX) | (1 << openpulseParser.LET) | (1 << openpulseParser.BREAK) | (1 << openpulseParser.CONTINUE) | (1 << openpulseParser.IF) | (1 << openpulseParser.END) | (1 << openpulseParser.RETURN) | (1 << openpulseParser.FOR) | (1 << openpulseParser.WHILE) | (1 << openpulseParser.PRAGMA) | (1 << openpulseParser.AnnotationKeyword) | (1 << openpulseParser.INPUT) | (1 << openpulseParser.OUTPUT) | (1 << openpulseParser.CONST) | (1 << openpulseParser.QREG) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.GPHASE) | (1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.DELAY) | (1 << openpulseParser.RESET) | (1 << openpulseParser.MEASURE) | (1 << openpulseParser.BARRIER) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 209
                self.statement()
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 215
            self.match(openpulseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENQASM(self):
            return self.getToken(openpulseParser.OPENQASM, 0)

        def VersionSpecifier(self):
            return self.getToken(openpulseParser.VersionSpecifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = openpulseParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(openpulseParser.OPENQASM)
            self.state = 218
            self.match(openpulseParser.VersionSpecifier)
            self.state = 219
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(openpulseParser.PragmaContext,0)


        def aliasDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.AliasDeclarationStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.AssignmentStatementContext,0)


        def barrierStatement(self):
            return self.getTypedRuleContext(openpulseParser.BarrierStatementContext,0)


        def boxStatement(self):
            return self.getTypedRuleContext(openpulseParser.BoxStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(openpulseParser.BreakStatementContext,0)


        def calStatement(self):
            return self.getTypedRuleContext(openpulseParser.CalStatementContext,0)


        def calibrationGrammarStatement(self):
            return self.getTypedRuleContext(openpulseParser.CalibrationGrammarStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ClassicalDeclarationStatementContext,0)


        def constDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ConstDeclarationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(openpulseParser.ContinueStatementContext,0)


        def defStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefStatementContext,0)


        def defcalStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefcalStatementContext,0)


        def delayStatement(self):
            return self.getTypedRuleContext(openpulseParser.DelayStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(openpulseParser.EndStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionStatementContext,0)


        def externStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExternStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(openpulseParser.ForStatementContext,0)


        def gateCallStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateCallStatementContext,0)


        def gateStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(openpulseParser.IfStatementContext,0)


        def includeStatement(self):
            return self.getTypedRuleContext(openpulseParser.IncludeStatementContext,0)


        def ioDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.IoDeclarationStatementContext,0)


        def measureArrowAssignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.MeasureArrowAssignmentStatementContext,0)


        def oldStyleDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.OldStyleDeclarationStatementContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.QuantumDeclarationStatementContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(openpulseParser.ResetStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(openpulseParser.ReturnStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(openpulseParser.WhileStatementContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(openpulseParser.AnnotationContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = openpulseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.PRAGMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 221
                self.pragma()
                pass
            elif token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.CAL, openpulseParser.DEFCAL, openpulseParser.INCLUDE, openpulseParser.DEFCALGRAMMAR, openpulseParser.DEF, openpulseParser.GATE, openpulseParser.EXTERN, openpulseParser.BOX, openpulseParser.LET, openpulseParser.BREAK, openpulseParser.CONTINUE, openpulseParser.IF, openpulseParser.END, openpulseParser.RETURN, openpulseParser.FOR, openpulseParser.WHILE, openpulseParser.AnnotationKeyword, openpulseParser.INPUT, openpulseParser.OUTPUT, openpulseParser.CONST, openpulseParser.QREG, openpulseParser.QUBIT, openpulseParser.CREG, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.GPHASE, openpulseParser.INV, openpulseParser.POW, openpulseParser.CTRL, openpulseParser.NEGCTRL, openpulseParser.DURATIONOF, openpulseParser.DELAY, openpulseParser.RESET, openpulseParser.MEASURE, openpulseParser.BARRIER, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openpulseParser.AnnotationKeyword:
                    self.state = 222
                    self.annotation()
                    self.state = 227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 228
                    self.aliasDeclarationStatement()
                    pass

                elif la_ == 2:
                    self.state = 229
                    self.assignmentStatement()
                    pass

                elif la_ == 3:
                    self.state = 230
                    self.barrierStatement()
                    pass

                elif la_ == 4:
                    self.state = 231
                    self.boxStatement()
                    pass

                elif la_ == 5:
                    self.state = 232
                    self.breakStatement()
                    pass

                elif la_ == 6:
                    self.state = 233
                    self.calStatement()
                    pass

                elif la_ == 7:
                    self.state = 234
                    self.calibrationGrammarStatement()
                    pass

                elif la_ == 8:
                    self.state = 235
                    self.classicalDeclarationStatement()
                    pass

                elif la_ == 9:
                    self.state = 236
                    self.constDeclarationStatement()
                    pass

                elif la_ == 10:
                    self.state = 237
                    self.continueStatement()
                    pass

                elif la_ == 11:
                    self.state = 238
                    self.defStatement()
                    pass

                elif la_ == 12:
                    self.state = 239
                    self.defcalStatement()
                    pass

                elif la_ == 13:
                    self.state = 240
                    self.delayStatement()
                    pass

                elif la_ == 14:
                    self.state = 241
                    self.endStatement()
                    pass

                elif la_ == 15:
                    self.state = 242
                    self.expressionStatement()
                    pass

                elif la_ == 16:
                    self.state = 243
                    self.externStatement()
                    pass

                elif la_ == 17:
                    self.state = 244
                    self.forStatement()
                    pass

                elif la_ == 18:
                    self.state = 245
                    self.gateCallStatement()
                    pass

                elif la_ == 19:
                    self.state = 246
                    self.gateStatement()
                    pass

                elif la_ == 20:
                    self.state = 247
                    self.ifStatement()
                    pass

                elif la_ == 21:
                    self.state = 248
                    self.includeStatement()
                    pass

                elif la_ == 22:
                    self.state = 249
                    self.ioDeclarationStatement()
                    pass

                elif la_ == 23:
                    self.state = 250
                    self.measureArrowAssignmentStatement()
                    pass

                elif la_ == 24:
                    self.state = 251
                    self.oldStyleDeclarationStatement()
                    pass

                elif la_ == 25:
                    self.state = 252
                    self.quantumDeclarationStatement()
                    pass

                elif la_ == 26:
                    self.state = 253
                    self.resetStatement()
                    pass

                elif la_ == 27:
                    self.state = 254
                    self.returnStatement()
                    pass

                elif la_ == 28:
                    self.state = 255
                    self.whileStatement()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnnotationKeyword(self):
            return self.getToken(openpulseParser.AnnotationKeyword, 0)

        def RemainingLineContent(self):
            return self.getToken(openpulseParser.RemainingLineContent, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = openpulseParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(openpulseParser.AnnotationKeyword)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.RemainingLineContent:
                self.state = 261
                self.match(openpulseParser.RemainingLineContent)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = openpulseParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(openpulseParser.LBRACE)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.CAL) | (1 << openpulseParser.DEFCAL) | (1 << openpulseParser.INCLUDE) | (1 << openpulseParser.DEFCALGRAMMAR) | (1 << openpulseParser.DEF) | (1 << openpulseParser.GATE) | (1 << openpulseParser.EXTERN) | (1 << openpulseParser.BOX) | (1 << openpulseParser.LET) | (1 << openpulseParser.BREAK) | (1 << openpulseParser.CONTINUE) | (1 << openpulseParser.IF) | (1 << openpulseParser.END) | (1 << openpulseParser.RETURN) | (1 << openpulseParser.FOR) | (1 << openpulseParser.WHILE) | (1 << openpulseParser.PRAGMA) | (1 << openpulseParser.AnnotationKeyword) | (1 << openpulseParser.INPUT) | (1 << openpulseParser.OUTPUT) | (1 << openpulseParser.CONST) | (1 << openpulseParser.QREG) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.GPHASE) | (1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.DELAY) | (1 << openpulseParser.RESET) | (1 << openpulseParser.MEASURE) | (1 << openpulseParser.BARRIER) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 265
                self.statement()
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 271
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(openpulseParser.PRAGMA, 0)

        def RemainingLineContent(self):
            return self.getToken(openpulseParser.RemainingLineContent, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma" ):
                return visitor.visitPragma(self)
            else:
                return visitor.visitChildren(self)




    def pragma(self):

        localctx = openpulseParser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(openpulseParser.PRAGMA)
            self.state = 274
            self.match(openpulseParser.RemainingLineContent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementOrScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(openpulseParser.StatementContext,0)


        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_statementOrScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementOrScope" ):
                listener.enterStatementOrScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementOrScope" ):
                listener.exitStatementOrScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementOrScope" ):
                return visitor.visitStatementOrScope(self)
            else:
                return visitor.visitChildren(self)




    def statementOrScope(self):

        localctx = openpulseParser.StatementOrScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_statementOrScope)
        try:
            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.CAL, openpulseParser.DEFCAL, openpulseParser.INCLUDE, openpulseParser.DEFCALGRAMMAR, openpulseParser.DEF, openpulseParser.GATE, openpulseParser.EXTERN, openpulseParser.BOX, openpulseParser.LET, openpulseParser.BREAK, openpulseParser.CONTINUE, openpulseParser.IF, openpulseParser.END, openpulseParser.RETURN, openpulseParser.FOR, openpulseParser.WHILE, openpulseParser.PRAGMA, openpulseParser.AnnotationKeyword, openpulseParser.INPUT, openpulseParser.OUTPUT, openpulseParser.CONST, openpulseParser.QREG, openpulseParser.QUBIT, openpulseParser.CREG, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.GPHASE, openpulseParser.INV, openpulseParser.POW, openpulseParser.CTRL, openpulseParser.NEGCTRL, openpulseParser.DURATIONOF, openpulseParser.DELAY, openpulseParser.RESET, openpulseParser.MEASURE, openpulseParser.BARRIER, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.statement()
                pass
            elif token in [openpulseParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCALGRAMMAR(self):
            return self.getToken(openpulseParser.DEFCALGRAMMAR, 0)

        def StringLiteral(self):
            return self.getToken(openpulseParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_calibrationGrammarStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammarStatement" ):
                listener.enterCalibrationGrammarStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammarStatement" ):
                listener.exitCalibrationGrammarStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammarStatement" ):
                return visitor.visitCalibrationGrammarStatement(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammarStatement(self):

        localctx = openpulseParser.CalibrationGrammarStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_calibrationGrammarStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(openpulseParser.DEFCALGRAMMAR)
            self.state = 281
            self.match(openpulseParser.StringLiteral)
            self.state = 282
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(openpulseParser.INCLUDE, 0)

        def StringLiteral(self):
            return self.getToken(openpulseParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_includeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStatement" ):
                listener.enterIncludeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStatement" ):
                listener.exitIncludeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeStatement" ):
                return visitor.visitIncludeStatement(self)
            else:
                return visitor.visitChildren(self)




    def includeStatement(self):

        localctx = openpulseParser.IncludeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_includeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(openpulseParser.INCLUDE)
            self.state = 285
            self.match(openpulseParser.StringLiteral)
            self.state = 286
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(openpulseParser.BREAK, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = openpulseParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(openpulseParser.BREAK)
            self.state = 289
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(openpulseParser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = openpulseParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(openpulseParser.CONTINUE)
            self.state = 292
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(openpulseParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = openpulseParser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(openpulseParser.END)
            self.state = 295
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementOrScopeContext

        def FOR(self):
            return self.getToken(openpulseParser.FOR, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def IN(self):
            return self.getToken(openpulseParser.IN, 0)

        def statementOrScope(self):
            return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,0)


        def setExpression(self):
            return self.getTypedRuleContext(openpulseParser.SetExpressionContext,0)


        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def rangeExpression(self):
            return self.getTypedRuleContext(openpulseParser.RangeExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = openpulseParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_forStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(openpulseParser.FOR)
            self.state = 298
            self.scalarType()
            self.state = 299
            self.match(openpulseParser.Identifier)
            self.state = 300
            self.match(openpulseParser.IN)
            self.state = 307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.LBRACE]:
                self.state = 301
                self.setExpression()
                pass
            elif token in [openpulseParser.LBRACKET]:
                self.state = 302
                self.match(openpulseParser.LBRACKET)
                self.state = 303
                self.rangeExpression()
                self.state = 304
                self.match(openpulseParser.RBRACKET)
                pass
            elif token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 306
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 309
            localctx.body = self.statementOrScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.if_body = None # StatementOrScopeContext
            self.else_body = None # StatementOrScopeContext

        def IF(self):
            return self.getToken(openpulseParser.IF, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def statementOrScope(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementOrScopeContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,i)


        def ELSE(self):
            return self.getToken(openpulseParser.ELSE, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = openpulseParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(openpulseParser.IF)
            self.state = 312
            self.match(openpulseParser.LPAREN)
            self.state = 313
            self.expression(0)
            self.state = 314
            self.match(openpulseParser.RPAREN)
            self.state = 315
            localctx.if_body = self.statementOrScope()
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 316
                self.match(openpulseParser.ELSE)
                self.state = 317
                localctx.else_body = self.statementOrScope()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(openpulseParser.RETURN, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = openpulseParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(openpulseParser.RETURN)
            self.state = 323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 321
                self.expression(0)
                pass
            elif token in [openpulseParser.MEASURE]:
                self.state = 322
                self.measureExpression()
                pass
            elif token in [openpulseParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 325
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementOrScopeContext

        def WHILE(self):
            return self.getToken(openpulseParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def statementOrScope(self):
            return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = openpulseParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(openpulseParser.WHILE)
            self.state = 328
            self.match(openpulseParser.LPAREN)
            self.state = 329
            self.expression(0)
            self.state = 330
            self.match(openpulseParser.RPAREN)
            self.state = 331
            localctx.body = self.statementOrScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarrierStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BARRIER(self):
            return self.getToken(openpulseParser.BARRIER, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_barrierStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarrierStatement" ):
                listener.enterBarrierStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarrierStatement" ):
                listener.exitBarrierStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBarrierStatement" ):
                return visitor.visitBarrierStatement(self)
            else:
                return visitor.visitChildren(self)




    def barrierStatement(self):

        localctx = openpulseParser.BarrierStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_barrierStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(openpulseParser.BARRIER)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.Identifier or _la==openpulseParser.HardwareQubit:
                self.state = 334
                self.gateOperandList()


            self.state = 337
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOX(self):
            return self.getToken(openpulseParser.BOX, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_boxStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxStatement" ):
                listener.enterBoxStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxStatement" ):
                listener.exitBoxStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxStatement" ):
                return visitor.visitBoxStatement(self)
            else:
                return visitor.visitChildren(self)




    def boxStatement(self):

        localctx = openpulseParser.BoxStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_boxStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(openpulseParser.BOX)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LBRACKET:
                self.state = 340
                self.designator()


            self.state = 343
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelayStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAY(self):
            return self.getToken(openpulseParser.DELAY, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_delayStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayStatement" ):
                listener.enterDelayStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayStatement" ):
                listener.exitDelayStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelayStatement" ):
                return visitor.visitDelayStatement(self)
            else:
                return visitor.visitChildren(self)




    def delayStatement(self):

        localctx = openpulseParser.DelayStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_delayStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(openpulseParser.DELAY)
            self.state = 346
            self.designator()
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.Identifier or _la==openpulseParser.HardwareQubit:
                self.state = 347
                self.gateOperandList()


            self.state = 350
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateCallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.GateModifierContext)
            else:
                return self.getTypedRuleContext(openpulseParser.GateModifierContext,i)


        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def GPHASE(self):
            return self.getToken(openpulseParser.GPHASE, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateCallStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateCallStatement" ):
                listener.enterGateCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateCallStatement" ):
                listener.exitGateCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateCallStatement" ):
                return visitor.visitGateCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def gateCallStatement(self):

        localctx = openpulseParser.GateCallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_gateCallStatement)
        self._la = 0 # Token type
        try:
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL))) != 0):
                    self.state = 352
                    self.gateModifier()
                    self.state = 357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 358
                self.match(openpulseParser.Identifier)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LPAREN:
                    self.state = 359
                    self.match(openpulseParser.LPAREN)
                    self.state = 361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                        self.state = 360
                        self.expressionList()


                    self.state = 363
                    self.match(openpulseParser.RPAREN)


                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 366
                    self.designator()


                self.state = 369
                self.gateOperandList()
                self.state = 370
                self.match(openpulseParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL))) != 0):
                    self.state = 372
                    self.gateModifier()
                    self.state = 377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 378
                self.match(openpulseParser.GPHASE)
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LPAREN:
                    self.state = 379
                    self.match(openpulseParser.LPAREN)
                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                        self.state = 380
                        self.expressionList()


                    self.state = 383
                    self.match(openpulseParser.RPAREN)


                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 386
                    self.designator()


                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.Identifier or _la==openpulseParser.HardwareQubit:
                    self.state = 389
                    self.gateOperandList()


                self.state = 392
                self.match(openpulseParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureArrowAssignmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def ARROW(self):
            return self.getToken(openpulseParser.ARROW, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_measureArrowAssignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureArrowAssignmentStatement" ):
                listener.enterMeasureArrowAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureArrowAssignmentStatement" ):
                listener.exitMeasureArrowAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureArrowAssignmentStatement" ):
                return visitor.visitMeasureArrowAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def measureArrowAssignmentStatement(self):

        localctx = openpulseParser.MeasureArrowAssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_measureArrowAssignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.measureExpression()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.ARROW:
                self.state = 396
                self.match(openpulseParser.ARROW)
                self.state = 397
                self.indexedIdentifier()


            self.state = 400
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(openpulseParser.RESET, 0)

        def gateOperand(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetStatement" ):
                return visitor.visitResetStatement(self)
            else:
                return visitor.visitChildren(self)




    def resetStatement(self):

        localctx = openpulseParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(openpulseParser.RESET)
            self.state = 403
            self.gateOperand()
            self.state = 404
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(openpulseParser.LET, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def aliasExpression(self):
            return self.getTypedRuleContext(openpulseParser.AliasExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_aliasDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDeclarationStatement" ):
                listener.enterAliasDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDeclarationStatement" ):
                listener.exitAliasDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasDeclarationStatement" ):
                return visitor.visitAliasDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasDeclarationStatement(self):

        localctx = openpulseParser.AliasDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_aliasDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(openpulseParser.LET)
            self.state = 407
            self.match(openpulseParser.Identifier)
            self.state = 408
            self.match(openpulseParser.EQUALS)
            self.state = 409
            self.aliasExpression()
            self.state = 410
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def declarationExpression(self):
            return self.getTypedRuleContext(openpulseParser.DeclarationExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_classicalDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclarationStatement" ):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclarationStatement" ):
                listener.exitClassicalDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclarationStatement" ):
                return visitor.visitClassicalDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclarationStatement(self):

        localctx = openpulseParser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_classicalDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                self.state = 412
                self.scalarType()
                pass
            elif token in [openpulseParser.ARRAY]:
                self.state = 413
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 416
            self.match(openpulseParser.Identifier)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.EQUALS:
                self.state = 417
                self.match(openpulseParser.EQUALS)
                self.state = 418
                self.declarationExpression()


            self.state = 421
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(openpulseParser.CONST, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def declarationExpression(self):
            return self.getTypedRuleContext(openpulseParser.DeclarationExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_constDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclarationStatement" ):
                listener.enterConstDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclarationStatement" ):
                listener.exitConstDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclarationStatement" ):
                return visitor.visitConstDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def constDeclarationStatement(self):

        localctx = openpulseParser.ConstDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(openpulseParser.CONST)
            self.state = 424
            self.scalarType()
            self.state = 425
            self.match(openpulseParser.Identifier)
            self.state = 426
            self.match(openpulseParser.EQUALS)
            self.state = 427
            self.declarationExpression()
            self.state = 428
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def INPUT(self):
            return self.getToken(openpulseParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(openpulseParser.OUTPUT, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_ioDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoDeclarationStatement" ):
                listener.enterIoDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoDeclarationStatement" ):
                listener.exitIoDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoDeclarationStatement" ):
                return visitor.visitIoDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def ioDeclarationStatement(self):

        localctx = openpulseParser.IoDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ioDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            _la = self._input.LA(1)
            if not(_la==openpulseParser.INPUT or _la==openpulseParser.OUTPUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                self.state = 431
                self.scalarType()
                pass
            elif token in [openpulseParser.ARRAY]:
                self.state = 432
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 435
            self.match(openpulseParser.Identifier)
            self.state = 436
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OldStyleDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def QREG(self):
            return self.getToken(openpulseParser.QREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_oldStyleDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOldStyleDeclarationStatement" ):
                listener.enterOldStyleDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOldStyleDeclarationStatement" ):
                listener.exitOldStyleDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOldStyleDeclarationStatement" ):
                return visitor.visitOldStyleDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def oldStyleDeclarationStatement(self):

        localctx = openpulseParser.OldStyleDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oldStyleDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            _la = self._input.LA(1)
            if not(_la==openpulseParser.QREG or _la==openpulseParser.CREG):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 439
            self.match(openpulseParser.Identifier)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LBRACKET:
                self.state = 440
                self.designator()


            self.state = 443
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qubitType(self):
            return self.getTypedRuleContext(openpulseParser.QubitTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_quantumDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclarationStatement" ):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclarationStatement" ):
                listener.exitQuantumDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclarationStatement" ):
                return visitor.visitQuantumDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclarationStatement(self):

        localctx = openpulseParser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.qubitType()
            self.state = 446
            self.match(openpulseParser.Identifier)
            self.state = 447
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(openpulseParser.DEF, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def argumentDefinitionList(self):
            return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefStatement" ):
                listener.enterDefStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefStatement" ):
                listener.exitDefStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefStatement" ):
                return visitor.visitDefStatement(self)
            else:
                return visitor.visitChildren(self)




    def defStatement(self):

        localctx = openpulseParser.DefStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_defStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(openpulseParser.DEF)
            self.state = 450
            self.match(openpulseParser.Identifier)
            self.state = 451
            self.match(openpulseParser.LPAREN)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.READONLY) | (1 << openpulseParser.MUTABLE) | (1 << openpulseParser.QREG) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH))) != 0):
                self.state = 452
                self.argumentDefinitionList()


            self.state = 455
            self.match(openpulseParser.RPAREN)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.ARROW:
                self.state = 456
                self.returnSignature()


            self.state = 459
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(openpulseParser.EXTERN, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def externArgumentList(self):
            return self.getTypedRuleContext(openpulseParser.ExternArgumentListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_externStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternStatement" ):
                listener.enterExternStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternStatement" ):
                listener.exitExternStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternStatement" ):
                return visitor.visitExternStatement(self)
            else:
                return visitor.visitChildren(self)




    def externStatement(self):

        localctx = openpulseParser.ExternStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_externStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(openpulseParser.EXTERN)
            self.state = 462
            self.match(openpulseParser.Identifier)
            self.state = 463
            self.match(openpulseParser.LPAREN)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.READONLY) | (1 << openpulseParser.MUTABLE) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH))) != 0):
                self.state = 464
                self.externArgumentList()


            self.state = 467
            self.match(openpulseParser.RPAREN)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.ARROW:
                self.state = 468
                self.returnSignature()


            self.state = 471
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # IdentifierListContext
            self.qubits = None # IdentifierListContext

        def GATE(self):
            return self.getToken(openpulseParser.GATE, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(openpulseParser.IdentifierListContext,i)


        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateStatement" ):
                listener.enterGateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateStatement" ):
                listener.exitGateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateStatement" ):
                return visitor.visitGateStatement(self)
            else:
                return visitor.visitChildren(self)




    def gateStatement(self):

        localctx = openpulseParser.GateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_gateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(openpulseParser.GATE)
            self.state = 474
            self.match(openpulseParser.Identifier)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LPAREN:
                self.state = 475
                self.match(openpulseParser.LPAREN)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.Identifier:
                    self.state = 476
                    localctx.params = self.identifierList()


                self.state = 479
                self.match(openpulseParser.RPAREN)


            self.state = 482
            localctx.qubits = self.identifierList()
            self.state = 483
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def CompoundAssignmentOperator(self):
            return self.getToken(openpulseParser.CompoundAssignmentOperator, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentStatement" ):
                return visitor.visitAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentStatement(self):

        localctx = openpulseParser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_assignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.indexedIdentifier()
            self.state = 486
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==openpulseParser.EQUALS or _la==openpulseParser.CompoundAssignmentOperator):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 487
                self.expression(0)
                pass
            elif token in [openpulseParser.MEASURE]:
                self.state = 488
                self.measureExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 491
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = openpulseParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.expression(0)
            self.state = 494
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAL(self):
            return self.getToken(openpulseParser.CAL, 0)

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def CalibrationBlock(self):
            return self.getToken(openpulseParser.CalibrationBlock, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_calStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalStatement" ):
                listener.enterCalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalStatement" ):
                listener.exitCalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalStatement" ):
                return visitor.visitCalStatement(self)
            else:
                return visitor.visitChildren(self)




    def calStatement(self):

        localctx = openpulseParser.CalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_calStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(openpulseParser.CAL)
            self.state = 497
            self.match(openpulseParser.LBRACE)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.CalibrationBlock:
                self.state = 498
                self.match(openpulseParser.CalibrationBlock)


            self.state = 501
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCAL(self):
            return self.getToken(openpulseParser.DEFCAL, 0)

        def defcalTarget(self):
            return self.getTypedRuleContext(openpulseParser.DefcalTargetContext,0)


        def defcalOperandList(self):
            return self.getTypedRuleContext(openpulseParser.DefcalOperandListContext,0)


        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def CalibrationBlock(self):
            return self.getToken(openpulseParser.CalibrationBlock, 0)

        def defcalArgumentDefinitionList(self):
            return self.getTypedRuleContext(openpulseParser.DefcalArgumentDefinitionListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defcalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalStatement" ):
                listener.enterDefcalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalStatement" ):
                listener.exitDefcalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalStatement" ):
                return visitor.visitDefcalStatement(self)
            else:
                return visitor.visitChildren(self)




    def defcalStatement(self):

        localctx = openpulseParser.DefcalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_defcalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(openpulseParser.DEFCAL)
            self.state = 504
            self.defcalTarget()
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LPAREN:
                self.state = 505
                self.match(openpulseParser.LPAREN)
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.READONLY) | (1 << openpulseParser.MUTABLE) | (1 << openpulseParser.QREG) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                    self.state = 506
                    self.defcalArgumentDefinitionList()


                self.state = 509
                self.match(openpulseParser.RPAREN)


            self.state = 512
            self.defcalOperandList()
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.ARROW:
                self.state = 513
                self.returnSignature()


            self.state = 516
            self.match(openpulseParser.LBRACE)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.CalibrationBlock:
                self.state = 517
                self.match(openpulseParser.CalibrationBlock)


            self.state = 520
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openpulseParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BitwiseXorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def CARET(self):
            return self.getToken(openpulseParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseXorExpression" ):
                listener.enterBitwiseXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseXorExpression" ):
                listener.exitBitwiseXorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseXorExpression" ):
                return visitor.visitBitwiseXorExpression(self)
            else:
                return visitor.visitChildren(self)


    class AdditiveExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(openpulseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(openpulseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)


    class DurationofExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DURATIONOF(self):
            return self.getToken(openpulseParser.DURATIONOF, 0)
        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationofExpression" ):
                listener.enterDurationofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationofExpression" ):
                listener.exitDurationofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurationofExpression" ):
                return visitor.visitDurationofExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesisExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesisExpression" ):
                return visitor.visitParenthesisExpression(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def ComparisonOperator(self):
            return self.getToken(openpulseParser.ComparisonOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression" ):
                return visitor.visitComparisonExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicativeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(openpulseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(openpulseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(openpulseParser.PERCENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_PIPE(self):
            return self.getToken(openpulseParser.DOUBLE_PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)
        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)

        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class PowerExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_ASTERISK(self):
            return self.getToken(openpulseParser.DOUBLE_ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpression" ):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitwiseOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def PIPE(self):
            return self.getToken(openpulseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseOrExpression" ):
                listener.enterBitwiseOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseOrExpression" ):
                listener.exitBitwiseOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseOrExpression" ):
                return visitor.visitBitwiseOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)
        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpression" ):
                listener.enterCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpression" ):
                listener.exitCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpression" ):
                return visitor.visitCallExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitshiftExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def BitshiftOperator(self):
            return self.getToken(openpulseParser.BitshiftOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitshiftExpression" ):
                listener.enterBitshiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitshiftExpression" ):
                listener.exitBitshiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitshiftExpression" ):
                return visitor.visitBitshiftExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitwiseAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def AMPERSAND(self):
            return self.getToken(openpulseParser.AMPERSAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseAndExpression" ):
                listener.enterBitwiseAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseAndExpression" ):
                listener.exitBitwiseAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseAndExpression" ):
                return visitor.visitBitwiseAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class EqualityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def EqualityOperator(self):
            return self.getToken(openpulseParser.EqualityOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_AMPERSAND(self):
            return self.getToken(openpulseParser.DOUBLE_AMPERSAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class IndexExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def indexOperator(self):
            return self.getTypedRuleContext(openpulseParser.IndexOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def TILDE(self):
            return self.getToken(openpulseParser.TILDE, 0)
        def EXCLAMATION_POINT(self):
            return self.getToken(openpulseParser.EXCLAMATION_POINT, 0)
        def MINUS(self):
            return self.getToken(openpulseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)
        def BinaryIntegerLiteral(self):
            return self.getToken(openpulseParser.BinaryIntegerLiteral, 0)
        def OctalIntegerLiteral(self):
            return self.getToken(openpulseParser.OctalIntegerLiteral, 0)
        def DecimalIntegerLiteral(self):
            return self.getToken(openpulseParser.DecimalIntegerLiteral, 0)
        def HexIntegerLiteral(self):
            return self.getToken(openpulseParser.HexIntegerLiteral, 0)
        def FloatLiteral(self):
            return self.getToken(openpulseParser.FloatLiteral, 0)
        def ImaginaryLiteral(self):
            return self.getToken(openpulseParser.ImaginaryLiteral, 0)
        def BooleanLiteral(self):
            return self.getToken(openpulseParser.BooleanLiteral, 0)
        def BitstringLiteral(self):
            return self.getToken(openpulseParser.BitstringLiteral, 0)
        def TimingLiteral(self):
            return self.getToken(openpulseParser.TimingLiteral, 0)
        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openpulseParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = openpulseParser.ParenthesisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 523
                self.match(openpulseParser.LPAREN)
                self.state = 524
                self.expression(0)
                self.state = 525
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = openpulseParser.UnaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 527
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 528
                self.expression(15)
                pass

            elif la_ == 3:
                localctx = openpulseParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 531
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                    self.state = 529
                    self.scalarType()
                    pass
                elif token in [openpulseParser.ARRAY]:
                    self.state = 530
                    self.arrayType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 533
                self.match(openpulseParser.LPAREN)
                self.state = 534
                self.expression(0)
                self.state = 535
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = openpulseParser.DurationofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 537
                self.match(openpulseParser.DURATIONOF)
                self.state = 538
                self.match(openpulseParser.LPAREN)
                self.state = 539
                self.scope()
                self.state = 540
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = openpulseParser.CallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 542
                self.match(openpulseParser.Identifier)
                self.state = 543
                self.match(openpulseParser.LPAREN)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                    self.state = 544
                    self.expressionList()


                self.state = 547
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = openpulseParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 548
                _la = self._input.LA(1)
                if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (openpulseParser.BooleanLiteral - 55)) | (1 << (openpulseParser.ImaginaryLiteral - 55)) | (1 << (openpulseParser.BinaryIntegerLiteral - 55)) | (1 << (openpulseParser.OctalIntegerLiteral - 55)) | (1 << (openpulseParser.DecimalIntegerLiteral - 55)) | (1 << (openpulseParser.HexIntegerLiteral - 55)) | (1 << (openpulseParser.Identifier - 55)) | (1 << (openpulseParser.HardwareQubit - 55)) | (1 << (openpulseParser.FloatLiteral - 55)) | (1 << (openpulseParser.TimingLiteral - 55)) | (1 << (openpulseParser.BitstringLiteral - 55)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 588
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 586
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        localctx = openpulseParser.PowerExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 551
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 552
                        localctx.op = self.match(openpulseParser.DOUBLE_ASTERISK)
                        self.state = 553
                        self.expression(16)
                        pass

                    elif la_ == 2:
                        localctx = openpulseParser.MultiplicativeExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 554
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 555
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (openpulseParser.ASTERISK - 71)) | (1 << (openpulseParser.SLASH - 71)) | (1 << (openpulseParser.PERCENT - 71)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 556
                        self.expression(15)
                        pass

                    elif la_ == 3:
                        localctx = openpulseParser.AdditiveExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 557
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 558
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==openpulseParser.PLUS or _la==openpulseParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 559
                        self.expression(14)
                        pass

                    elif la_ == 4:
                        localctx = openpulseParser.BitshiftExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 560
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 561
                        localctx.op = self.match(openpulseParser.BitshiftOperator)
                        self.state = 562
                        self.expression(13)
                        pass

                    elif la_ == 5:
                        localctx = openpulseParser.ComparisonExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 563
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 564
                        localctx.op = self.match(openpulseParser.ComparisonOperator)
                        self.state = 565
                        self.expression(12)
                        pass

                    elif la_ == 6:
                        localctx = openpulseParser.EqualityExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 566
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 567
                        localctx.op = self.match(openpulseParser.EqualityOperator)
                        self.state = 568
                        self.expression(11)
                        pass

                    elif la_ == 7:
                        localctx = openpulseParser.BitwiseAndExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 569
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 570
                        localctx.op = self.match(openpulseParser.AMPERSAND)
                        self.state = 571
                        self.expression(10)
                        pass

                    elif la_ == 8:
                        localctx = openpulseParser.BitwiseXorExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 572
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 573
                        localctx.op = self.match(openpulseParser.CARET)
                        self.state = 574
                        self.expression(9)
                        pass

                    elif la_ == 9:
                        localctx = openpulseParser.BitwiseOrExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 575
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 576
                        localctx.op = self.match(openpulseParser.PIPE)
                        self.state = 577
                        self.expression(8)
                        pass

                    elif la_ == 10:
                        localctx = openpulseParser.LogicalAndExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 578
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 579
                        localctx.op = self.match(openpulseParser.DOUBLE_AMPERSAND)
                        self.state = 580
                        self.expression(7)
                        pass

                    elif la_ == 11:
                        localctx = openpulseParser.LogicalOrExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 581
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 582
                        localctx.op = self.match(openpulseParser.DOUBLE_PIPE)
                        self.state = 583
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = openpulseParser.IndexExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 584
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 585
                        self.indexOperator()
                        pass

             
                self.state = 590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AliasExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def DOUBLE_PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.DOUBLE_PLUS)
            else:
                return self.getToken(openpulseParser.DOUBLE_PLUS, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_aliasExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasExpression" ):
                listener.enterAliasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasExpression" ):
                listener.exitAliasExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasExpression" ):
                return visitor.visitAliasExpression(self)
            else:
                return visitor.visitChildren(self)




    def aliasExpression(self):

        localctx = openpulseParser.AliasExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_aliasExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.expression(0)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openpulseParser.DOUBLE_PLUS:
                self.state = 592
                self.match(openpulseParser.DOUBLE_PLUS)
                self.state = 593
                self.expression(0)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(openpulseParser.ArrayLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_declarationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationExpression" ):
                listener.enterDeclarationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationExpression" ):
                listener.exitDeclarationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationExpression" ):
                return visitor.visitDeclarationExpression(self)
            else:
                return visitor.visitChildren(self)




    def declarationExpression(self):

        localctx = openpulseParser.DeclarationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_declarationExpression)
        try:
            self.state = 602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.arrayLiteral()
                pass
            elif token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.expression(0)
                pass
            elif token in [openpulseParser.MEASURE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 601
                self.measureExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(openpulseParser.MEASURE, 0)

        def gateOperand(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_measureExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureExpression" ):
                listener.enterMeasureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureExpression" ):
                listener.exitMeasureExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureExpression" ):
                return visitor.visitMeasureExpression(self)
            else:
                return visitor.visitChildren(self)




    def measureExpression(self):

        localctx = openpulseParser.MeasureExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_measureExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(openpulseParser.MEASURE)
            self.state = 605
            self.gateOperand()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COLON)
            else:
                return self.getToken(openpulseParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = openpulseParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_rangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 607
                self.expression(0)


            self.state = 610
            self.match(openpulseParser.COLON)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 611
                self.expression(0)


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COLON:
                self.state = 614
                self.match(openpulseParser.COLON)
                self.state = 615
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_setExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExpression" ):
                listener.enterSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExpression" ):
                listener.exitSetExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetExpression" ):
                return visitor.visitSetExpression(self)
            else:
                return visitor.visitChildren(self)




    def setExpression(self):

        localctx = openpulseParser.SetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_setExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(openpulseParser.LBRACE)
            self.state = 619
            self.expression(0)
            self.state = 624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 620
                    self.match(openpulseParser.COMMA)
                    self.state = 621
                    self.expression(0) 
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 627
                self.match(openpulseParser.COMMA)


            self.state = 630
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def arrayLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ArrayLiteralContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ArrayLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = openpulseParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(openpulseParser.LBRACE)
            self.state = 635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 633
                self.expression(0)
                pass
            elif token in [openpulseParser.LBRACE]:
                self.state = 634
                self.arrayLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 637
                    self.match(openpulseParser.COMMA)
                    self.state = 640
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                        self.state = 638
                        self.expression(0)
                        pass
                    elif token in [openpulseParser.LBRACE]:
                        self.state = 639
                        self.arrayLiteral()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 647
                self.match(openpulseParser.COMMA)


            self.state = 650
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def setExpression(self):
            return self.getTypedRuleContext(openpulseParser.SetExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.RangeExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_indexOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOperator" ):
                listener.enterIndexOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOperator" ):
                listener.exitIndexOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOperator" ):
                return visitor.visitIndexOperator(self)
            else:
                return visitor.visitChildren(self)




    def indexOperator(self):

        localctx = openpulseParser.IndexOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(openpulseParser.LBRACKET)
            self.state = 671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.LBRACE]:
                self.state = 653
                self.setExpression()
                pass
            elif token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.COLON, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 654
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 655
                    self.rangeExpression()
                    pass


                self.state = 665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 658
                        self.match(openpulseParser.COMMA)
                        self.state = 661
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 659
                            self.expression(0)
                            pass

                        elif la_ == 2:
                            self.state = 660
                            self.rangeExpression()
                            pass

                 
                    self.state = 667
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.COMMA:
                    self.state = 668
                    self.match(openpulseParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 673
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def indexOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.IndexOperatorContext)
            else:
                return self.getTypedRuleContext(openpulseParser.IndexOperatorContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_indexedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedIdentifier" ):
                listener.enterIndexedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedIdentifier" ):
                listener.exitIndexedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedIdentifier" ):
                return visitor.visitIndexedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def indexedIdentifier(self):

        localctx = openpulseParser.IndexedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_indexedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(openpulseParser.Identifier)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openpulseParser.LBRACKET:
                self.state = 676
                self.indexOperator()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(openpulseParser.ARROW, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_returnSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnSignature" ):
                listener.enterReturnSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnSignature" ):
                listener.exitReturnSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnSignature" ):
                return visitor.visitReturnSignature(self)
            else:
                return visitor.visitChildren(self)




    def returnSignature(self):

        localctx = openpulseParser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(openpulseParser.ARROW)
            self.state = 683
            self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(openpulseParser.AT, 0)

        def INV(self):
            return self.getToken(openpulseParser.INV, 0)

        def POW(self):
            return self.getToken(openpulseParser.POW, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def CTRL(self):
            return self.getToken(openpulseParser.CTRL, 0)

        def NEGCTRL(self):
            return self.getToken(openpulseParser.NEGCTRL, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateModifier" ):
                listener.enterGateModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateModifier" ):
                listener.exitGateModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateModifier" ):
                return visitor.visitGateModifier(self)
            else:
                return visitor.visitChildren(self)




    def gateModifier(self):

        localctx = openpulseParser.GateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_gateModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.INV]:
                self.state = 685
                self.match(openpulseParser.INV)
                pass
            elif token in [openpulseParser.POW]:
                self.state = 686
                self.match(openpulseParser.POW)
                self.state = 687
                self.match(openpulseParser.LPAREN)
                self.state = 688
                self.expression(0)
                self.state = 689
                self.match(openpulseParser.RPAREN)
                pass
            elif token in [openpulseParser.CTRL, openpulseParser.NEGCTRL]:
                self.state = 691
                _la = self._input.LA(1)
                if not(_la==openpulseParser.CTRL or _la==openpulseParser.NEGCTRL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LPAREN:
                    self.state = 692
                    self.match(openpulseParser.LPAREN)
                    self.state = 693
                    self.expression(0)
                    self.state = 694
                    self.match(openpulseParser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 700
            self.match(openpulseParser.AT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QubitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUBIT(self):
            return self.getToken(openpulseParser.QUBIT, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_qubitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQubitType" ):
                listener.enterQubitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQubitType" ):
                listener.exitQubitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQubitType" ):
                return visitor.visitQubitType(self)
            else:
                return visitor.visitChildren(self)




    def qubitType(self):

        localctx = openpulseParser.QubitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_qubitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(openpulseParser.QUBIT)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LBRACKET:
                self.state = 703
                self.designator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(openpulseParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def COMMA(self):
            return self.getToken(openpulseParser.COMMA, 0)

        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = openpulseParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(openpulseParser.ARRAY)
            self.state = 707
            self.match(openpulseParser.LBRACKET)
            self.state = 708
            self.scalarType()
            self.state = 709
            self.match(openpulseParser.COMMA)
            self.state = 710
            self.expressionList()
            self.state = 711
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(openpulseParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def COMMA(self):
            return self.getToken(openpulseParser.COMMA, 0)

        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def READONLY(self):
            return self.getToken(openpulseParser.READONLY, 0)

        def MUTABLE(self):
            return self.getToken(openpulseParser.MUTABLE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def DIM(self):
            return self.getToken(openpulseParser.DIM, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_arrayReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceType" ):
                listener.enterArrayReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceType" ):
                listener.exitArrayReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceType" ):
                return visitor.visitArrayReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceType(self):

        localctx = openpulseParser.ArrayReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arrayReferenceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            _la = self._input.LA(1)
            if not(_la==openpulseParser.READONLY or _la==openpulseParser.MUTABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 714
            self.match(openpulseParser.ARRAY)
            self.state = 715
            self.match(openpulseParser.LBRACKET)
            self.state = 716
            self.scalarType()
            self.state = 717
            self.match(openpulseParser.COMMA)
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 718
                self.expressionList()
                pass
            elif token in [openpulseParser.DIM]:
                self.state = 719
                self.match(openpulseParser.DIM)
                self.state = 720
                self.match(openpulseParser.EQUALS)
                self.state = 721
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 724
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = openpulseParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(openpulseParser.LBRACKET)
            self.state = 727
            self.expression(0)
            self.state = 728
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(openpulseParser.MEASURE, 0)

        def RESET(self):
            return self.getToken(openpulseParser.RESET, 0)

        def DELAY(self):
            return self.getToken(openpulseParser.DELAY, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalTarget" ):
                listener.enterDefcalTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalTarget" ):
                listener.exitDefcalTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalTarget" ):
                return visitor.visitDefcalTarget(self)
            else:
                return visitor.visitChildren(self)




    def defcalTarget(self):

        localctx = openpulseParser.DefcalTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_defcalTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (openpulseParser.DELAY - 51)) | (1 << (openpulseParser.RESET - 51)) | (1 << (openpulseParser.MEASURE - 51)) | (1 << (openpulseParser.Identifier - 51)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalArgumentDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def argumentDefinition(self):
            return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defcalArgumentDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalArgumentDefinition" ):
                listener.enterDefcalArgumentDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalArgumentDefinition" ):
                listener.exitDefcalArgumentDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalArgumentDefinition" ):
                return visitor.visitDefcalArgumentDefinition(self)
            else:
                return visitor.visitChildren(self)




    def defcalArgumentDefinition(self):

        localctx = openpulseParser.DefcalArgumentDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_defcalArgumentDefinition)
        try:
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.argumentDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalOperand" ):
                listener.enterDefcalOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalOperand" ):
                listener.exitDefcalOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalOperand" ):
                return visitor.visitDefcalOperand(self)
            else:
                return visitor.visitChildren(self)




    def defcalOperand(self):

        localctx = openpulseParser.DefcalOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_defcalOperand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            _la = self._input.LA(1)
            if not(_la==openpulseParser.Identifier or _la==openpulseParser.HardwareQubit):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateOperand" ):
                listener.enterGateOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateOperand" ):
                listener.exitGateOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateOperand" ):
                return visitor.visitGateOperand(self)
            else:
                return visitor.visitChildren(self)




    def gateOperand(self):

        localctx = openpulseParser.GateOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gateOperand)
        try:
            self.state = 740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.indexedIdentifier()
                pass
            elif token in [openpulseParser.HardwareQubit]:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.match(openpulseParser.HardwareQubit)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayReferenceType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayReferenceTypeContext,0)


        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_externArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternArgument" ):
                listener.enterExternArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternArgument" ):
                listener.exitExternArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternArgument" ):
                return visitor.visitExternArgument(self)
            else:
                return visitor.visitChildren(self)




    def externArgument(self):

        localctx = openpulseParser.ExternArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_externArgument)
        self._la = 0 # Token type
        try:
            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.scalarType()
                pass
            elif token in [openpulseParser.READONLY, openpulseParser.MUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.arrayReferenceType()
                pass
            elif token in [openpulseParser.CREG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.match(openpulseParser.CREG)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 745
                    self.designator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def qubitType(self):
            return self.getTypedRuleContext(openpulseParser.QubitTypeContext,0)


        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def QREG(self):
            return self.getToken(openpulseParser.QREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def arrayReferenceType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayReferenceTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_argumentDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentDefinition" ):
                listener.enterArgumentDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentDefinition" ):
                listener.exitArgumentDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentDefinition" ):
                return visitor.visitArgumentDefinition(self)
            else:
                return visitor.visitChildren(self)




    def argumentDefinition(self):

        localctx = openpulseParser.ArgumentDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_argumentDefinition)
        self._la = 0 # Token type
        try:
            self.state = 764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.scalarType()
                self.state = 751
                self.match(openpulseParser.Identifier)
                pass
            elif token in [openpulseParser.QUBIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.qubitType()
                self.state = 754
                self.match(openpulseParser.Identifier)
                pass
            elif token in [openpulseParser.QREG, openpulseParser.CREG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 756
                _la = self._input.LA(1)
                if not(_la==openpulseParser.QREG or _la==openpulseParser.CREG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 757
                self.match(openpulseParser.Identifier)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 758
                    self.designator()


                pass
            elif token in [openpulseParser.READONLY, openpulseParser.MUTABLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 761
                self.arrayReferenceType()
                self.state = 762
                self.match(openpulseParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ArgumentDefinitionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_argumentDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentDefinitionList" ):
                listener.enterArgumentDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentDefinitionList" ):
                listener.exitArgumentDefinitionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentDefinitionList" ):
                return visitor.visitArgumentDefinitionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentDefinitionList(self):

        localctx = openpulseParser.ArgumentDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_argumentDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.argumentDefinition()
            self.state = 771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 767
                    self.match(openpulseParser.COMMA)
                    self.state = 768
                    self.argumentDefinition() 
                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 774
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalArgumentDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defcalArgumentDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.DefcalArgumentDefinitionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.DefcalArgumentDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalArgumentDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalArgumentDefinitionList" ):
                listener.enterDefcalArgumentDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalArgumentDefinitionList" ):
                listener.exitDefcalArgumentDefinitionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalArgumentDefinitionList" ):
                return visitor.visitDefcalArgumentDefinitionList(self)
            else:
                return visitor.visitChildren(self)




    def defcalArgumentDefinitionList(self):

        localctx = openpulseParser.DefcalArgumentDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_defcalArgumentDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.defcalArgumentDefinition()
            self.state = 782
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 778
                    self.match(openpulseParser.COMMA)
                    self.state = 779
                    self.defcalArgumentDefinition() 
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 785
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalOperandListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defcalOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.DefcalOperandContext)
            else:
                return self.getTypedRuleContext(openpulseParser.DefcalOperandContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalOperandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalOperandList" ):
                listener.enterDefcalOperandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalOperandList" ):
                listener.exitDefcalOperandList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalOperandList" ):
                return visitor.visitDefcalOperandList(self)
            else:
                return visitor.visitChildren(self)




    def defcalOperandList(self):

        localctx = openpulseParser.DefcalOperandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_defcalOperandList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.defcalOperand()
            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 789
                    self.match(openpulseParser.COMMA)
                    self.state = 790
                    self.defcalOperand() 
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 796
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = openpulseParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.expression(0)
            self.state = 804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 800
                    self.match(openpulseParser.COMMA)
                    self.state = 801
                    self.expression(0) 
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 807
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.Identifier)
            else:
                return self.getToken(openpulseParser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = openpulseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(openpulseParser.Identifier)
            self.state = 815
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 811
                    self.match(openpulseParser.COMMA)
                    self.state = 812
                    self.match(openpulseParser.Identifier) 
                self.state = 817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 818
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateOperandListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gateOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.GateOperandContext)
            else:
                return self.getTypedRuleContext(openpulseParser.GateOperandContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateOperandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateOperandList" ):
                listener.enterGateOperandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateOperandList" ):
                listener.exitGateOperandList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateOperandList" ):
                return visitor.visitGateOperandList(self)
            else:
                return visitor.visitChildren(self)




    def gateOperandList(self):

        localctx = openpulseParser.GateOperandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_gateOperandList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.gateOperand()
            self.state = 826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 822
                    self.match(openpulseParser.COMMA)
                    self.state = 823
                    self.gateOperand() 
                self.state = 828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 829
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExternArgumentContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExternArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_externArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternArgumentList" ):
                listener.enterExternArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternArgumentList" ):
                listener.exitExternArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternArgumentList" ):
                return visitor.visitExternArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def externArgumentList(self):

        localctx = openpulseParser.ExternArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_externArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.externArgument()
            self.state = 837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 833
                    self.match(openpulseParser.COMMA)
                    self.state = 834
                    self.externArgument() 
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 840
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[38] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 17)
         




