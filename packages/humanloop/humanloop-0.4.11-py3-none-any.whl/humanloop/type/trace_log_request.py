# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.  To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:  ```bash pip install humanloop ```  To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:  ```bash npm i humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

    The version of the OpenAPI document: 4.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal

from humanloop.type.agent_config_request import AgentConfigRequest
from humanloop.type.chat_message import ChatMessage
from humanloop.type.generic_config_request import GenericConfigRequest
from humanloop.type.tool_config_request import ToolConfigRequest
from humanloop.type.trace_model_config_request import TraceModelConfigRequest

class RequiredTraceLogRequest(TypedDict):
    # Unique function name. If no function exists with this name, a new function will be created.
    function_name: str

class OptionalTraceLogRequest(TypedDict, total=False):
    # Unique ID of an experiment trial to associate to the log.
    trial_id: str

    # The inputs passed to the prompt template.
    inputs: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # The messages passed to the to provider chat endpoint.
    messages: typing.List[ChatMessage]

    # Generated output from your model for the provided inputs. Can be `None` if logging an error.
    output: str

    # Identifies where the model was called from.
    source: str

    # The config used for this generation. Required unless `trial_id` is provided.
    config: typing.Union[TraceModelConfigRequest, ToolConfigRequest, GenericConfigRequest, AgentConfigRequest]

    # Any additional metadata to record.
    metadata: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Error message if the log is an error.
    error: str

    # Duration of the logged event in seconds.
    duration: typing.Union[int, float]

    # User-defined timestamp for when the log was created.
    created_at: datetime

    # List of children logs.
    children: typing.List["TraceLogRequest"]

class TraceLogRequest(RequiredTraceLogRequest, OptionalTraceLogRequest):
    pass
