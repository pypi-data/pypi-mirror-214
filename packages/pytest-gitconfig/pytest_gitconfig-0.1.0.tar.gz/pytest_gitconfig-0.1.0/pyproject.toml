[project]
name = "pytest-gitconfig"
description = "Provide a gitconfig sandbox for testing"
authors = [
    { name = "Axel Haustant", email = "noirbizarre@gmail.com" },
]
readme = "README.md"
requires-python = ">=3.7"
keywords = []
dynamic = []
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Typing :: Typed",
]
dependencies = []
version = "0.1.0"

[project.license]
text = "MIT"

[project.optional-dependencies]

[project.urls]
Homepage = "https://github.com/noirbizarre/pytest-gitconfig"
Documentation = "https://pytest-gitconfig.rtfd.io"
Repository = "https://github.com/noirbizarre/pytest-gitconfig"
Issues = "https://github.com/noirbizarre/pytest-gitconfig/issues"

[project.entry-points.pytest11]
myplugin = "pytest_gitconfig.plugin"

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[tool.pdm.version]
source = "scm"
write_to = "src/pytest_gitconfig/_version.py"
write_template = "__version__ = \"{}\""

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.1.2",
    "pytest-sugar>=0.9.5",
    "pytest-cov>=3.0.0",
]
lint = [
    "black>=23.3.0",
    "mypy>=1.3.0",
    "ruff>=0.0.270",
]
tox = [
    "tox",
    "tox-pdm>=0.5",
]
release = [
    "emotional",
]

[tool.pdm.scripts]
pre_cover = "coverage erase"
"pre_cover:tox" = "coverage erase"

[tool.pdm.scripts.test]
help = "Run the test suite"
cmd = "pytest"

[tool.pdm.scripts.lint]
help = "Lint all tracked files using pre-commit"
cmd = "pre-commit run --all-files"

[tool.pdm.scripts.format]
help = "Format the code according to known rules"
composite = [
    "codespell --write-changes",
    "ruff --fix-only --show-fixes src tests",
    "black src tests",
]

[tool.pdm.scripts.typing]
help = "Full typing linting (includes imported packages and uncommmited files)"
cmd = "mypy src tests --warn-unused-ignores"

[tool.pdm.scripts.cover]
help = "Run the test suite with coverage"
composite = [
    "  test\n    --cov-report=term\n    --cov=pytest_gitconfig\n    --cov-report=html:reports/coverage\n    --cov-report=xml:reports/coverage.xml\n    --no-cov-on-fail\n    --junitxml=reports/tests.xml\n  ",
]

[tool.pdm.scripts."cover:tox"]
help = "Run the test suite against all supported Python version"
composite = [
    "echo 'ðŸš¦ Tests'",
    "tox -p",
    "echo '\nðŸ“¸ Coverage'",
    "coverage report",
    "coverage xml -o reports/tox/coverage.xml",
    "coverage html -d reports/tox/coverage",
]

[tool.pdm.scripts.changelog]
help = "Update the changelog"
cmd = "cz changelog"

[tool.pdm.ide]
linters = [
    "ruff",
]
formatter = "black"
testing = "pytest"

[tool.commitizen]
name = "emotional"
github = "noirbizarre/pytest-gitconfig"
order_by_scope = true
version_provider = "scm"

[tool.pytest.ini_options]
addopts = "-ra"
norecursedirs = ".git build dist"
testpaths = [
    "src/",
    "tests/",
]

[tool.coverage.run]
source = [
    "src",
]
branch = true
omit = [
    "tests/*",
]

[tool.black]
line-length = 100

[tool.ruff]
line-length = 110
respect-gitignore = true
select = [
    "F",
    "E",
    "W",
    "C",
    "UP",
    "I001",
]
src = [
    "src",
    "tests",
]

[tool.ruff.isort]
known-first-party = [
    "pytest_gitconfig",
]
known-third-party = [
    "pytest",
]
lines-between-types = 1

[tool.mypy]
exclude = [
    "docs",
    "build",
    "dist",
]
