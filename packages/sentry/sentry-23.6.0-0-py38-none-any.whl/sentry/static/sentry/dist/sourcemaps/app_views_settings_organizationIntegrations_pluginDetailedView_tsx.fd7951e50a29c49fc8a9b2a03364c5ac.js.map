{"version":3,"file":"chunks/app_views_settings_organizationIntegrations_pluginDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationIntegrations/pluginDeprecationAlert.tsx","webpack:///./app/views/settings/organizationIntegrations/installedPlugin.tsx","webpack:///./app/views/settings/organizationIntegrations/pluginDetailedView.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, PluginWithProjectList} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  organization: Organization;\n  plugin: PluginWithProjectList;\n};\n\ntype State = {};\n\nclass PluginDeprecationAlert extends Component<Props, State> {\n  render() {\n    const {organization, plugin} = this.props;\n\n    // Short-circuit if not deprecated.\n    if (!plugin.deprecationDate) {\n      return <Fragment />;\n    }\n    const resource = plugin.altIsSentryApp ? 'sentry-apps' : 'integrations';\n    const upgradeUrl = `/settings/${organization.slug}/${resource}/${plugin.firstPartyAlternative}/`;\n    const queryParams = `?${\n      plugin.altIsSentryApp ? '' : 'tab=configurations&'\n    }referrer=directory_upgrade_now`;\n    return (\n      <div>\n        <Alert\n          type=\"warning\"\n          showIcon\n          trailingItems={\n            <UpgradeNowButton\n              href={`${upgradeUrl}${queryParams}`}\n              size=\"xs\"\n              onClick={() =>\n                trackIntegrationAnalytics('integrations.resolve_now_clicked', {\n                  integration_type: 'plugin',\n                  integration: plugin.slug,\n                  organization,\n                })\n              }\n            >\n              {t('Upgrade Now')}\n            </UpgradeNowButton>\n          }\n        >\n          {`This integration is being deprecated on ${plugin.deprecationDate}. Please upgrade to avoid any disruption.`}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nconst UpgradeNowButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  float: right;\n`;\n\nexport default PluginDeprecationAlert;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport Switch from 'sentry/components/switchButton';\nimport {IconDelete, IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {\n  AvatarProject,\n  Organization,\n  PluginNoProject,\n  PluginProjectItem,\n} from 'sentry/types';\nimport {IntegrationAnalyticsKey} from 'sentry/utils/analytics/integrations';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  onPluginEnableStatusChange: (projectId: string, status: boolean) => void;\n  onResetConfiguration: (projectId: string) => void;\n  organization: Organization;\n  plugin: PluginNoProject;\n  projectItem: PluginProjectItem;\n  trackIntegrationAnalytics: (eventKey: IntegrationAnalyticsKey) => void; // analytics callback\n  className?: string;\n};\n\nexport class InstalledPlugin extends Component<Props> {\n  get projectId() {\n    return this.props.projectItem.projectId;\n  }\n  getConfirmMessage() {\n    return (\n      <Fragment>\n        <Alert type=\"error\" showIcon>\n          {t(\n            'Deleting this installation will disable the integration for this project and remove any configurations.'\n          )}\n        </Alert>\n      </Fragment>\n    );\n  }\n\n  pluginUpdate = async (data: object, method: 'POST' | 'DELETE' = 'POST') => {\n    const {organization, projectItem, plugin} = this.props;\n    // no try/catch so the caller will have to have it\n    await this.props.api.requestPromise(\n      `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,\n      {\n        method,\n        data,\n      }\n    );\n  };\n\n  updatePluginEnableStatus = async (enabled: boolean) => {\n    if (enabled) {\n      await this.pluginUpdate({enabled});\n    } else {\n      await this.pluginUpdate({}, 'DELETE');\n    }\n  };\n\n  handleReset = async () => {\n    try {\n      addLoadingMessage(t('Removing...'));\n      await this.pluginUpdate({reset: true});\n      addSuccessMessage(t('Configuration was removed'));\n      this.props.onResetConfiguration(this.projectId);\n      this.props.trackIntegrationAnalytics('integrations.uninstall_completed');\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove configuration'));\n    }\n  };\n\n  handleUninstallClick = () => {\n    this.props.trackIntegrationAnalytics('integrations.uninstall_clicked');\n  };\n\n  toggleEnablePlugin = async (projectId: string, status: boolean = true) => {\n    try {\n      addLoadingMessage(t('Enabling...'));\n      await this.updatePluginEnableStatus(status);\n      addSuccessMessage(\n        status ? t('Configuration was enabled.') : t('Configuration was disabled.')\n      );\n      this.props.onPluginEnableStatusChange(projectId, status);\n      this.props.trackIntegrationAnalytics(\n        status ? 'integrations.enabled' : 'integrations.disabled'\n      );\n    } catch (_err) {\n      addErrorMessage(\n        status\n          ? t('Unable to enable configuration.')\n          : t('Unable to disable configuration.')\n      );\n    }\n  };\n\n  get projectForBadge(): AvatarProject {\n    // this function returns the project as needed for the ProjectBadge component\n    const {projectItem} = this.props;\n    return {\n      slug: projectItem.projectSlug,\n      platform: projectItem.projectPlatform ? projectItem.projectPlatform : undefined,\n    };\n  }\n\n  render() {\n    const {className, plugin, organization, projectItem} = this.props;\n    return (\n      <Container data-test-id=\"installed-plugin\">\n        <Access access={['org:integrations']}>\n          {({hasAccess}) => (\n            <IntegrationFlex className={className}>\n              <IntegrationItemBox>\n                <ProjectBadge project={this.projectForBadge} />\n              </IntegrationItemBox>\n              <div>\n                <StyledButton\n                  borderless\n                  icon={<IconSettings />}\n                  disabled={!hasAccess}\n                  to={`/settings/${organization.slug}/projects/${projectItem.projectSlug}/plugins/${plugin.id}/`}\n                  data-test-id=\"integration-configure-button\"\n                >\n                  {t('Configure')}\n                </StyledButton>\n              </div>\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  confirmText=\"Delete Installation\"\n                  onConfirm={() => this.handleReset()}\n                  message={this.getConfirmMessage()}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </div>\n              <Switch\n                isActive={projectItem.enabled}\n                toggle={() =>\n                  this.toggleEnablePlugin(projectItem.projectId, !projectItem.enabled)\n                }\n                isDisabled={!hasAccess}\n              />\n            </IntegrationFlex>\n          )}\n        </Access>\n      </Container>\n    );\n  }\n}\n\nexport default withApi(InstalledPlugin);\n\nconst Container = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1 0 fit-content;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  min-width: 0;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport * as modal from 'sentry/actionCreators/modal';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {Button} from 'sentry/components/button';\nimport ContextPickerModal from 'sentry/components/contextPickerModal';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {PluginProjectItem, PluginWithProjectList} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport InstalledPlugin from './installedPlugin';\nimport PluginDeprecationAlert from './pluginDeprecationAlert';\n\ntype State = {\n  plugins: PluginWithProjectList[];\n};\n\ntype Tab = AbstractIntegrationDetailedView['state']['tab'];\n\nclass PluginDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    const {integrationSlug} = this.props.params;\n    return [\n      [\n        'plugins',\n        `/organizations/${organization.slug}/plugins/configs/?plugins=${integrationSlug}`,\n      ],\n    ];\n  }\n\n  get integrationType() {\n    return 'plugin' as const;\n  }\n\n  get plugin() {\n    return this.state.plugins[0];\n  }\n\n  get description() {\n    return this.plugin.description || '';\n  }\n\n  get author() {\n    return this.plugin.author?.name;\n  }\n\n  get resourceLinks() {\n    return this.plugin.resourceLinks || [];\n  }\n\n  get installationStatus() {\n    return this.plugin.projectList.length > 0 ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return `${this.plugin.name}${this.plugin.isHidden ? ' (Legacy)' : ''}`;\n  }\n\n  get featureData() {\n    return this.plugin.featureDescriptions;\n  }\n\n  handleResetConfiguration = (projectId: string) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n    // remove from array\n    projectList.splice(index, 1);\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handlePluginEnableStatus = (projectId: string, enable: boolean = true) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n\n    // update item in array\n    projectList[index] = {\n      ...projectList[index],\n      enabled: enable,\n    };\n\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handleAddToProject = () => {\n    const plugin = this.plugin;\n    const {organization, router} = this.props;\n    this.trackIntegrationAnalytics('integrations.plugin_add_to_project_clicked');\n    modal.openModal(\n      modalProps => (\n        <ContextPickerModal\n          {...modalProps}\n          nextPath={`/settings/${organization.slug}/projects/:projectId/plugins/${plugin.id}/`}\n          needProject\n          needOrg={false}\n          onFinish={path => {\n            modalProps.closeModal();\n            router.push(normalizeUrl(path));\n          }}\n        />\n      ),\n      {closeEvents: 'escape-key'}\n    );\n  };\n\n  getTabDisplay(tab: Tab) {\n    // we want to show project configurations to make it more clear\n    if (tab === 'configurations') {\n      return 'project configurations';\n    }\n    return 'overview';\n  }\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    if (userHasAccess) {\n      return (\n        <AddButton\n          data-test-id=\"install-button\"\n          disabled={disabledFromFeatures}\n          onClick={this.handleAddToProject}\n          size=\"sm\"\n          priority=\"primary\"\n        >\n          {t('Add to Project')}\n        </AddButton>\n      );\n    }\n\n    return this.renderRequestIntegrationButton();\n  }\n\n  renderConfigurations() {\n    const plugin = this.plugin;\n    const {organization} = this.props;\n\n    if (plugin.projectList.length) {\n      return (\n        <Fragment>\n          <PluginDeprecationAlert organization={organization} plugin={plugin} />\n          <div>\n            {plugin.projectList.map((projectItem: PluginProjectItem) => (\n              <InstalledPlugin\n                key={projectItem.projectId}\n                organization={organization}\n                plugin={plugin}\n                projectItem={projectItem}\n                onResetConfiguration={this.handleResetConfiguration}\n                onPluginEnableStatusChange={this.handlePluginEnableStatus}\n                trackIntegrationAnalytics={this.trackIntegrationAnalytics}\n              />\n            ))}\n          </div>\n        </Fragment>\n      );\n    }\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst AddButton = styled(Button)`\n  margin-bottom: ${space(1)};\n`;\n\nexport default withOrganization(PluginDetailedView);\n"],"names":["PluginDeprecationAlert","Component","render","organization","plugin","this","props","deprecationDate","_jsx","Fragment","resource","altIsSentryApp","upgradeUrl","slug","firstPartyAlternative","queryParams","children","Alert","type","showIcon","trailingItems","UpgradeNowButton","href","size","onClick","trackIntegrationAnalytics","integration_type","integration","t","displayName","_styled","Button","target","p","theme","subText","InstalledPlugin","constructor","_this","arguments","_defineProperty","async","data","method","length","undefined","projectItem","api","requestPromise","projectSlug","id","enabled","pluginUpdate","addLoadingMessage","reset","addSuccessMessage","onResetConfiguration","projectId","_err","addErrorMessage","status","updatePluginEnableStatus","onPluginEnableStatusChange","getConfirmMessage","projectForBadge","platform","projectPlatform","className","Container","Access","access","_ref","hasAccess","_jsxs","IntegrationFlex","IntegrationItemBox","ProjectBadge","project","StyledButton","borderless","icon","IconSettings","disabled","to","Confirm","priority","onConfirming","handleUninstallClick","confirmText","onConfirm","handleReset","message","IconDelete","Switch","isActive","toggle","toggleEnablePlugin","isDisabled","withApi","space","border","background","gray300","name","styles","PluginDetailedView","AbstractIntegrationDetailedView","projectList","slice","index","findIndex","item","splice","setState","plugins","state","enable","router","modal","openModal","modalProps","ContextPickerModal","nextPath","needProject","needOrg","onFinish","path","closeModal","push","normalizeUrl","closeEvents","getEndpoints","integrationSlug","params","integrationType","description","author","resourceLinks","installationStatus","integrationName","isHidden","featureData","featureDescriptions","getTabDisplay","tab","renderTopButton","disabledFromFeatures","userHasAccess","AddButton","handleAddToProject","renderRequestIntegrationButton","renderConfigurations","map","handleResetConfiguration","handlePluginEnableStatus","renderEmptyConfigurations","withOrganization"],"sourceRoot":""}