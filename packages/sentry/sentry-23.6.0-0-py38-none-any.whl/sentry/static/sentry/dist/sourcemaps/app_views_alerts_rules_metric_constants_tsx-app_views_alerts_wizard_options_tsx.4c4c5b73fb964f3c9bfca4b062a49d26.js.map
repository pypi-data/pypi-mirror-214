{"version":3,"file":"chunks/app_views_alerts_rules_metric_constants_tsx-app_views_alerts_wizard_options_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/rules/metric/constants.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {AggregationKeyWithAlias, LooseFieldKey} from 'sentry/utils/discover/fields';\nimport {AggregationKey} from 'sentry/utils/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  Datasource,\n  EventTypes,\n  TimeWindow,\n  Trigger,\n  UnsavedMetricRule,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {\n  DATA_SOURCE_TO_SET_AND_EVENT_TYPES,\n  getQueryDatasource,\n  isSessionAggregate,\n} from 'sentry/views/alerts/utils';\nimport {AlertType, WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nexport const DEFAULT_COUNT_TIME_WINDOW = 1; // 1min\nexport const DEFAULT_CHANGE_TIME_WINDOW = 60; // 1h\nexport const DEFAULT_CHANGE_COMP_DELTA = 10080; // 1w\n\nexport const DEFAULT_AGGREGATE = 'count()';\nexport const DEFAULT_TRANSACTION_AGGREGATE = 'p95(transaction.duration)';\n\nexport const DATASET_EVENT_TYPE_FILTERS = {\n  [Dataset.ERRORS]: 'event.type:error',\n  [Dataset.TRANSACTIONS]: 'event.type:transaction',\n  [Dataset.GENERIC_METRICS]: 'event.type:transaction',\n} as const;\n\nexport const DATASOURCE_EVENT_TYPE_FILTERS = {\n  [Datasource.ERROR_DEFAULT]: 'event.type:[error, default]',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n} as const;\n\nexport type OptionConfig = {\n  aggregations: AggregationKeyWithAlias[];\n  fields: LooseFieldKey[];\n  measurementKeys?: string[];\n};\n\n/**\n * Allowed error aggregations for alerts\n */\nexport const errorFieldConfig: OptionConfig = {\n  aggregations: [AggregationKey.COUNT, AggregationKey.COUNT_UNIQUE],\n  fields: ['user'],\n};\n\nconst commonAggregations = [\n  AggregationKey.AVG,\n  AggregationKey.PERCENTILE,\n  AggregationKey.P50,\n  AggregationKey.P75,\n  AggregationKey.P95,\n  AggregationKey.P99,\n  AggregationKey.P100,\n];\n\nconst allAggregations = [\n  ...commonAggregations,\n  AggregationKey.FAILURE_RATE,\n  AggregationKey.APDEX,\n  AggregationKey.COUNT,\n];\n\nexport const DuplicateMetricFields: string[] = [\n  'dataset',\n  'eventTypes',\n  'aggregate',\n  'query',\n  'timeWindow',\n  'thresholdPeriod',\n  'projects',\n  'environment',\n  'resolveThreshold',\n  'thresholdType',\n  'owner',\n  'name',\n  'projectId',\n  'comparisonDelta',\n];\n\nexport const DuplicateTriggerFields: string[] = ['alertThreshold', 'label'];\n\nexport const DuplicateActionFields: string[] = [\n  'type',\n  'targetType',\n  'targetIdentifier',\n  'inputChannelId',\n  'options',\n];\n\nexport const COMPARISON_DELTA_OPTIONS = [\n  {value: 5, label: t('same time 5 minutes ago')}, // 5 minutes\n  {value: 15, label: t('same time 15 minutes ago')}, // 15 minutes\n  {value: 60, label: t('same time one hour ago')}, // one hour\n  {value: 1440, label: t('same time one day ago')}, // one day\n  {value: 10080, label: t('same time one week ago')}, // one week\n  {value: 43200, label: t('same time one month ago')}, // 30 days\n];\n\nexport function getWizardAlertFieldConfig(\n  alertType: AlertType,\n  dataset: Dataset\n): OptionConfig {\n  if (alertType === 'custom' && dataset === Dataset.ERRORS) {\n    return errorFieldConfig;\n  }\n  // If user selected apdex we must include that in the OptionConfig as it has a user specified column\n  const aggregations =\n    alertType === 'apdex' || alertType === 'custom'\n      ? allAggregations\n      : commonAggregations;\n  return {\n    aggregations,\n    fields: ['transaction.duration'],\n    measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n  };\n}\n\n/**\n * Allowed transaction aggregations for alerts\n */\nexport const transactionFieldConfig: OptionConfig = {\n  aggregations: allAggregations,\n  fields: ['transaction.duration'],\n  measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n};\n\nexport function createDefaultTrigger(label: AlertRuleTriggerType): Trigger {\n  return {\n    label,\n    alertThreshold: '',\n    actions: [],\n  };\n}\n\nexport function createDefaultRule(\n  defaultRuleOptions: Partial<UnsavedMetricRule> = {}\n): UnsavedMetricRule {\n  return {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n    aggregate: DEFAULT_AGGREGATE,\n    query: '',\n    timeWindow: 60,\n    thresholdPeriod: 1,\n    triggers: [\n      createDefaultTrigger(AlertRuleTriggerType.CRITICAL),\n      createDefaultTrigger(AlertRuleTriggerType.WARNING),\n    ],\n    projects: [],\n    environment: null,\n    resolveThreshold: '',\n    thresholdType: AlertRuleThresholdType.ABOVE,\n    ...defaultRuleOptions,\n  };\n}\n\n/**\n * Create an unsaved alert from a discover EventView object\n */\nexport function createRuleFromEventView(eventView: EventView): UnsavedMetricRule {\n  const parsedQuery = getQueryDatasource(eventView.query);\n  const datasetAndEventtypes = parsedQuery\n    ? DATA_SOURCE_TO_SET_AND_EVENT_TYPES[parsedQuery.source]\n    : DATA_SOURCE_TO_SET_AND_EVENT_TYPES.error;\n\n  let aggregate = eventView.getYAxis();\n  if (\n    datasetAndEventtypes.dataset === 'transactions' &&\n    /^p\\d{2,3}\\(\\)/.test(eventView.getYAxis())\n  ) {\n    // p95() -> p95(transaction.duration)\n    aggregate = eventView.getYAxis().slice(0, 3) + '(transaction.duration)';\n  }\n\n  return {\n    ...createDefaultRule(),\n    ...datasetAndEventtypes,\n    query: parsedQuery?.query ?? eventView.query,\n    aggregate,\n    environment: eventView.environment.length ? eventView.environment[0] : null,\n  };\n}\n\nexport function createRuleFromWizardTemplate(\n  wizardTemplate: WizardRuleTemplate\n): UnsavedMetricRule {\n  const {eventTypes, aggregate, dataset} = wizardTemplate;\n  const defaultRuleOptions: Partial<UnsavedMetricRule> = {};\n\n  if (isSessionAggregate(aggregate)) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n    defaultRuleOptions.timeWindow = TimeWindow.ONE_HOUR;\n  }\n\n  if (aggregate.includes('apdex')) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n  }\n\n  return {\n    ...createDefaultRule(defaultRuleOptions),\n    eventTypes: [eventTypes],\n    aggregate,\n    dataset,\n  };\n}\n\nexport function getThresholdUnits(\n  aggregate: string,\n  comparisonType: AlertRuleComparisonType\n): string {\n  // cls is a number not a measurement of time\n  if (\n    isSessionAggregate(aggregate) ||\n    comparisonType === AlertRuleComparisonType.CHANGE\n  ) {\n    return '%';\n  }\n\n  if (aggregate.includes('measurements.cls')) {\n    return '';\n  }\n\n  if (aggregate.includes('duration') || aggregate.includes('measurements')) {\n    return 'ms';\n  }\n\n  return '';\n}\n","import {t} from 'sentry/locale';\nimport {MEPAlertsQueryType} from 'sentry/views/alerts/wizard/options';\nimport type {SchemaFormConfig} from 'sentry/views/settings/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n  PERCENT = 'percent',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  /** Also used for performance alerts **/\n  GENERIC_METRICS = 'generic_metrics',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n  queryType?: MEPAlertsQueryType | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import round from 'lodash/round';\n\nimport {t} from 'sentry/locale';\nimport {Organization, SessionFieldWithOperation} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport toArray from 'sentry/utils/toArray';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  MetricRule,\n  SavedMetricRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertRuleStatus, Incident, IncidentStats} from '../types';\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedMetricRule | MetricRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions and generic_metrics only have one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS || dataset === Dataset.GENERIC_METRICS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionFieldWithOperation.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionFieldWithOperation.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, aggregateOutputType(seriesName));\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, aggregateOutputType(seriesName));\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n\nexport function alertDetailsLink(organization: Organization, incident: Incident) {\n  return `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n}\n\n/**\n * Noramlizes a status string\n */\nexport function getQueryStatus(status: string | string[]): string {\n  if (Array.isArray(status) || status === '') {\n    return 'all';\n  }\n\n  return ['open', 'closed'].includes(status) ? status : 'all';\n}\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\n/**\n * Noramlize a team slug from the query\n */\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  return toArray(team);\n}\n","import mapValues from 'lodash/mapValues';\n\nimport {t} from 'sentry/locale';\nimport {Organization, TagCollection} from 'sentry/types';\nimport {\n  FieldKey,\n  makeTagCollection,\n  MobileVital,\n  ReplayClickFieldKey,\n  ReplayFieldKey,\n  SpanOpBreakdown,\n  WebVital,\n} from 'sentry/utils/fields';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport enum MEPAlertsQueryType {\n  ERROR = 0,\n  PERFORMANCE = 1,\n  CRASH_RATE = 2,\n}\n\nexport enum MEPAlertsDataset {\n  DISCOVER = 'discover',\n  METRICS = 'metrics',\n  METRICS_ENHANCED = 'metricsEnhanced',\n}\n\nexport type MetricAlertType = Exclude<AlertType, 'issues'>;\n\nexport const DatasetMEPAlertQueryTypes: Record<Dataset, MEPAlertsQueryType> = {\n  [Dataset.ERRORS]: MEPAlertsQueryType.ERROR,\n  [Dataset.TRANSACTIONS]: MEPAlertsQueryType.PERFORMANCE,\n  [Dataset.GENERIC_METRICS]: MEPAlertsQueryType.PERFORMANCE,\n  [Dataset.METRICS]: MEPAlertsQueryType.CRASH_RATE,\n  [Dataset.SESSIONS]: MEPAlertsQueryType.CRASH_RATE,\n};\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {\n  categoryHeading: string;\n  options: AlertType[];\n};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  MetricAlertType,\n  Readonly<WizardRuleTemplate>\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(user)',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const DEFAULT_WIZARD_TEMPLATE = AlertWizardRuleTemplates.num_errors;\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nconst TRANSACTION_SUPPORTED_TAGS = [\n  FieldKey.RELEASE,\n  FieldKey.TRANSACTION,\n  FieldKey.TRANSACTION_OP,\n  FieldKey.TRANSACTION_STATUS,\n  FieldKey.HTTP_METHOD,\n];\nconst SESSION_SUPPORTED_TAGS = [FieldKey.RELEASE];\n\n// This is purely for testing purposes, use with alert-allow-indexed feature flag\nconst INDEXED_PERFORMANCE_ALERTS_OMITTED_TAGS = [\n  FieldKey.AGE,\n  FieldKey.ASSIGNED,\n  FieldKey.ASSIGNED_OR_SUGGESTED,\n  FieldKey.BOOKMARKS,\n  FieldKey.DEVICE_MODEL_ID,\n  FieldKey.EVENT_TIMESTAMP,\n  FieldKey.EVENT_TYPE,\n  FieldKey.FIRST_RELEASE,\n  FieldKey.FIRST_SEEN,\n  FieldKey.IS,\n  FieldKey.ISSUE_CATEGORY,\n  FieldKey.ISSUE_TYPE,\n  FieldKey.LAST_SEEN,\n  FieldKey.PLATFORM_NAME,\n  ...Object.values(WebVital),\n  ...Object.values(MobileVital),\n  ...Object.values(ReplayFieldKey),\n  ...Object.values(ReplayClickFieldKey),\n];\n\n// Some data sets support a very limited number of tags. For these cases,\n// define all supported tags explicitly\nexport function datasetSupportedTags(\n  dataset: Dataset,\n  org: Organization\n): TagCollection | undefined {\n  return mapValues(\n    {\n      [Dataset.ERRORS]: undefined,\n      [Dataset.TRANSACTIONS]: org.features.includes('alert-allow-indexed')\n        ? undefined\n        : TRANSACTION_SUPPORTED_TAGS,\n      [Dataset.METRICS]: SESSION_SUPPORTED_TAGS,\n      [Dataset.GENERIC_METRICS]: org.features.includes('alert-allow-indexed')\n        ? undefined\n        : TRANSACTION_SUPPORTED_TAGS,\n      [Dataset.SESSIONS]: SESSION_SUPPORTED_TAGS,\n    },\n    value => {\n      return value ? makeTagCollection(value) : undefined;\n    }\n  )[dataset];\n}\n\n// Some data sets support all tags except some. For these cases, define the\n// omissions only\nexport function datasetOmittedTags(\n  dataset: Dataset,\n  org: Organization\n):\n  | Array<\n      | FieldKey\n      | WebVital\n      | MobileVital\n      | SpanOpBreakdown\n      | ReplayFieldKey\n      | ReplayClickFieldKey\n    >\n  | undefined {\n  return {\n    [Dataset.ERRORS]: [\n      FieldKey.EVENT_TYPE,\n      FieldKey.RELEASE_VERSION,\n      FieldKey.RELEASE_STAGE,\n      FieldKey.RELEASE_BUILD,\n      FieldKey.PROJECT,\n      ...Object.values(WebVital),\n      ...Object.values(MobileVital),\n      ...Object.values(SpanOpBreakdown),\n      FieldKey.TRANSACTION,\n      FieldKey.TRANSACTION_DURATION,\n      FieldKey.TRANSACTION_OP,\n      FieldKey.TRANSACTION_STATUS,\n    ],\n    [Dataset.TRANSACTIONS]: org.features.includes('alert-allow-indexed')\n      ? INDEXED_PERFORMANCE_ALERTS_OMITTED_TAGS\n      : undefined,\n    [Dataset.METRICS]: undefined,\n    [Dataset.GENERIC_METRICS]: org.features.includes('alert-allow-indexed')\n      ? INDEXED_PERFORMANCE_ALERTS_OMITTED_TAGS\n      : undefined,\n    [Dataset.SESSIONS]: undefined,\n  }[dataset];\n}\n\nexport function getMEPAlertsDataset(\n  dataset: Dataset,\n  newAlert: boolean\n): MEPAlertsDataset {\n  // Dataset.ERRORS overrides all cases\n  if (dataset === Dataset.ERRORS) {\n    return MEPAlertsDataset.DISCOVER;\n  }\n\n  if (newAlert) {\n    return MEPAlertsDataset.METRICS_ENHANCED;\n  }\n\n  if (dataset === Dataset.GENERIC_METRICS) {\n    return MEPAlertsDataset.METRICS;\n  }\n\n  return MEPAlertsDataset.DISCOVER;\n}\n"],"names":["DEFAULT_COUNT_TIME_WINDOW","DEFAULT_CHANGE_TIME_WINDOW","DEFAULT_CHANGE_COMP_DELTA","DEFAULT_AGGREGATE","DEFAULT_TRANSACTION_AGGREGATE","DATASET_EVENT_TYPE_FILTERS","Dataset","DATASOURCE_EVENT_TYPE_FILTERS","Datasource","errorFieldConfig","aggregations","AggregationKey","fields","commonAggregations","allAggregations","DuplicateMetricFields","DuplicateTriggerFields","DuplicateActionFields","COMPARISON_DELTA_OPTIONS","value","label","t","getWizardAlertFieldConfig","alertType","dataset","measurementKeys","Object","keys","WEB_VITAL_DETAILS","transactionFieldConfig","createDefaultTrigger","alertThreshold","actions","createDefaultRule","defaultRuleOptions","arguments","length","undefined","eventTypes","EventTypes","aggregate","query","timeWindow","thresholdPeriod","triggers","AlertRuleTriggerType","projects","environment","resolveThreshold","thresholdType","AlertRuleThresholdType","createRuleFromEventView","eventView","parsedQuery","getQueryDatasource","datasetAndEventtypes","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","source","getYAxis","test","slice","createRuleFromWizardTemplate","wizardTemplate","isSessionAggregate","TimeWindow","includes","getThresholdUnits","comparisonType","AlertRuleComparisonType","SessionsAggregate","TimePeriod","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","AlertRuleType","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus","CombinedAlertType","isIssueAlert","data","hasOwnProperty","DATA_SOURCE_LABELS","convertDatasetEventTypesToSource","match","sort","join","replace","trim","toUpperCase","values","SESSION_AGGREGATE_TO_FIELD","SessionFieldWithOperation","alertAxisFormatter","seriesName","defined","round","axisLabelFormatter","aggregateOutputType","alertTooltipValueFormatter","tooltipFormatter","ALERT_CHART_MIN_MAX_BUFFER","shouldScaleAlertChart","alertDetailsLink","organization","incident","slug","alertRule","status","originalAlertRuleId","id","getQueryStatus","Array","isArray","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","team","toArray","MEPAlertsQueryType","MEPAlertsDataset","DatasetMEPAlertQueryTypes","ERROR","PERFORMANCE","CRASH_RATE","AlertWizardAlertNames","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","crash_free_sessions","crash_free_users","getAlertWizardCategories","org","categoryHeading","options","features","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","hidePrimarySelectorSet","Set","hideParameterSelectorSet","TRANSACTION_SUPPORTED_TAGS","FieldKey","SESSION_SUPPORTED_TAGS","INDEXED_PERFORMANCE_ALERTS_OMITTED_TAGS","WebVital","MobileVital","ReplayFieldKey","ReplayClickFieldKey","datasetSupportedTags","mapValues","makeTagCollection","datasetOmittedTags","SpanOpBreakdown","getMEPAlertsDataset","newAlert","DISCOVER","METRICS_ENHANCED","METRICS"],"sourceRoot":""}