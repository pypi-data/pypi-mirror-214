{"version":3,"file":"chunks/app_views_settings_project_projectServiceHookDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHookDetails.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {Button} from 'sentry/components/button';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t} from 'sentry/locale';\nimport {Organization, ServiceHook} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'sentry/views/settings/project/serviceHookSettingsForm';\n\ntype Params = {\n  hookId: string;\n  projectId: string;\n};\n\ntype StatsProps = {\n  organization: Organization;\n  params: Params;\n};\n\ntype StatsState = {\n  stats: {total: number; ts: number}[] | null;\n} & AsyncComponent['state'];\n\nclass HookStats extends AsyncComponent<StatsProps, StatsState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    const {organization} = this.props;\n    const {hookId, projectId} = this.props.params;\n    return [\n      [\n        'stats',\n        `/projects/${organization.slug}/${projectId}/hooks/${hookId}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    const {stats} = this.state;\n    if (stats === null) {\n      return null;\n    }\n    let emptyStats = true;\n\n    const series = {\n      seriesName: t('Events'),\n      data: stats.map(p => {\n        if (p.total) {\n          emptyStats = false;\n        }\n        return {\n          name: p.ts * 1000,\n          value: p.total,\n        };\n      }),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Events in the last 30 days (by day)')}</PanelHeader>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              series={[series]}\n              height={150}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('Total webhooks fired for this configuration.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype Props = {\n  organization: Organization;\n  params: Params;\n};\ntype State = {\n  hook: ServiceHook | null;\n} & AsyncView['state'];\n\nexport default class ProjectServiceHookDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId, hookId} = this.props.params;\n    return [['hook', `/projects/${organization.slug}/${projectId}/hooks/${hookId}/`]];\n  }\n\n  onDelete = () => {\n    const {organization} = this.props;\n    const {projectId, hookId} = this.props.params;\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(`/projects/${organization.slug}/${projectId}/hooks/${hookId}/`, {\n      method: 'DELETE',\n      success: () => {\n        clearIndicators();\n        browserHistory.push(\n          normalizeUrl(`/settings/${organization.slug}/projects/${projectId}/hooks/`)\n        );\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderBody() {\n    const {organization, params} = this.props;\n    const {projectId, hookId} = params;\n    const {hook} = this.state;\n    if (!hook) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Service Hook Details')} />\n\n        <ErrorBoundary>\n          <HookStats params={params} organization={organization} />\n        </ErrorBoundary>\n\n        <ServiceHookSettingsForm\n          organization={organization}\n          projectId={projectId}\n          hookId={hookId}\n          initialData={{\n            ...hook,\n            isActive: hook.status !== 'disabled',\n          }}\n        />\n        <Panel>\n          <PanelHeader>{t('Event Validation')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\" showIcon>\n              Sentry will send the <code>X-ServiceHook-Signature</code> header built using{' '}\n              <code>HMAC(SHA256, [secret], [payload])</code>. You should always verify\n              this signature before trusting the information provided in the webhook.\n            </PanelAlert>\n            <FieldGroup\n              label={t('Secret')}\n              flexibleControlStateSize\n              inline={false}\n              help={t('The shared secret used for generating event HMAC signatures.')}\n            >\n              <TextCopyInput>\n                {getDynamicText({\n                  value: hook.secret,\n                  fixed: 'a dynamic secret value',\n                })}\n              </TextCopyInput>\n            </FieldGroup>\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Delete Hook')}</PanelHeader>\n          <PanelBody>\n            <FieldGroup\n              label={t('Delete Hook')}\n              help={t('Removing this hook is immediate and permanent.')}\n            >\n              <div>\n                <Button priority=\"danger\" onClick={this.onDelete}>\n                  {t('Delete Hook')}\n                </Button>\n              </div>\n            </FieldGroup>\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport BooleanField from 'sentry/components/forms/fields/booleanField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport FormField from 'sentry/components/forms/formField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Organization, ServiceHook} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nconst EVENT_CHOICES = ['event.alert', 'event.created'];\n\ntype Props = {\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  organization: Organization;\n  projectId: string;\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {organization, projectId} = this.props;\n    browserHistory.push(\n      normalizeUrl(`/settings/${organization.slug}/projects/${projectId}/hooks/`)\n    );\n  };\n\n  render() {\n    const {initialData, organization, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${organization.slug}/${projectId}/hooks/${hookId}/`\n      : `/projects/${organization.slug}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({name, value, onChange}) => (\n                <MultipleCheckbox onChange={onChange} value={value} name={name}>\n                  {EVENT_CHOICES.map(event => (\n                    <MultipleCheckbox.Item key={event} value={event}>\n                      {event}\n                    </MultipleCheckbox.Item>\n                  ))}\n                </MultipleCheckbox>\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"names":["AsyncView","AsyncComponent","getTitle","render","_jsx","SentryDocumentTitle","title","this","children","renderComponent","displayName","HookStats","getEndpoints","until","Math","floor","Date","getTime","since","organization","props","hookId","projectId","params","slug","query","resolution","renderBody","stats","state","emptyStats","series","seriesName","t","data","map","p","total","name","ts","value","_jsxs","Panel","PanelHeader","PanelBody","withPadding","EmptyMessage","description","MiniBarChart","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","height","ProjectServiceHookDetails","constructor","arguments","_defineProperty","addLoadingMessage","api","request","method","success","clearIndicators","browserHistory","normalizeUrl","error","addErrorMessage","hook","Fragment","SettingsPageHeader","ErrorBoundary","ServiceHookSettingsForm","initialData","isActive","status","PanelAlert","type","showIcon","FieldGroup","label","flexibleControlStateSize","inline","help","TextCopyInput","getDynamicText","secret","fixed","Button","priority","onClick","onDelete","EVENT_CHOICES","Component","endpoint","ApiForm","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","BooleanField","TextField","required","FormField","_ref","onChange","MultipleCheckbox","event"],"sourceRoot":""}