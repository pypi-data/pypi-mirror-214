{"version":3,"file":"chunks/app_views_performance_breadcrumb_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/views/performance/breadcrumb.tsx","webpack:///./app/views/performance/transactionSummary/tabs.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/types.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionTags/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/utils.tsx"],"sourcesContent":["import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Location, LocationDescriptor} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport Tab from './transactionSummary/tabs';\nimport {eventsRouteWithQuery} from './transactionSummary/transactionEvents/utils';\nimport {spansRouteWithQuery} from './transactionSummary/transactionSpans/utils';\nimport {tagsRouteWithQuery} from './transactionSummary/transactionTags/utils';\nimport {vitalsRouteWithQuery} from './transactionSummary/transactionVitals/utils';\nimport {transactionSummaryRouteWithQuery} from './transactionSummary/utils';\nimport {vitalDetailRouteWithQuery} from './vitalDetail/utils';\nimport {getPerformanceLandingUrl} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  eventSlug?: string;\n  spanSlug?: SpanSlug;\n  tab?: Tab;\n  traceSlug?: string;\n  transaction?: {\n    name: string;\n    project: string;\n  };\n  vitalName?: string;\n};\n\nfunction Breadcrumb(props: Props) {\n  function getCrumbs() {\n    const crumbs: Crumb[] = [];\n    const {\n      organization,\n      location,\n      transaction,\n      vitalName,\n      spanSlug,\n      eventSlug,\n      traceSlug,\n      tab,\n    } = props;\n\n    const performanceTarget: LocationDescriptor = {\n      pathname: getPerformanceLandingUrl(organization),\n      query: {\n        ...location.query,\n        // clear out the transaction name\n        transaction: undefined,\n      },\n    };\n\n    crumbs.push({\n      to: performanceTarget,\n      label: t('Performance'),\n      preservePageFilters: true,\n    });\n\n    if (vitalName) {\n      const webVitalsTarget = vitalDetailRouteWithQuery({\n        orgSlug: organization.slug,\n        vitalName: 'fcp',\n        projectID: decodeScalar(location.query.project),\n        query: location.query,\n      });\n      crumbs.push({\n        to: webVitalsTarget,\n        label: t('Vital Detail'),\n        preservePageFilters: true,\n      });\n    } else if (transaction) {\n      const routeQuery = {\n        orgSlug: organization.slug,\n        transaction: transaction.name,\n        projectID: transaction.project,\n        query: location.query,\n      };\n\n      switch (tab) {\n        case Tab.TAGS: {\n          const tagsTarget = tagsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: tagsTarget,\n            label: t('Tags'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.EVENTS: {\n          const eventsTarget = eventsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: eventsTarget,\n            label: t('All Events'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.WEB_VITALS: {\n          const webVitalsTarget = vitalsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: webVitalsTarget,\n            label: t('Web Vitals'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.SPANS: {\n          const spansTarget = spansRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: spansTarget,\n            label: t('Spans'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.TRANSACTION_SUMMARY:\n        default: {\n          const summaryTarget = transactionSummaryRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: summaryTarget,\n            label: t('Transaction Summary'),\n            preservePageFilters: true,\n          });\n        }\n      }\n    }\n\n    if (transaction && spanSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Span Summary'),\n      });\n    } else if (transaction && eventSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Event Details'),\n      });\n    } else if (traceSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Trace View'),\n      });\n    }\n\n    return crumbs;\n  }\n\n  return <Breadcrumbs crumbs={getCrumbs()} />;\n}\n\nexport default Breadcrumb;\n","enum Tab {\n  TRANSACTION_SUMMARY = 'summary',\n  WEB_VITALS = 'vitals',\n  TAGS = 'tags',\n  EVENTS = 'events',\n  SPANS = 'spans',\n  ANOMALIES = 'anomalies',\n  REPLAYS = 'replays',\n  PROFILING = 'profiling',\n}\n\nexport default Tab;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  P100 = 'p100',\n}\n\nexport type PercentileValues = Record<EventsDisplayFilterName, number>;\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.P100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.P50]: {\n      name: EventsDisplayFilterName.P50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.P75]: {\n      name: EventsDisplayFilterName.P75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.P95]: {\n      name: EventsDisplayFilterName.P95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.P99]: {\n      name: EventsDisplayFilterName.P99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.P100]: {\n      name: EventsDisplayFilterName.P100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.P100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.P100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.P100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.P95;\n    default:\n      return undefined;\n  }\n}\n\nexport function mapPercentileValues(percentileData?: TableDataRow | null) {\n  return {\n    p100: percentileData?.['p100()'],\n    p99: percentileData?.['p99()'],\n    p95: percentileData?.['p95()'],\n    p75: percentileData?.['p75()'],\n    p50: percentileData?.['p50()'],\n  } as PercentileValues;\n}\n\nexport function getPercentilesEventView(eventView: EventView): EventView {\n  const percentileColumns: QueryFieldValue[] = [\n    {\n      kind: 'function',\n      function: ['p100', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p99', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p95', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p50', '', undefined, undefined],\n    },\n  ];\n\n  return eventView.withColumns(percentileColumns);\n}\n","export enum SpanSortPercentiles {\n  P50_EXCLUSIVE_TIME = 'p50ExclusiveTime',\n  P75_EXCLUSIVE_TIME = 'p75ExclusiveTime',\n  P95_EXCLUSIVE_TIME = 'p95ExclusiveTime',\n  P99_EXCLUSIVE_TIME = 'p99ExclusiveTime',\n}\n\nexport enum SpanSortOthers {\n  AVG_OCCURRENCE = 'avgOccurrence',\n  SUM_EXCLUSIVE_TIME = 'sumExclusiveTime',\n}\n\nexport type SpanSort = SpanSortPercentiles | SpanSortOthers;\n\nexport type SpanSortOption = {\n  field: SpanSort;\n  label: string;\n  prefix: string;\n};\n\nexport type SpansTotalValues = {\n  'count()': number;\n};\n","import {Location, Query} from 'history';\nimport pick from 'lodash/pick';\n\nimport {DEFAULT_RELATIVE_PERIODS} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {SpanSort, SpanSortOption, SpanSortOthers, SpanSortPercentiles} from './types';\n\nexport function generateSpansRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/summary/spans/`;\n}\n\nexport function spansRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateSpansRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport const SPAN_RETENTION_DAYS = 30;\n\nexport const SPAN_RELATIVE_PERIODS = pick(DEFAULT_RELATIVE_PERIODS, [\n  '1h',\n  '24h',\n  '7d',\n  '14d',\n  '30d',\n]);\n\nexport const SPAN_SORT_OPTIONS: SpanSortOption[] = [\n  {\n    prefix: t('Sort By'),\n    label: t('Total Self Time'),\n    field: SpanSortOthers.SUM_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('Average Count'),\n    field: SpanSortOthers.AVG_OCCURRENCE,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p50 Self Time'),\n    field: SpanSortPercentiles.P50_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p75 Self Time'),\n    field: SpanSortPercentiles.P75_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p95 Self Time'),\n    field: SpanSortPercentiles.P95_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p99 Self Time'),\n    field: SpanSortPercentiles.P99_EXCLUSIVE_TIME,\n  },\n];\n\nconst DEFAULT_SORT = SpanSortOthers.SUM_EXCLUSIVE_TIME;\n\nfunction getSuspectSpanSort(sort: string): SpanSortOption {\n  const selected = SPAN_SORT_OPTIONS.find(option => option.field === sort);\n  if (selected) {\n    return selected;\n  }\n  return SPAN_SORT_OPTIONS.find(option => option.field === DEFAULT_SORT)!;\n}\n\nexport function getSuspectSpanSortFromLocation(\n  location: Location,\n  sortKey: string = 'sort'\n): SpanSortOption {\n  const sort = decodeScalar(location?.query?.[sortKey]) ?? DEFAULT_SORT;\n  return getSuspectSpanSort(sort);\n}\n\nexport function getSuspectSpanSortFromEventView(eventView: EventView): SpanSortOption {\n  const sort = eventView.sorts.length ? eventView.sorts[0].field : DEFAULT_SORT;\n  return getSuspectSpanSort(sort);\n}\n\nexport function parseSpanSlug(spanSlug: string | undefined): SpanSlug | undefined {\n  if (!defined(spanSlug)) {\n    return undefined;\n  }\n\n  const delimiterPos = spanSlug.lastIndexOf(':');\n  if (delimiterPos < 0) {\n    return undefined;\n  }\n\n  const op = spanSlug.slice(0, delimiterPos);\n  const group = spanSlug.slice(delimiterPos + 1);\n\n  return {op, group};\n}\n\nexport function generateSpansEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}): EventView {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  const eventView = EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields: [...Object.values(SpanSortOthers), ...Object.values(SpanSortPercentiles)],\n      query: conditions.formatString(),\n      projects: [],\n    },\n    location\n  );\n\n  const sort = getSuspectSpanSortFromLocation(location);\n  return eventView.withSorts([{field: sort.field, kind: 'desc'}]);\n}\n\n/**\n * For the totals view, we want to get some transaction level stats like\n * the number of transactions and the sum of the transaction duration.\n * This requires the removal of any aggregate conditions as they can result\n * in unexpected empty responses.\n */\nexport function getTotalsView(eventView: EventView): EventView {\n  const totalsView = eventView.withColumns([\n    {kind: 'function', function: ['count', '', undefined, undefined]},\n    {kind: 'function', function: ['sum', 'transaction.duration', undefined, undefined]},\n  ]);\n\n  const conditions = new MutableSearch(eventView.query);\n\n  // filter out any aggregate conditions\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  totalsView.query = conditions.formatString();\n  return totalsView;\n}\n\nexport const SPAN_SORT_TO_FIELDS: Record<SpanSort, string[]> = {\n  [SpanSortOthers.SUM_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortOthers.AVG_OCCURRENCE]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'equation|count() / count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P50_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.5)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P75_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P95_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.95)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P99_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.99)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n};\n\nexport function getExclusiveTimeDisplayedValue(value: string): string {\n  return value.replace('exclusive', 'self');\n}\n","import {Location, Query} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nexport function generateTagsRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/summary/tags/`;\n}\n\nexport function decodeSelectedTagKey(location: Location): string | undefined {\n  return decodeScalar(location.query.tagKey);\n}\n\nexport function trackTagPageInteraction(organization: Organization) {\n  trackAnalytics('performance_views.tags.interaction', {organization});\n}\n\nexport function tagsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateTagsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      tagKey: query.tagKey,\n    },\n  };\n}\n\nexport function getTagSortForTagsPage(location: Location) {\n  // Retrieves the tag from the same query param segment explorer uses, but removes columns that aren't supported.\n  let tagSort = decodeScalar(location.query?.tagSort) ?? '-frequency';\n\n  if (['sumdelta'].find(denied => tagSort?.includes(denied))) {\n    tagSort = '-frequency';\n  }\n\n  return tagSort;\n}\n\n// TODO(k-fish): Improve meta of backend response to return these directly\nexport function parseHistogramBucketInfo(row: {[key: string]: React.ReactText}) {\n  const field = Object.keys(row).find(f => f.includes('histogram'));\n  if (!field) {\n    return undefined;\n  }\n  const parts = field.split('_');\n  return {\n    histogramField: field,\n    bucketSize: parseInt(parts[parts.length - 3], 10),\n    offset: parseInt(parts[parts.length - 2], 10),\n    multiplier: parseInt(parts[parts.length - 1], 10),\n  };\n}\n","import type {ECharts} from 'echarts';\nimport {Query} from 'history';\n\nimport {WebVital} from 'sentry/utils/fields';\nimport {HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {getBucketWidth} from 'sentry/utils/performance/histogram/utils';\nimport {VitalsData} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\n\nimport {Point, Rectangle} from './types';\n\nexport function generateVitalsRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/summary/vitals/`;\n}\n\nexport function vitalsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\n/**\n * Given a value on the x-axis, return the index of the nearest bucket or null\n * if it cannot be found.\n *\n * A bucket contains a range of values, and nearest is defined as the bucket the\n * value will fall in.\n */\nexport function findNearestBucketIndex(\n  chartData: HistogramData,\n  xAxis: number\n): number | null {\n  const width = getBucketWidth(chartData);\n  // it's possible that the data is not available yet or the x axis is out of range\n  if (!chartData.length || xAxis >= chartData[chartData.length - 1].bin + width) {\n    return null;\n  }\n  if (xAxis < chartData[0].bin) {\n    return -1;\n  }\n\n  return Math.floor((xAxis - chartData[0].bin) / width);\n}\n\n/**\n * To compute pixel coordinates, we need at least 2 unique points on the chart.\n * The two points must have different x axis and y axis values for it to work.\n *\n * If all bars have the same y value, pick the most naive reference rect. This\n * may result in floating point errors, but should be okay for our purposes.\n */\nexport function getRefRect(chartData: HistogramData): Rectangle | null {\n  // not enough points to construct 2 reference points\n  if (chartData.length < 2) {\n    return null;\n  }\n\n  for (let i = 0; i < chartData.length; i++) {\n    const data1 = chartData[i];\n    for (let j = i + 1; j < chartData.length; j++) {\n      const data2 = chartData[j];\n\n      if (data1.bin !== data2.bin && data1.count !== data2.count) {\n        return {\n          point1: {x: i, y: Math.min(data1.count, data2.count)},\n          point2: {x: j, y: Math.max(data1.count, data2.count)},\n        };\n      }\n    }\n  }\n\n  // all data points have the same count, just pick any 2 histogram bins\n  // and use 0 and 1 as the count as we can rely on them being on the graph\n  return {\n    point1: {x: 0, y: 0},\n    point2: {x: 1, y: 1},\n  };\n}\n\n/**\n * Given an ECharts instance and a rectangle defined in terms of the x and y axis,\n * compute the corresponding pixel coordinates. If it cannot be done, return null.\n */\nexport function asPixelRect(chartRef: ECharts, dataRect: Rectangle): Rectangle | null {\n  const point1 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point1.x,\n    dataRect.point1.y,\n  ]);\n\n  if (isNaN(point1?.[0]) || isNaN(point1?.[1])) {\n    return null;\n  }\n\n  const point2 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point2.x,\n    dataRect.point2.y,\n  ]);\n\n  if (isNaN(point2?.[0]) || isNaN(point2?.[1])) {\n    return null;\n  }\n\n  return {\n    point1: {x: point1[0], y: point1[1]},\n    point2: {x: point2[0], y: point2[1]},\n  };\n}\n\n/**\n * Given a point on a source rectangle, map it to the corresponding point on the\n * destination rectangle. Assumes that the two rectangles are related by a simple\n * transformation containing only translations and scaling.\n */\nexport function mapPoint(\n  point: Point,\n  srcRect: Rectangle,\n  destRect: Rectangle\n): Point | null {\n  if (\n    srcRect.point1.x === srcRect.point2.x ||\n    srcRect.point1.y === srcRect.point2.y ||\n    destRect.point1.x === destRect.point2.x ||\n    destRect.point1.y === destRect.point2.y\n  ) {\n    return null;\n  }\n\n  const xPercentage =\n    (point.x - srcRect.point1.x) / (srcRect.point2.x - srcRect.point1.x);\n  const yPercentage =\n    (point.y - srcRect.point1.y) / (srcRect.point2.y - srcRect.point1.y);\n\n  return {\n    x: destRect.point1.x + (destRect.point2.x - destRect.point1.x) * xPercentage,\n    y: destRect.point1.y + (destRect.point2.y - destRect.point1.y) * yPercentage,\n  };\n}\n\nexport function isMissingVitalsData(\n  vitalsData: VitalsData | null,\n  allVitals: WebVital[]\n): boolean {\n  if (!vitalsData || allVitals.some(vital => !vitalsData[vital])) {\n    return true;\n  }\n\n  const measurementsWithoutCounts = Object.values(vitalsData).filter(\n    vitalObj => vitalObj.total === 0\n  );\n  return measurementsWithoutCounts.length > 0;\n}\n"],"names":["getBucketWidth","data","length","bin","computeBuckets","width","map","item","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","arguments","undefined","formatter","value","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","Error","count","name","Breadcrumb","props","_jsx","Breadcrumbs","crumbs","organization","location","transaction","vitalName","spanSlug","eventSlug","traceSlug","tab","performanceTarget","pathname","getPerformanceLandingUrl","query","push","to","label","t","preservePageFilters","webVitalsTarget","vitalDetailRouteWithQuery","orgSlug","slug","projectID","decodeScalar","project","routeQuery","Tab","tagsTarget","tagsRouteWithQuery","eventsTarget","eventsRouteWithQuery","vitalsRouteWithQuery","spansTarget","spansRouteWithQuery","summaryTarget","transactionSummaryRouteWithQuery","getCrumbs","displayName","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","P50","toFixed","sort","kind","field","filterToField","P75","P95","P99","P100","_ref","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","option","showTransactions","Object","values","includes","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","mapPercentileValues","percentileData","p100","getPercentilesEventView","eventView","withColumns","function","SpanSortPercentiles","SpanSortOthers","_ref2","generateSpansRoute","SPAN_RETENTION_DAYS","SPAN_RELATIVE_PERIODS","pick","DEFAULT_RELATIVE_PERIODS","SPAN_SORT_OPTIONS","prefix","DEFAULT_SORT","getSuspectSpanSort","find","getSuspectSpanSortFromLocation","sortKey","getSuspectSpanSortFromEventView","sorts","parseSpanSlug","defined","delimiterPos","lastIndexOf","op","slice","group","generateSpansEventView","_ref3","transactionName","conditions","MutableSearch","setFilterValues","keys","filters","forEach","isAggregateField","removeFilter","EventView","id","version","fields","formatString","projects","withSorts","getTotalsView","totalsView","SPAN_SORT_TO_FIELDS","getExclusiveTimeDisplayedValue","replace","decodeSelectedTagKey","tagKey","trackTagPageInteraction","trackAnalytics","generateTagsRoute","getTagSortForTagsPage","tagSort","denied","parseHistogramBucketInfo","row","f","parts","split","histogramField","bucketSize","parseInt","offset","multiplier","generateVitalsRoute","findNearestBucketIndex","chartData","xAxis","floor","getRefRect","i","data1","j","data2","point1","x","y","min","point2","max","asPixelRect","chartRef","dataRect","convertToPixel","xAxisIndex","yAxisIndex","isNaN","mapPoint","point","srcRect","destRect","xPercentage","yPercentage","isMissingVitalsData","vitalsData","allVitals","some","vital","filter","vitalObj","total"],"sourceRoot":""}