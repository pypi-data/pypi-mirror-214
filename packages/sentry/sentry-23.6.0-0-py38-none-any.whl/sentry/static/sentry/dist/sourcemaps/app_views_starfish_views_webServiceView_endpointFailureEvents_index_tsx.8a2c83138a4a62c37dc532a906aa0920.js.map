{"version":3,"file":"chunks/app_views_starfish_views_webServiceView_endpointFailureEvents_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/pageError.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/starfish/views/webServiceView/endpointFailureEvents/eventList.tsx","webpack:///./app/views/starfish/views/webServiceView/endpointFailureEvents/index.tsx"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\nexport type DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\nexport type DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"events\"\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n\n  const res = useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: 'events',\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n\n  const pageLinks = res.response?.getResponseHeader('Link') ?? undefined;\n\n  return {...res, pageLinks};\n}\n\nexport default DiscoverQuery;\n","import {Component, useContext} from 'react';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\n\nimport useApi from '../useApi';\nimport useOrganization from '../useOrganization';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Appends a raw string to query to be able to sidestep the tokenizer.\n   * @deprecated\n   */\n  forceAppendRawQueryString?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  options?: Omit<Parameters<typeof useQuery>[2], 'initialData'>;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string | string[] | undefined>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationDiscoverEndpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  options?: Omit<Parameters<typeof useQuery>[2], 'initialData'>;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  api: Client;\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n    api: new Client(),\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = getPayload(this.props);\n    const otherAPIPayload = getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {\n      queryBatching,\n      beforeFetch,\n      afterFetch,\n      didFetch,\n      eventView,\n      orgSlug,\n      route,\n      setError,\n    } = this.props;\n    const {api} = this.state;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload, {\n        queryBatching,\n      });\n\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useOrganization({allowNull: true})?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\ntype RetryOptions = {\n  statusCodes: number[];\n  tries: number;\n  baseTimeout?: number;\n  timeoutMultiplier?: number;\n};\n\nconst BASE_TIMEOUT = 200;\nconst TIMEOUT_MULTIPLIER = 2;\nconst wait = duration => new Promise(resolve => setTimeout(resolve, duration));\n\nexport async function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams,\n  options: {\n    queryBatching?: QueryBatching;\n    retry?: RetryOptions;\n  } = {}\n): Promise<[T, string | undefined, ResponseMeta<T> | undefined]> {\n  const {queryBatching, retry} = options;\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, url, {\n      query: params,\n      includeAllArgs: true,\n    });\n  }\n\n  const baseTimeout = retry?.baseTimeout ?? BASE_TIMEOUT;\n  const timeoutMultiplier = retry?.timeoutMultiplier ?? TIMEOUT_MULTIPLIER;\n  const statusCodes = retry?.statusCodes ?? [];\n  const maxTries = retry?.tries ?? 1;\n  let tries = 0;\n  let timeout = 0;\n  let error;\n\n  while (tries < maxTries && (!error || statusCodes.includes(error.status))) {\n    if (timeout > 0) {\n      await wait(timeout);\n    }\n    try {\n      tries++;\n      return await api.requestPromise(url, {\n        method: 'GET',\n        includeAllArgs: true,\n        query: {\n          // marking params as any so as to not cause typescript errors\n          ...(params as any),\n        },\n      });\n    } catch (err) {\n      error = err;\n      timeout = baseTimeout * timeoutMultiplier ** (tries - 1);\n    }\n  }\n  throw error;\n}\n\nfunction getPayload<T, P>(props: Props<T, P>) {\n  const {\n    cursor,\n    limit,\n    noPagination,\n    referrer,\n    getRequestPayload,\n    eventView,\n    location,\n    forceAppendRawQueryString,\n  } = props;\n  const payload = getRequestPayload\n    ? getRequestPayload(props)\n    : eventView.getEventsAPIPayload(location, forceAppendRawQueryString);\n\n  if (cursor) {\n    payload.cursor = cursor;\n  }\n  if (limit) {\n    payload.per_page = limit;\n  }\n  if (noPagination) {\n    payload.noPagination = noPagination;\n  }\n  if (referrer) {\n    payload.referrer = referrer;\n  }\n\n  Object.assign(payload, props.queryExtras ?? {});\n\n  return payload;\n}\n\nexport function useGenericDiscoverQuery<T, P>(props: Props<T, P>) {\n  const api = useApi();\n  const {orgSlug, route, options} = props;\n  const url = `/organizations/${orgSlug}/${route}/`;\n  const apiPayload = getPayload<T, P>(props);\n\n  const res = useQuery<[T, string | undefined, ResponseMeta<T> | undefined], QueryError>(\n    [route, apiPayload],\n    () =>\n      doDiscoverQuery<T>(api, url, apiPayload, {\n        queryBatching: props.queryBatching,\n      }),\n    options\n  );\n\n  return {\n    ...res,\n    data: res.data?.[0] ?? undefined,\n    statusCode: res.data?.[1] ?? undefined,\n    response: res.data?.[2] ?? undefined,\n  };\n}\n\nexport default GenericDiscoverQuery;\n","import {createContext, useContext, useState} from 'react';\n\nimport {Alert} from 'sentry/components/alert';\n\nconst pageErrorContext = createContext<{\n  setPageError: (error: string | undefined) => void;\n  pageError?: string;\n}>({\n  pageError: undefined,\n  setPageError: (_: string | undefined) => {},\n});\n\nexport function PageErrorProvider({children}: {children: React.ReactNode}) {\n  const [pageError, setPageError] = useState<string | undefined>();\n  return (\n    <pageErrorContext.Provider\n      value={{\n        pageError,\n        setPageError,\n      }}\n    >\n      {children}\n    </pageErrorContext.Provider>\n  );\n}\n\nexport function PageErrorAlert() {\n  const {pageError} = useContext(pageErrorContext);\n  if (!pageError) {\n    return null;\n  }\n\n  return (\n    <Alert type=\"error\" data-test-id=\"page-error-alert\" showIcon>\n      {pageError}\n    </Alert>\n  );\n}\n\nexport const usePageError = () => useContext(pageErrorContext);\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype UsePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<UsePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently\n// read-only, although in the future we should switch the code in EventView\n// instead. If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport GridEditable, {GridColumnHeader} from 'sentry/components/gridEditable';\nimport {Alignments} from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {NewQuery, Organization} from 'sentry/types';\nimport DiscoverQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {fieldAlignment} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {TableColumn} from 'sentry/views/discover/table/types';\nimport {EndpointDataRow} from 'sentry/views/starfish/views/endpointDetails';\n\ntype Props = {\n  httpOp: string;\n  location: Location;\n  organization: Organization;\n  transactionName: string;\n};\n\nconst COLUMN_ORDER = [\n  {\n    key: 'id',\n    name: 'Event ID',\n    width: 300,\n  },\n  {\n    key: 'http.status_code',\n    name: 'HTTP Status Code',\n    width: 300,\n  },\n  {\n    key: 'timestamp',\n    name: 'Timestamp',\n  },\n];\n\nexport default function EventList({\n  organization,\n  location,\n  httpOp,\n  transactionName,\n}: Props) {\n  function renderHeadCell(\n    tableMeta: TableData['meta'],\n    column: TableColumn<keyof TableDataRow>\n  ): React.ReactNode {\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    return <StyledNonLink align={align}>{column.name}</StyledNonLink>;\n  }\n\n  function renderBodyCell(\n    tableData: TableData | null,\n    column: TableColumn<keyof TableDataRow>,\n    dataRow: TableDataRow,\n    _onSelect?: (row: EndpointDataRow) => void\n  ): React.ReactNode {\n    if (!tableData || !tableData.meta) {\n      return dataRow[column.key];\n    }\n    const field = String(column.key);\n    const fieldRenderer = getFieldRenderer(field, tableData.meta, false);\n    const rendered = fieldRenderer(dataRow, {organization, location});\n\n    if (column.key === 'id') {\n      return (\n        <Link to={`/performance/${dataRow.project}:${dataRow.id}`}>\n          {dataRow.id.slice(0, 8)}\n        </Link>\n      );\n    }\n\n    return rendered;\n  }\n\n  const {query} = location;\n  const hasStartAndEnd = query.start && query.end;\n  const newQuery: NewQuery = {\n    name: t('Failure Sample'),\n    projects: [],\n    start: decodeScalar(query.start),\n    end: decodeScalar(query.end),\n    range: !hasStartAndEnd\n      ? decodeScalar(query.statsPeriod) || DEFAULT_STATS_PERIOD\n      : undefined,\n    fields: ['id', 'http.status_code', 'timestamp', 'project'],\n    query: `transaction:${transactionName} http.method:${httpOp} http.status_code:[500,502,503,504,521]`,\n    orderby: '-timestamp',\n    version: 2,\n  };\n\n  const eventView = EventView.fromNewQueryWithLocation(newQuery, location);\n\n  return (\n    <div>\n      <Title>{t('Sample Events')}</Title>\n      <DiscoverQuery\n        eventView={eventView}\n        orgSlug={organization.slug}\n        location={location}\n        referrer=\"api.starfish.failure-event-list\"\n        queryExtras={{dataset: 'discover'}}\n        limit={5}\n      >\n        {({pageLinks, isLoading, tableData}) => (\n          <Fragment>\n            <GridEditable\n              isLoading={isLoading}\n              data={tableData ? tableData.data : []}\n              columnOrder={COLUMN_ORDER}\n              columnSortBy={eventView.getSorts()}\n              grid={{\n                renderHeadCell: (column: GridColumnHeader) =>\n                  renderHeadCell(\n                    tableData?.meta,\n                    column as TableColumn<keyof TableDataRow>\n                  ),\n                renderBodyCell: (column: GridColumnHeader, dataRow: TableDataRow) =>\n                  renderBodyCell(\n                    tableData,\n                    column as TableColumn<keyof TableDataRow>,\n                    dataRow\n                  ) as any,\n              }}\n              location={location}\n            />\n\n            <Pagination pageLinks={pageLinks} />\n          </Fragment>\n        )}\n      </DiscoverQuery>\n    </div>\n  );\n}\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst Title = styled('h5')`\n  margin-bottom: ${space(1)};\n`;\n","import {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport EventList from 'sentry/views/starfish/views/webServiceView/endpointFailureEvents/eventList';\n\ntype Props = {\n  location: Location;\n} & RouteComponentProps<{slug: string}, {}>;\n\nexport default function EndpointFailureEvents({params, location}: Props) {\n  const slug = parseSlug(params.slug);\n  const organization = useOrganization();\n  if (!slug) {\n    return <div>ERROR</div>;\n  }\n\n  const {httpOp, transactionName} = slug || {};\n  return (\n    <Layout.Page>\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>\n              {httpOp} {transactionName}\n            </Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <PageErrorAlert />\n            <EventList\n              httpOp={httpOp}\n              location={location}\n              organization={organization}\n              transactionName={transactionName}\n            />\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </Layout.Page>\n  );\n}\n\ntype HttpOpAndEndpoint = {\n  httpOp: string;\n  transactionName: string;\n};\n\nfunction parseSlug(slug?: string): HttpOpAndEndpoint | undefined {\n  if (!slug) {\n    return undefined;\n  }\n\n  const delimiterPosition = slug.lastIndexOf(':');\n  if (delimiterPosition < 0) {\n    return undefined;\n  }\n\n  const httpOp = slug.slice(0, delimiterPosition);\n  const transactionName = slug.slice(delimiterPosition + 1);\n\n  return {httpOp, transactionName};\n}\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","_jsx","GenericDiscoverQuery","route","afterFetch","data","_","fields","otherMeta","meta","useDiscoverQuery","res","useGenericDiscoverQuery","pageLinks","response","getResponseHeader","undefined","displayName","QueryError","constructor","errorMessage","originalError","_defineProperty","this","message","getOriginalError","_GenericDiscoverQuery","Component","arguments","isLoading","tableFetchID","error","tableData","api","Client","thisAPIPayload","getPayload","otherAPIPayload","isAPIPayloadSimilar","limit","cursor","parseError","detail","responseJSON","t","async","queryBatching","beforeFetch","didFetch","eventView","orgSlug","setError","state","isValid","url","Symbol","apiPayload","setState","clear","resp","doDiscoverQuery","prevState","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","render","childrenProps","children","organizationSlug","useOrganization","allowNull","slug","performanceEventView","useContext","PerformanceEventViewContext","Error","_props","BASE_TIMEOUT","TIMEOUT_MULTIPLIER","wait","duration","Promise","resolve","setTimeout","params","options","length","retry","batchRequest","query","includeAllArgs","baseTimeout","timeoutMultiplier","statusCodes","maxTries","tries","timeout","includes","status","requestPromise","method","noPagination","referrer","getRequestPayload","location","forceAppendRawQueryString","payload","getEventsAPIPayload","per_page","Object","assign","queryExtras","useApi","useQuery","statusCode","pageErrorContext","createContext","pageError","setPageError","PageErrorProvider","_ref","useState","Provider","value","PageErrorAlert","Alert","type","showIcon","usePageError","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","strict","Context","context","COLUMN_ORDER","key","width","EventList","organization","httpOp","hasStartAndEnd","start","end","newQuery","projects","decodeScalar","range","statsPeriod","DEFAULT_STATS_PERIOD","orderby","version","EventView","_jsxs","Title","dataset","_ref2","Fragment","GridEditable","columnOrder","columnSortBy","getSorts","grid","renderHeadCell","column","tableMeta","align","fieldAlignment","StyledNonLink","renderBodyCell","dataRow","_onSelect","field","String","rendered","getFieldRenderer","fieldRenderer","Link","to","project","id","slice","Pagination","_styled","target","p","space","EndpointFailureEvents","delimiterPosition","lastIndexOf","parseSlug","Layout","fullWidth"],"sourceRoot":""}