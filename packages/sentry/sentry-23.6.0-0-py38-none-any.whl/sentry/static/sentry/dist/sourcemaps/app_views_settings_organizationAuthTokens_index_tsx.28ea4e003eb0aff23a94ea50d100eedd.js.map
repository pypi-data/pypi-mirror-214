{"version":3,"file":"chunks/app_views_settings_organizationAuthTokens_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationAuthTokens/authTokenRow.tsx","webpack:///./app/views/settings/organizationAuthTokens/index.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {PanelItem} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconSubtract} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {tokenPreview, TokenWip} from 'sentry/views/settings/organizationAuthTokens';\n\nfunction LastUsed({\n  organization,\n  dateLastUsed,\n  projectLastUsed,\n}: {\n  organization: Organization;\n  dateLastUsed?: Date;\n  projectLastUsed?: Project;\n}) {\n  if (dateLastUsed && projectLastUsed) {\n    return (\n      <Fragment>\n        {tct('Last used [date] in [project]', {\n          date: (\n            <TimeSince\n              date={getDynamicText({\n                value: dateLastUsed,\n                fixed: new Date(1508208080000), // National Pasta Day\n              })}\n            />\n          ),\n          project: (\n            <Link to={`/settings/${organization.slug}/${projectLastUsed.slug}/`}>\n              {projectLastUsed.name}\n            </Link>\n          ),\n        })}\n      </Fragment>\n    );\n  }\n\n  if (dateLastUsed) {\n    return (\n      <Fragment>\n        {tct('Last used [date]', {\n          date: (\n            <TimeSince\n              date={getDynamicText({\n                value: dateLastUsed,\n                fixed: new Date(1508208080000), // National Pasta Day\n              })}\n            />\n          ),\n        })}\n      </Fragment>\n    );\n  }\n\n  if (projectLastUsed) {\n    return (\n      <Fragment>\n        {tct('Last used in [project]', {\n          project: (\n            <Link to={`/settings/${organization.slug}/${projectLastUsed.slug}/`}>\n              {projectLastUsed.name}\n            </Link>\n          ),\n        })}\n      </Fragment>\n    );\n  }\n\n  return <Fragment>{t('Never used')}</Fragment>;\n}\n\nexport function OrganizationAuthTokensAuthTokenRow({\n  organization,\n  isRevoking,\n  token,\n  revokeToken,\n  canRevoke,\n}: {\n  canRevoke: boolean;\n  isRevoking: boolean;\n  organization: Organization;\n  revokeToken: (token: TokenWip) => void;\n  token: TokenWip;\n}) {\n  return (\n    <StyledPanelItem>\n      <StyledPanelHeader>\n        <Label>\n          <Link to={`/settings/${organization.slug}/auth-tokens/${token.id}/`}>\n            {token.name}\n          </Link>\n        </Label>\n\n        <Actions>\n          <Tooltip\n            title={t(\n              'You must be an organization owner, manager or admin to revoke a token.'\n            )}\n            disabled={canRevoke}\n          >\n            <Confirm\n              disabled={!canRevoke || isRevoking}\n              onConfirm={() => revokeToken(token)}\n              message={t(\n                'Are you sure you want to revoke this token? The token will not be usable anymore, and this cannot be undone.'\n              )}\n            >\n              <Button\n                size=\"sm\"\n                onClick={() => revokeToken(token)}\n                disabled={isRevoking || !canRevoke}\n                icon={\n                  isRevoking ? (\n                    <LoadingIndicator mini />\n                  ) : (\n                    <IconSubtract isCircled size=\"xs\" />\n                  )\n                }\n              >\n                {t('Revoke')}\n              </Button>\n            </Confirm>\n          </Tooltip>\n        </Actions>\n      </StyledPanelHeader>\n\n      <StyledPanelBody>\n        {token.tokenLastCharacters && (\n          <TokenPreview>\n            {tokenPreview(\n              getDynamicText({\n                value: token.tokenLastCharacters,\n                fixed: 'ABCD',\n              })\n            )}\n          </TokenPreview>\n        )}\n\n        <LastUsedDate>\n          <LastUsed\n            dateLastUsed={token.dateLastUsed}\n            projectLastUsed={token.projectLastUsed}\n            organization={organization}\n          />\n        </LastUsedDate>\n      </StyledPanelBody>\n    </StyledPanelItem>\n  );\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  flex-direction: column;\n  padding: ${space(2)};\n  gap: ${space(1)};\n`;\n\nconst StyledPanelHeader = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: ${space(0.25)} ${space(1)};\n`;\n\nconst Label = styled('div')``;\n\nconst Actions = styled('div')`\n  margin-left: auto;\n`;\n\nconst StyledPanelBody = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst LastUsedDate = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  margin-left: auto;\n`;\n\nconst TokenPreview = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n","import {Fragment, useCallback, useEffect, useState} from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {setDateToTime} from 'sentry/utils/dates';\nimport {handleXhrErrorResponse} from 'sentry/utils/handleXhrErrorResponse';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {OrganizationAuthTokensAuthTokenRow} from 'sentry/views/settings/organizationAuthTokens/authTokenRow';\n\nexport type TokenWip = {\n  dateCreated: Date;\n  id: string;\n  name: string;\n  scopes: string[];\n  dateLastUsed?: Date;\n  projectLastUsed?: Project;\n  tokenLastCharacters?: string;\n};\n\nfunction generateMockToken({\n  name,\n  scopes,\n  dateCreated = new Date(),\n  dateLastUsed,\n  projectLastUsed,\n}: {\n  name: string;\n  scopes: string[];\n  dateCreated?: Date;\n  dateLastUsed?: Date;\n  projectLastUsed?: Project;\n}): TokenWip {\n  return {\n    id: crypto.randomUUID(),\n    name,\n    tokenLastCharacters: crypto.randomUUID().slice(0, 4),\n    scopes,\n    dateCreated,\n    dateLastUsed,\n    projectLastUsed,\n  };\n}\n\nexport function OrganizationAuthTokensIndex({\n  organization,\n}: {\n  organization: Organization;\n}) {\n  const [tokenList, setTokenList] = useState<TokenWip[] | null>(null);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [isRevoking, setIsRevoking] = useState(false);\n\n  const fetchTokenList = useCallback(async () => {\n    try {\n      // TODO FN: Actually do something here\n      await new Promise(resolve => setTimeout(resolve, 500));\n      setTokenList([\n        generateMockToken({\n          name: 'custom token',\n          scopes: ['org:ci'],\n          dateLastUsed: setDateToTime(new Date(), '00:05:00'),\n          projectLastUsed: {slug: 'my-project', name: 'My Project'} as Project,\n          dateCreated: setDateToTime(new Date(), '00:01:00'),\n        }),\n        generateMockToken({\n          name: 'my-project CI token',\n          scopes: ['org:ci'],\n          dateLastUsed: new Date('2023-06-09'),\n        }),\n        generateMockToken({name: 'my-pro2 CI token', scopes: ['org:ci']}),\n      ]);\n      setHasLoadingError(false);\n    } catch (error) {\n      const message = t('Failed to load auth tokens for the organization.');\n      handleXhrErrorResponse(message, error);\n      setHasLoadingError(error);\n    }\n  }, []);\n\n  const handleRevokeToken = useCallback(\n    async (token: TokenWip) => {\n      try {\n        setIsRevoking(true);\n        // TODO FN: Actually do something here\n        await new Promise(resolve => setTimeout(resolve, 500));\n        const newTokens = (tokenList || []).filter(\n          tokenCompare => tokenCompare !== token\n        );\n        setTokenList(newTokens);\n\n        addSuccessMessage(t('Revoked auth token for the organization.'));\n      } catch (error) {\n        const message = t('Failed to revoke the auth token for the organization.');\n        handleXhrErrorResponse(message, error);\n        addErrorMessage(message);\n      } finally {\n        setIsRevoking(false);\n      }\n    },\n    [tokenList]\n  );\n\n  const createNewToken = (\n    <Button\n      priority=\"primary\"\n      size=\"sm\"\n      to={`/settings/${organization.slug}/auth-tokens/new-token/`}\n      data-test-id=\"create-token\"\n    >\n      {t('Create New Token')}\n    </Button>\n  );\n\n  useEffect(() => {\n    fetchTokenList();\n  }, [fetchTokenList]);\n\n  return (\n    <Access access={['org:write']}>\n      {({hasAccess}) => (\n        <Fragment>\n          <SentryDocumentTitle title={t('Auth Tokens')} />\n          <SettingsPageHeader title={t('Auth Tokens')} action={createNewToken} />\n\n          <Alert>Note: This page is WIP and currently only shows mocked data.</Alert>\n\n          <TextBlock>\n            {t(\n              \"Authentication tokens allow you to perform actions against the Sentry API on behalf of your organization. They're the easiest way to get started using the API.\"\n            )}\n          </TextBlock>\n          <TextBlock>\n            {tct(\n              'For more information on how to use the web API, see our [link:documentation].',\n              {\n                link: <ExternalLink href=\"https://docs.sentry.io/api/\" />,\n              }\n            )}\n          </TextBlock>\n          <Panel>\n            <PanelHeader>{t('Auth Token')}</PanelHeader>\n\n            <PanelBody>\n              {hasLoadingError && (\n                <LoadingError\n                  message={t('Failed to load auth tokens for the organization.')}\n                  onRetry={fetchTokenList}\n                />\n              )}\n\n              {!hasLoadingError && !tokenList && <LoadingIndicator />}\n\n              {!hasLoadingError && tokenList && tokenList.length === 0 && (\n                <EmptyMessage>\n                  {t(\"You haven't created any authentication tokens yet.\")}\n                </EmptyMessage>\n              )}\n\n              {!hasLoadingError &&\n                tokenList &&\n                tokenList.length > 0 &&\n                tokenList.map(token => (\n                  <OrganizationAuthTokensAuthTokenRow\n                    key={token.id}\n                    organization={organization}\n                    token={token}\n                    isRevoking={isRevoking}\n                    revokeToken={hasAccess ? handleRevokeToken : () => {}}\n                    canRevoke={hasAccess}\n                  />\n                ))}\n            </PanelBody>\n          </Panel>\n        </Fragment>\n      )}\n    </Access>\n  );\n}\n\nexport function tokenPreview(tokenLastCharacters: string) {\n  return `sntrys_************${tokenLastCharacters}`;\n}\n\nexport default withOrganization(OrganizationAuthTokensIndex);\n"],"names":["LastUsed","_ref","organization","dateLastUsed","projectLastUsed","_jsx","Fragment","children","tct","date","TimeSince","getDynamicText","value","fixed","Date","project","Link","to","slug","name","t","OrganizationAuthTokensAuthTokenRow","_ref2","isRevoking","token","revokeToken","canRevoke","_jsxs","StyledPanelItem","StyledPanelHeader","Label","id","Actions","Tooltip","title","disabled","Confirm","onConfirm","message","Button","size","onClick","icon","LoadingIndicator","mini","IconSubtract","isCircled","StyledPanelBody","tokenLastCharacters","TokenPreview","tokenPreview","LastUsedDate","displayName","_styled","PanelItem","target","space","styles","p","theme","fontSizeRelativeSmall","generateMockToken","scopes","dateCreated","crypto","randomUUID","slice","OrganizationAuthTokensIndex","tokenList","setTokenList","useState","hasLoadingError","setHasLoadingError","setIsRevoking","fetchTokenList","useCallback","async","Promise","resolve","setTimeout","setDateToTime","error","handleXhrErrorResponse","handleRevokeToken","newTokens","filter","tokenCompare","addSuccessMessage","addErrorMessage","createNewToken","priority","useEffect","Access","access","_ref3","hasAccess","SentryDocumentTitle","SettingsPageHeader","action","Alert","TextBlock","link","ExternalLink","href","Panel","PanelHeader","PanelBody","LoadingError","onRetry","length","EmptyMessage","map","withOrganization"],"sourceRoot":""}