{"version":3,"file":"chunks/app_views_settings_organizationDeveloperSettings_sentryFunctionDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"gqCAiBA,SAASA,EAAmCC,GAC1C,MAAM,aAACC,EAAY,gBAAEC,GAAmBF,EA8BxC,OACEG,EAAAA,EAAAA,IAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,IAACE,EAAAA,GAAW,CAAAD,SAAA,EACTE,EAAAA,EAAAA,GAAE,0BACHC,EAAAA,EAAAA,IAACC,EAAe,CACdC,KAAK,KACLC,MAAMH,EAAAA,EAAAA,IAACI,EAAAA,GAAO,CAACC,WAAS,IACxB,cAAYN,EAAAA,EAAAA,GAAE,4BACdO,QApCUC,KAChBZ,EAAgB,IAAID,EAAc,CAACc,KAAM,GAAIC,MAAO,KAAK,QAsCvDb,EAAAA,EAAAA,IAACc,EAAe,CAAAb,SAAA,EACdD,EAAAA,EAAAA,IAACe,EAA0B,CAAAd,SAAA,EACzBG,EAAAA,EAAAA,IAACY,EAAS,CAAAf,UAAEE,EAAAA,EAAAA,GAAE,WACdC,EAAAA,EAAAA,IAACa,EAAc,CAAAhB,UAAEE,EAAAA,EAAAA,GAAE,cAEpBL,EAAaoB,KAAI,CAACC,EAAaC,KAE5BpB,EAAAA,EAAAA,IAACe,EAA0B,CAAAd,SAAA,EACzBG,EAAAA,EAAAA,IAACiB,EAAAA,GAAS,CACRT,KAAO,qBAAoBQ,IAC3BE,UAAU,EACVC,QAAQ,EACRC,aAAcL,EAAYP,KAC1BC,MAAOM,EAAYP,KACnBa,SAAO,EACPC,SAAUC,GAlDCC,EAACf,EAAegB,KACvC,MAAMC,EAAkB,IAAIhC,GAC5B,KAAOgC,EAAgBC,QAAUF,GAC/BC,EAAgBE,KAAK,CAACpB,KAAM,GAAIC,MAAO,KAEzCiB,EAAgBD,GAAO,IAAIC,EAAgBD,GAAMjB,KAAMC,GACvDd,EAAgB+B,EAAgB,EA4CLF,CAAiBD,EAAGP,MAErChB,EAAAA,EAAAA,IAACiB,EAAAA,GAAS,CACRT,KAAO,sBAAqBQ,IAC5BE,UAAU,EACVC,QAAQ,EACRC,aAAcL,EAAYN,MAC1BA,MAAOM,EAAYN,MACnBY,SAAO,EACPC,SAAUC,GAlDEM,EAACpB,EAAegB,KACxC,MAAMC,EAAkB,IAAIhC,GAC5B,KAAOgC,EAAgBC,QAAUF,GAC/BC,EAAgBE,KAAK,CAACpB,KAAM,GAAIC,MAAO,KAEzCiB,EAAgBD,GAAO,IAAIC,EAAgBD,GAAMhB,SACjDd,EAAgB+B,EAAgB,EA4CLG,CAAkBN,EAAGP,MAEtChB,EAAAA,EAAAA,IAAC8B,EAAY,CAAAjC,UACXG,EAAAA,EAAAA,IAACC,EAAe,CACdC,KAAK,KACLC,MAAMH,EAAAA,EAAAA,IAAC+B,EAAAA,GAAU,IACjB,cAAYhC,EAAAA,EAAAA,GAAE,iCAAkCiB,GAChDV,QAASA,IAhDHmB,KACpB,MAAMC,EAAkB,IAAIhC,GAC5BgC,EAAgBM,OAAOP,EAAK,GAC5B9B,EAAgB+B,EAAgB,EA6CHO,CAAajB,SAxBDA,UAiC7C,CAlFSxB,EAAkC0C,YAAA,qCAoF3C,UAEMvB,GAA6BwB,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,CAAA3B,KAAA,UAAA6B,OAAA,6DAK1CpC,GAAkBkC,EAAAA,EAAAA,GAAOG,EAAAA,GAAM,CAAAF,OAAA,YAAbD,CAAc,CAAA3B,KAAA,SAAA6B,OAAA,gBAIhCzB,GAAYuB,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,+BAEfI,EAAAA,EAAAA,GAAM,GAAE,mBACLA,EAAAA,EAAAA,GAAM,GAAE,WAChBC,GAAKA,EAAEC,MAAMC,SAAO,KAGzB7B,GAAiBsB,EAAAA,EAAAA,GAAOvB,EAAS,CAAAwB,OAAA,YAAhBD,CAAiB,iBACtBI,EAAAA,EAAAA,GAAM,GAAE,KAGpBT,GAAeK,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,kDAGfI,EAAAA,EAAAA,GAAM,GAAE,KAGrB7B,GAAkByB,EAAAA,EAAAA,GAAOQ,EAAAA,EAAS,CAAAP,OAAA,YAAhBD,CAAiB,YAC5BI,EAAAA,EAAAA,GAAM,GAAE,K,0JCtHrB,SAASK,EAA4BnD,GACnC,MAAM,OAACoD,EAAM,UAAEC,GAAarD,EAE5B,SAAS6B,EAASyB,EAAoBC,GAChCA,IAAYH,EAAOI,SAASF,GAC9BD,EAAUD,EAAOK,OAAOH,KACdC,GAAWH,EAAOI,SAASF,IACrCD,EAAUD,EAAOM,QAAO5B,GAAKA,IAAMwB,IAEvC,CAEA,OACE/C,EAAAA,EAAAA,IAACoD,EAA+B,CAAAvD,SAC7BwD,EAAAA,EAAAA,KAAkBN,IACjB/C,EAAAA,EAAAA,IAACsD,EAAAA,EAAe,CAEdC,yBAAyB,EACzBC,iBAAiB,EACjBR,QAASvD,EAAMoD,OAAOI,SAASF,GAC/BA,SAAUA,EACVzB,SAAUA,EACVmC,MAAoB,YAAbV,GANFA,MAWf,CA1BSH,EAA2BV,YAAA,8BA4BpC,UACMkB,GAAkCjB,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,mEAG9B1C,GAASA,EAAMgD,MAAMiB,YAAYC,OAAK,sCCpB7D,SAASC,EAAcC,GACrB,MAAMhB,EAAmB,GACrBgB,EAAKC,SACPjB,EAAOjB,KAAK,SAEViC,EAAKE,SACPlB,EAAOjB,KAAK,SAEViC,EAAKG,WACPnB,EAAOjB,KAAK,kBAEPiC,EAAKC,eACLD,EAAKE,eACLF,EAAKG,UACZH,EAAKhB,OAASA,EAEd,MAAMnD,EAA8B,GACpC,IAAIsB,EAAI,EACR,KAAO6C,EAAM,qBAAoB7C,MAC3B6C,EAAM,sBAAqB7C,MAC7BtB,EAAakC,KAAK,CAChBpB,KAAMqD,EAAM,qBAAoB7C,KAChCP,MAAOoD,EAAM,sBAAqB7C,cAG/B6C,EAAM,qBAAoB7C,YAC1B6C,EAAM,sBAAqB7C,KAClCA,IAEF6C,EAAKnE,aAAeA,EAEpB,SAAUuE,GAAUJ,EACpB,OAAOI,CACT,CAUA,MAAMC,EAAsB,CAC1B,CACE1D,KAAM,OACN2D,KAAM,SACNjD,UAAU,EACVkD,YAAa,0BACbC,MAAO,OACPC,KAAM,+CAER,CACE9D,KAAM,SACN2D,KAAM,SACNC,YAAa,qBACbC,MAAO,SACPC,KAAM,uEAER,CACE9D,KAAM,WACN2D,KAAM,SACNC,YAAa,kDACbC,MAAO,WACPC,KAAM,iDAIV,SAASC,EAAsB9E,GAC7B,MAAO+E,IAAQC,EAAAA,EAAAA,WAAS,IAAM,IAAIC,EAAAA,EAAU,CAACd,qBAEvC,aAACe,GAAgBlF,EAAMmF,QACvB,aAACC,EAAY,eAAEC,GAAkBrF,EACjCsF,EAASJ,EAAe,MAAQ,OACtC,IAAIK,EAAY,kBAAiBH,EAAaI,kBAC1CN,IACFK,GAAa,GAAEL,MAEjB,MAAMO,EAAcJ,EAChBA,EAAeK,KACd,gPAOEtC,EAAQC,IAAa2B,EAAAA,EAAAA,UAASK,GAAgBjC,QAAU,KAE/DuC,EAAAA,EAAAA,YAAU,KACRZ,EAAKa,SAAS,UAAWxC,EAAOI,SAAS,UACzCuB,EAAKa,SAAS,UAAWxC,EAAOI,SAAS,UACzCuB,EAAKa,SAAS,YAAaxC,EAAOI,SAAS,WAAW,GACrD,CAACuB,EAAM3B,IAEV,MAAOnD,EAAcC,IAAmB8E,EAAAA,EAAAA,UACtCK,GAAgBQ,eAAe3D,OAC3BmD,GAAgBQ,cAChB,CAAC,CAAC9E,KAAM,GAAIC,MAAO,MA2BzB,OACET,EAAAA,EAAAA,IAAA,OAAAH,UACED,EAAAA,EAAAA,IAAC2F,EAAAA,EAAO,CAACC,SAAU,CAAC,kCAAkC3F,SAAA,EACpDG,EAAAA,EAAAA,IAAA,MAAAH,SACGiF,GAAiB/E,EAAAA,EAAAA,GAAE,4BAA6BA,EAAAA,EAAAA,GAAE,6BAErDH,EAAAA,EAAAA,IAAC6F,EAAAA,EAAI,CACHC,UAAWX,EACXY,YAAaX,EACbY,MAAOpB,EACPqB,YAAaA,MACXC,EAAAA,EAAAA,KAAkB/F,EAAAA,EAAAA,GAAE,oBAAoB,EAE1CgG,YAAa,CACXZ,KAAMD,EACNrC,SACAnD,kBACGD,EAAMqF,gBAEXkB,cA3CkBC,IACxB,IAAIC,GAAenG,EAAAA,EAAAA,GAAE,iBACjBkG,EAAIE,QAAU,KAAOF,EAAIE,OAAS,MACpCD,EAAeD,GAAKG,aAAaC,QAAUH,IAE7CI,EAAAA,EAAAA,IAAgBJ,EAAa,EAuCvBK,gBApCoB1C,KAC1B2C,EAAAA,EAAAA,KAAkBzG,EAAAA,EAAAA,GAAE,sCAAuC8D,EAAKrD,OAChE,MACMiG,EAAO,aADgB5B,EAAaI,4CACjBpB,EAAKoB,QAC1BH,GACF0B,EAAAA,EAAAA,KAAkBzG,EAAAA,EAAAA,GAAE,yBAA0B8D,EAAKrD,QAEnDgG,EAAAA,EAAAA,KAAkBzG,EAAAA,EAAAA,GAAE,2BAA4B8D,EAAKrD,OAEvDkG,EAAAA,eAAAA,MAAoBC,EAAAA,EAAAA,GAAaF,GAAK,EA2BK5G,SAAA,EAErCG,EAAAA,EAAAA,IAAC4G,EAAAA,EAAQ,CAACC,MAAO,CAAC,CAACC,OAAO/G,EAAAA,EAAAA,GAAE,2BAA4BgH,OAAQ7C,OAChEtE,EAAAA,EAAAA,IAACoH,EAAAA,GAAK,CAAAnH,SAAA,EACJG,EAAAA,EAAAA,IAACF,EAAAA,GAAW,CAAAD,UAAEE,EAAAA,EAAAA,GAAE,eAChBC,EAAAA,EAAAA,IAAC2C,EAAAA,EAAS,CAAA9C,UACRG,EAAAA,EAAAA,IAAC4C,EAA2B,CAACC,OAAQA,EAAQC,UAAWA,UAG5D9C,EAAAA,EAAAA,IAACgH,EAAAA,GAAK,CAAAnH,UACJG,EAAAA,EAAAA,IAACR,EAAkC,CACjCE,aAAcA,EACdC,gBAAiBA,OAGrBC,EAAAA,EAAAA,IAACoH,EAAAA,GAAK,CAAAnH,SAAA,EACJG,EAAAA,EAAAA,IAACF,EAAAA,GAAW,CAAAD,UAAEE,EAAAA,EAAAA,GAAE,4BAChBC,EAAAA,EAAAA,IAAC2C,EAAAA,EAAS,CAAA9C,UACRG,EAAAA,EAAAA,IAACiH,EAAAA,GAAM,CACLC,OAAO,OACPzE,MAAM,QACN0E,gBAAgB,aAChB/F,aAAc8D,EACd5D,SA/Cd,SAA4Bb,EAAO2G,GACjC5C,EAAKa,SAAS,OAAQ5E,EACxB,EA8Cc4G,QAAS,CACPC,QAAS,CACPC,SAAS,GAEXC,sBAAsB,iBASxC,CAlHSjD,EAAqBrC,YAAA,wBA6H9B,MAAMuF,UAA+BC,EAAAA,EACnCC,eACE,MAAM,aAAChD,GAAgBiD,KAAKnI,MAAMmF,QAC5B,aAACC,GAAgB+C,KAAKnI,MAC5B,OAAIkF,EACK,CACL,CACE,iBACC,kBAAiBE,EAAaI,kBAAkBN,OAIhD,EACT,CACAkD,aACE,OACE7H,EAAAA,EAAAA,IAACuE,EAAqB,CAACO,eAAgB8C,KAAKE,MAAMhD,kBAAoB8C,KAAKnI,OAE/E,EAGF,SAAesI,EAAAA,EAAAA,GAAiBN,E","sources":["webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionsEnvironmentVariables.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionSubscriptions.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionDetails.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {TextField} from 'sentry/components/forms';\nimport {PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconAdd, IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  envVariables: {\n    name: string;\n    value: string;\n  }[];\n  setEnvVariables: (envVariables) => void;\n};\n\nfunction SentryFunctionEnvironmentVariables(props: Props) {\n  const {envVariables, setEnvVariables} = props;\n\n  const addEnvVar = () => {\n    setEnvVariables([...envVariables, {name: '', value: ''}]);\n  };\n\n  const handleNameChange = (value: string, pos: number) => {\n    const newEnvVariables = [...envVariables];\n    while (newEnvVariables.length <= pos) {\n      newEnvVariables.push({name: '', value: ''});\n    }\n    newEnvVariables[pos] = {...newEnvVariables[pos], name: value};\n    setEnvVariables(newEnvVariables);\n  };\n\n  const handleValueChange = (value: string, pos: number) => {\n    const newEnvVariables = [...envVariables];\n    while (newEnvVariables.length <= pos) {\n      newEnvVariables.push({name: '', value: ''});\n    }\n    newEnvVariables[pos] = {...newEnvVariables[pos], value};\n    setEnvVariables(newEnvVariables);\n  };\n\n  const removeEnvVar = (pos: number) => {\n    const newEnvVariables = [...envVariables];\n    newEnvVariables.splice(pos, 1);\n    setEnvVariables(newEnvVariables);\n  };\n\n  return (\n    <div>\n      <PanelHeader>\n        {t('Environment Variables')}\n        <StyledAddButton\n          size=\"sm\"\n          icon={<IconAdd isCircled />}\n          aria-label={t('Add Environment Variable')}\n          onClick={addEnvVar}\n        />\n      </PanelHeader>\n      <StyledPanelBody>\n        <EnvironmentVariableWrapper>\n          <EnvHeader>{t('Name')}</EnvHeader>\n          <EnvHeaderRight>{t('Value')}</EnvHeaderRight>\n        </EnvironmentVariableWrapper>\n        {envVariables.map((envVariable, i) => {\n          return (\n            <EnvironmentVariableWrapper key={i}>\n              <TextField\n                name={`env-variable-name-${i}`}\n                required={false}\n                inline={false}\n                defaultValue={envVariable.name}\n                value={envVariable.name}\n                stacked\n                onChange={e => handleNameChange(e, i)}\n              />\n              <TextField\n                name={`env-variable-value-${i}`}\n                required={false}\n                inline={false}\n                defaultValue={envVariable.value}\n                value={envVariable.value}\n                stacked\n                onChange={e => handleValueChange(e, i)}\n              />\n              <ButtonHolder>\n                <StyledAddButton\n                  size=\"sm\"\n                  icon={<IconDelete />}\n                  aria-label={t('Remove Environment Variable %s', i)}\n                  onClick={() => removeEnvVar(i)}\n                />\n              </ButtonHolder>\n            </EnvironmentVariableWrapper>\n          );\n        })}\n      </StyledPanelBody>\n    </div>\n  );\n}\n\nexport default SentryFunctionEnvironmentVariables;\n\nconst EnvironmentVariableWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1.5fr min-content;\n`;\n\nconst StyledAddButton = styled(Button)`\n  float: right;\n`;\n\nconst EnvHeader = styled('div')`\n  text-align: left;\n  margin-top: ${space(2)};\n  margin-bottom: ${space(1)};\n  color: ${p => p.theme.gray400};\n`;\n\nconst EnvHeaderRight = styled(EnvHeader)`\n  margin-left: -${space(2)};\n`;\n\nconst ButtonHolder = styled('div')`\n  align-items: center;\n  display: flex;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n`;\n","import styled from '@emotion/styled';\n\nimport {EVENT_CHOICES} from './constants';\nimport SubscriptionBox from './subscriptionBox';\n\ntype Resource = (typeof EVENT_CHOICES)[number];\n\ntype Props = {\n  events: string[];\n  setEvents: (events: string[]) => void;\n};\n\nfunction SentryFunctionSubscriptions(props: Props) {\n  const {events, setEvents} = props;\n\n  function onChange(resource: Resource, checked: boolean) {\n    if (checked && !events.includes(resource)) {\n      setEvents(events.concat(resource));\n    } else if (!checked && events.includes(resource)) {\n      setEvents(events.filter(e => e !== resource));\n    }\n  }\n\n  return (\n    <SentryFunctionsSubscriptionGrid>\n      {EVENT_CHOICES.map(resource => (\n        <SubscriptionBox\n          key={resource}\n          disabledFromPermissions={false}\n          webhookDisabled={false}\n          checked={props.events.includes(resource)}\n          resource={resource}\n          onChange={onChange}\n          isNew={resource === 'comment'}\n        />\n      ))}\n    </SentryFunctionsSubscriptionGrid>\n  );\n}\n\nexport default SentryFunctionSubscriptions;\nconst SentryFunctionsSubscriptionGrid = styled('div')`\n  display: grid;\n  grid-template: auto / 1fr 1fr 1fr;\n  @media (max-width: ${props => props.theme.breakpoints.large}) {\n    grid-template: 1fr 1fr 1fr / auto;\n  }\n`;\n","import {useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport Editor from '@monaco-editor/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport Feature from 'sentry/components/acl/feature';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {Field} from 'sentry/components/forms/types';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Organization, SentryFunction} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport SentryFunctionEnvironmentVariables from './sentryFunctionsEnvironmentVariables';\nimport SentryFunctionSubscriptions from './sentryFunctionSubscriptions';\n\nfunction transformData(data: Record<string, any>) {\n  const events: string[] = [];\n  if (data.onIssue) {\n    events.push('issue');\n  }\n  if (data.onError) {\n    events.push('error');\n  }\n  if (data.onComment) {\n    events.push('comment');\n  }\n  delete data.onIssue;\n  delete data.onError;\n  delete data.onComment;\n  data.events = events;\n\n  const envVariables: EnvVariable[] = [];\n  let i = 0;\n  while (data[`env-variable-name-${i}`]) {\n    if (data[`env-variable-value-${i}`]) {\n      envVariables.push({\n        name: data[`env-variable-name-${i}`],\n        value: data[`env-variable-value-${i}`],\n      });\n    }\n    delete data[`env-variable-name-${i}`];\n    delete data[`env-variable-value-${i}`];\n    i++;\n  }\n  data.envVariables = envVariables;\n\n  const {...output} = data;\n  return output;\n}\n\ntype Props = {\n  sentryFunction?: SentryFunction;\n} & WrapperProps;\n\ntype EnvVariable = {\n  name: string;\n  value: string;\n};\nconst formFields: Field[] = [\n  {\n    name: 'name',\n    type: 'string',\n    required: true,\n    placeholder: 'e.g. My Sentry Function',\n    label: 'Name',\n    help: 'Human readable name of your Sentry Function',\n  },\n  {\n    name: 'author',\n    type: 'string',\n    placeholder: 'e.g. Acme Software',\n    label: 'Author',\n    help: 'The company or person who built and maintains this Sentry Function.',\n  },\n  {\n    name: 'overview',\n    type: 'string',\n    placeholder: 'e.g. This Sentry Function does something useful',\n    label: 'Overview',\n    help: 'A short description of your Sentry Function.',\n  },\n];\n\nfunction SentryFunctionDetails(props: Props) {\n  const [form] = useState(() => new FormModel({transformData}));\n\n  const {functionSlug} = props.params;\n  const {organization, sentryFunction} = props;\n  const method = functionSlug ? 'PUT' : 'POST';\n  let endpoint = `/organizations/${organization.slug}/functions/`;\n  if (functionSlug) {\n    endpoint += `${functionSlug}/`;\n  }\n  const defaultCode = sentryFunction\n    ? sentryFunction.code\n    : `exports.yourFunction = (req, res) => {\n    let message = req.query.message || req.body.message || 'Hello World!';\n    console.log('Query: ' + req.query);\n    console.log('Body: ' + req.body);\n    res.status(200).send(message);\n  };`;\n\n  const [events, setEvents] = useState(sentryFunction?.events || []);\n\n  useEffect(() => {\n    form.setValue('onIssue', events.includes('issue'));\n    form.setValue('onError', events.includes('error'));\n    form.setValue('onComment', events.includes('comment'));\n  }, [form, events]);\n\n  const [envVariables, setEnvVariables] = useState(\n    sentryFunction?.env_variables?.length\n      ? sentryFunction?.env_variables\n      : [{name: '', value: ''}]\n  );\n\n  const handleSubmitError = err => {\n    let errorMessage = t('Unknown Error');\n    if (err.status >= 400 && err.status < 500) {\n      errorMessage = err?.responseJSON.detail ?? errorMessage;\n    }\n    addErrorMessage(errorMessage);\n  };\n\n  const handleSubmitSuccess = data => {\n    addSuccessMessage(t('Sentry Function successfully saved.', data.name));\n    const baseUrl = `/settings/${organization.slug}/developer-settings/sentry-functions/`;\n    const url = `${baseUrl}${data.slug}/`;\n    if (sentryFunction) {\n      addSuccessMessage(t('%s successfully saved.', data.name));\n    } else {\n      addSuccessMessage(t('%s successfully created.', data.name));\n    }\n    browserHistory.push(normalizeUrl(url));\n  };\n\n  function handleEditorChange(value, _event) {\n    form.setValue('code', value);\n  }\n\n  return (\n    <div>\n      <Feature features={['organizations:sentry-functions']}>\n        <h2>\n          {sentryFunction ? t('Editing Sentry Function') : t('Create Sentry Function')}\n        </h2>\n        <Form\n          apiMethod={method}\n          apiEndpoint={endpoint}\n          model={form}\n          onPreSubmit={() => {\n            addLoadingMessage(t('Saving changes..'));\n          }}\n          initialData={{\n            code: defaultCode,\n            events,\n            envVariables,\n            ...props.sentryFunction,\n          }}\n          onSubmitError={handleSubmitError}\n          onSubmitSuccess={handleSubmitSuccess}\n        >\n          <JsonForm forms={[{title: t('Sentry Function Details'), fields: formFields}]} />\n          <Panel>\n            <PanelHeader>{t('Webhooks')}</PanelHeader>\n            <PanelBody>\n              <SentryFunctionSubscriptions events={events} setEvents={setEvents} />\n            </PanelBody>\n          </Panel>\n          <Panel>\n            <SentryFunctionEnvironmentVariables\n              envVariables={envVariables}\n              setEnvVariables={setEnvVariables}\n            />\n          </Panel>\n          <Panel>\n            <PanelHeader>{t('Write your Code Below')}</PanelHeader>\n            <PanelBody>\n              <Editor\n                height=\"40vh\"\n                theme=\"light\"\n                defaultLanguage=\"javascript\"\n                defaultValue={defaultCode}\n                onChange={handleEditorChange}\n                options={{\n                  minimap: {\n                    enabled: false,\n                  },\n                  scrollBeyondLastLine: false,\n                }}\n              />\n            </PanelBody>\n          </Panel>\n        </Form>\n      </Feature>\n    </div>\n  );\n}\n\ntype WrapperState = {\n  sentryFunction?: SentryFunction;\n} & AsyncComponent['state'];\n\ntype WrapperProps = {\n  organization: Organization;\n  params: {functionSlug?: string};\n} & AsyncComponent['props'];\n\nclass SentryFunctionsWrapper extends AsyncComponent<WrapperProps, WrapperState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {functionSlug} = this.props.params;\n    const {organization} = this.props;\n    if (functionSlug) {\n      return [\n        [\n          'sentryFunction',\n          `/organizations/${organization.slug}/functions/${functionSlug}/`,\n        ],\n      ];\n    }\n    return [];\n  }\n  renderBody() {\n    return (\n      <SentryFunctionDetails sentryFunction={this.state.sentryFunction} {...this.props} />\n    );\n  }\n}\n\nexport default withOrganization(SentryFunctionsWrapper);\n"],"names":["SentryFunctionEnvironmentVariables","props","envVariables","setEnvVariables","_jsxs","children","PanelHeader","t","_jsx","StyledAddButton","size","icon","IconAdd","isCircled","onClick","addEnvVar","name","value","StyledPanelBody","EnvironmentVariableWrapper","EnvHeader","EnvHeaderRight","map","envVariable","i","TextField","required","inline","defaultValue","stacked","onChange","e","handleNameChange","pos","newEnvVariables","length","push","handleValueChange","ButtonHolder","IconDelete","splice","removeEnvVar","displayName","_styled","target","styles","Button","space","p","theme","gray400","PanelBody","SentryFunctionSubscriptions","events","setEvents","resource","checked","includes","concat","filter","SentryFunctionsSubscriptionGrid","EVENT_CHOICES","SubscriptionBox","disabledFromPermissions","webhookDisabled","isNew","breakpoints","large","transformData","data","onIssue","onError","onComment","output","formFields","type","placeholder","label","help","SentryFunctionDetails","form","useState","FormModel","functionSlug","params","organization","sentryFunction","method","endpoint","slug","defaultCode","code","useEffect","setValue","env_variables","Feature","features","Form","apiMethod","apiEndpoint","model","onPreSubmit","addLoadingMessage","initialData","onSubmitError","err","errorMessage","status","responseJSON","detail","addErrorMessage","onSubmitSuccess","addSuccessMessage","url","browserHistory","normalizeUrl","JsonForm","forms","title","fields","Panel","Editor","height","defaultLanguage","_event","options","minimap","enabled","scrollBeyondLastLine","SentryFunctionsWrapper","AsyncComponent","getEndpoints","this","renderBody","state","withOrganization"],"sourceRoot":""}