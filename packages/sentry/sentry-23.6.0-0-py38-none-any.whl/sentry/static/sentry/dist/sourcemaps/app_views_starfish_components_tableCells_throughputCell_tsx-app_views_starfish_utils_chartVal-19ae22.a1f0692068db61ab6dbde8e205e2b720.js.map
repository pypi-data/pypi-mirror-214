{"version":3,"file":"chunks/app_views_starfish_components_tableCells_throughputCell_tsx-app_views_starfish_utils_chartVal-19ae22.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/views/starfish/components/samplesTable/common.tsx","webpack:///./app/views/starfish/components/tableCells/durationCell.tsx","webpack:///./app/views/starfish/components/tableCells/throughputCell.tsx","webpack:///./app/views/starfish/utils/chartValueFormatters/formatThroughput.ts","webpack:///./app/views/starfish/views/spans/types.tsx","webpack:///./app/views/starfish/views/webServiceView/spanGroupBreakdown.tsx","webpack:///./app/views/starfish/views/webServiceView/spanGroupBreakdownContainer.tsx","webpack:///./app/views/starfish/utils/useEventsStatsQuery.tsx"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\nexport type DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\nexport type DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"events\"\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n\n  const res = useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: 'events',\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n\n  const pageLinks = res.response?.getResponseHeader('Link') ?? undefined;\n\n  return {...res, pageLinks};\n}\n\nexport default DiscoverQuery;\n","import styled from '@emotion/styled';\n\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  duration: number;\n  p95: number;\n};\n\nexport function DurationComparisonCell({duration, p95}: Props) {\n  const diff = duration - p95;\n\n  if (Math.floor(duration) === Math.floor(p95)) {\n    return <PlaintextLabel>{t('At baseline')}</PlaintextLabel>;\n  }\n\n  const labelString =\n    diff > 0 ? `+${diff.toFixed(2)}ms above` : `${diff.toFixed(2)}ms below`;\n\n  return <ComparisonLabel value={diff}>{labelString}</ComparisonLabel>;\n}\n\nexport const PlaintextLabel = styled('div')``;\n\nexport const ComparisonLabel = styled('span')<{value: number}>`\n  color: ${p => (p.value < 0 ? p.theme.green400 : p.theme.red400)};\n`;\n","import styled from '@emotion/styled';\n\nimport Duration from 'sentry/components/duration';\nimport {space} from 'sentry/styles/space';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport {ComparisonLabel} from 'sentry/views/starfish/components/samplesTable/common';\n\ntype Props = {\n  milliseconds: number;\n  delta?: number;\n};\n\nexport default function DurationCell({milliseconds, delta}: Props) {\n  return (\n    <Container>\n      <Duration seconds={milliseconds / 1000} fixedDigits={2} abbreviation />\n      {delta ? (\n        <ComparisonLabel value={delta}>\n          {delta > 0 ? '+' : ''}\n          {formatPercentage(delta)}\n        </ComparisonLabel>\n      ) : null}\n    </Container>\n  );\n}\n\nconst Container = styled('div')`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  gap: ${space(1)};\n`;\n","import styled from '@emotion/styled';\n\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {formatAbbreviatedNumber, formatPercentage} from 'sentry/utils/formatters';\nimport {ComparisonLabel} from 'sentry/views/starfish/components/samplesTable/common';\n\ntype Props = {\n  delta?: number;\n  throughputPerSecond?: number;\n};\n\nexport default function ThroughputCell({throughputPerSecond, delta}: Props) {\n  const throughput = throughputPerSecond ? throughputPerSecond.toFixed(2) : '--';\n  return (\n    <Container>\n      <span>{`${formatAbbreviatedNumber(throughput)}/${t('s')}`}</span>\n      {delta ? (\n        <ComparisonLabel value={delta * -1}>\n          {delta > 0 ? '+' : ''}\n          {formatPercentage(delta)}\n        </ComparisonLabel>\n      ) : null}\n    </Container>\n  );\n}\n\nconst Container = styled('div')`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  gap: ${space(1)};\n`;\n","import {t} from 'sentry/locale';\n\nconst formatThroughput = (throughputPerSecond: number = -1) => {\n  const throughput = throughputPerSecond === -1 ? '--' : throughputPerSecond.toFixed(2);\n  return `${throughput} / ${t('s')}`;\n};\n\nexport default formatThroughput;\n","import {Fragment} from 'react';\n\nimport Link from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport DurationCell from 'sentry/views/starfish/components/tableCells/durationCell';\n\nexport type DataKey =\n  | 'timeSpent'\n  | 'p50p95'\n  | 'p50'\n  | 'p95'\n  | 'throughput'\n  | 'duration'\n  | 'errorCount';\n\nexport const DataTitles: Record<DataKey, string> = {\n  timeSpent: t('Time Spent'),\n  p50p95: t('Duration (P50, P95)'),\n  p50: t('Duration (P50)'),\n  p95: t('Duration (P95)'),\n  duration: t('Duration'),\n  errorCount: t('5XX Responses'),\n  throughput: t('Throughput'),\n};\n\nexport const getTooltip = (\n  key: DataKey,\n  ...options: (string | number)[]\n): React.ReactNode => {\n  if (key === 'timeSpent') {\n    return (\n      <Fragment>\n        <div>\n          <DurationCell milliseconds={options[0] as number} />\n        </div>\n        <Link to=\"/starfish/definitions/\">How was this calculated?</Link>\n      </Fragment>\n    );\n  }\n  return '';\n};\n","import {useEffect, useState} from 'react';\nimport {Link} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport * as qs from 'query-string';\n\nimport Checkbox from 'sentry/components/checkbox';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {tooltipFormatterUsingAggregateOutputType} from 'sentry/utils/discover/charts';\nimport {NumberContainer} from 'sentry/utils/discover/styles';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {RightAlignedCell} from 'sentry/views/performance/landing/widgets/components/selectableList';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport {DataRow} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\ntype Props = {\n  colorPalette: string[];\n  initialShowSeries: boolean[];\n  isCumulativeTimeLoading: boolean;\n  isTableLoading: boolean;\n  isTimeseriesLoading: boolean;\n  tableData: DataRow[];\n  topSeriesData: Series[];\n  totalCumulativeTime: number;\n  errored?: boolean;\n  transaction?: string;\n};\n\nexport function SpanGroupBreakdown({\n  tableData: transformedData,\n  totalCumulativeTime: totalValues,\n  topSeriesData: data,\n  initialShowSeries,\n  transaction,\n  isTimeseriesLoading,\n  errored,\n}: Props) {\n  const {selection} = usePageFilters();\n  const theme = useTheme();\n  const [showSeriesArray, setShowSeriesArray] = useState<boolean[]>(initialShowSeries);\n\n  useEffect(() => {\n    setShowSeriesArray(initialShowSeries);\n  }, [initialShowSeries]);\n\n  const visibleSeries: Series[] = [];\n\n  for (let index = 0; index < data.length; index++) {\n    const series = data[index];\n    if (showSeriesArray[index]) {\n      visibleSeries.push(series);\n    }\n  }\n  const colorPalette = theme.charts.getColorPalette(transformedData.length - 2);\n\n  return (\n    <FlexRowContainer>\n      <ChartPadding>\n        <Header>\n          <ChartLabel>\n            {transaction\n              ? t('Endpoint Time Breakdown (P95)')\n              : t('App Time Breakdown (P95)')}\n          </ChartLabel>\n        </Header>\n        <Chart\n          statsPeriod=\"24h\"\n          height={210}\n          data={visibleSeries}\n          start=\"\"\n          end=\"\"\n          errored={errored}\n          loading={isTimeseriesLoading}\n          utc={false}\n          grid={{\n            left: '0',\n            right: '0',\n            top: '8px',\n            bottom: '0',\n          }}\n          definedAxisTicks={6}\n          stacked\n          aggregateOutputFormat=\"duration\"\n          tooltipFormatterOptions={{\n            valueFormatter: value =>\n              tooltipFormatterUsingAggregateOutputType(value, 'duration'),\n          }}\n        />\n      </ChartPadding>\n      <ListContainer>\n        {transformedData.map((row, index) => {\n          const checkedValue = showSeriesArray[index];\n          const group = row.group;\n          const {start, end, utc, period} = selection.datetime;\n          const spansLinkQueryParams =\n            start && end\n              ? {start: getUtcDateString(start), end: getUtcDateString(end), utc}\n              : {statsPeriod: period};\n          if (['db', 'http'].includes(group['span.category'])) {\n            spansLinkQueryParams['span.module'] = group['span.category'];\n          } else {\n            spansLinkQueryParams['span.module'] = 'Other';\n          }\n          spansLinkQueryParams['span.category'] = group['span.category'];\n\n          const spansLink = `/starfish/spans/?${qs.stringify(spansLinkQueryParams)}`;\n          return (\n            <StyledLineItem key={`${group['span.category']}`}>\n              <ListItemContainer>\n                <Checkbox\n                  size=\"sm\"\n                  checkboxColor={colorPalette[index]}\n                  inputCss={{backgroundColor: 'red'}}\n                  checked={checkedValue}\n                  onChange={() => {\n                    const updatedSeries = [...showSeriesArray];\n                    updatedSeries[index] = !checkedValue;\n                    setShowSeriesArray(updatedSeries);\n                  }}\n                />\n                <TextAlignLeft>\n                  {defined(transaction) ? (\n                    <TextOverflow>{group['span.category']}</TextOverflow>\n                  ) : (\n                    <Link to={spansLink}>\n                      <TextOverflow>{group['span.category']}</TextOverflow>\n                    </Link>\n                  )}\n                </TextAlignLeft>\n                <RightAlignedCell>\n                  <Tooltip\n                    title={t(\n                      '%s time spent on %s',\n                      formatPercentage(row.cumulativeTime / totalValues, 1),\n                      group['span.category']\n                    )}\n                    containerDisplayMode=\"block\"\n                    position=\"top\"\n                  >\n                    <NumberContainer\n                      style={{textDecoration: 'underline', textDecorationStyle: 'dotted'}}\n                    >\n                      {formatPercentage(row.cumulativeTime / totalValues, 1)}\n                    </NumberContainer>\n                  </Tooltip>\n                </RightAlignedCell>\n              </ListItemContainer>\n            </StyledLineItem>\n          );\n        })}\n      </ListContainer>\n    </FlexRowContainer>\n  );\n}\n\nconst StyledLineItem = styled('li')`\n  line-height: ${p => p.theme.text.lineHeightBody};\n`;\n\nconst ListItemContainer = styled('div')`\n  display: flex;\n  padding: ${space(1)} ${space(2)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ListContainer = styled('ul')`\n  padding: ${space(1)} 0 0 0;\n  margin: 0;\n  border-left: 1px solid ${p => p.theme.border};\n  list-style-type: none;\n`;\n\nconst TextAlignLeft = styled('span')`\n  text-align: left;\n  width: 100%;\n  padding: 0 ${space(1.5)};\n`;\n\nconst ChartPadding = styled('div')`\n  padding: 0 ${space(2)};\n  flex: 2;\n`;\n\nconst ChartLabel = styled('p')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst Header = styled('div')`\n  padding: 0 ${space(1)} 0 0;\n  min-height: 36px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst FlexRowContainer = styled('div')`\n  display: flex;\n  min-height: 200px;\n  padding-bottom: ${space(2)};\n`;\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\nimport {PageFilters} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {useEventsStatsQuery} from 'sentry/views/starfish/utils/useEventsStatsQuery';\nimport {SpanGroupBreakdown} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdown';\n\nexport const OTHER_SPAN_GROUP_MODULE = 'Other';\nexport const NULL_SPAN_CATEGORY = '<null>';\n\ntype Props = {\n  transaction?: string;\n  transactionMethod?: string;\n};\n\ntype Group = {\n  'span.category': string;\n};\n\nexport type Segment = Group & {\n  'p95(span.duration)': number;\n  'sum(span.duration)': number;\n};\n\nexport type DataRow = {\n  cumulativeTime: number;\n  group: Group;\n};\n\nexport function SpanGroupBreakdownContainer({transaction, transactionMethod}: Props) {\n  const pageFilter = usePageFilters();\n  const organization = useOrganization();\n  const location = useLocation();\n  const {selection} = pageFilter;\n  const theme = useTheme();\n\n  const {data: segments, isLoading: isSegmentsLoading} = useDiscoverQuery({\n    eventView: getCumulativeTimeEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      ['span.category']\n    ),\n    orgSlug: organization.slug,\n    referrer: 'starfish-web-service.span-category-breakdown',\n    location,\n    limit: 4,\n  });\n\n  const {data: cumulativeTime, isLoading: isCumulativeDataLoading} = useDiscoverQuery({\n    eventView: getCumulativeTimeEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      []\n    ),\n    orgSlug: organization.slug,\n    referrer: 'starfish-web-service.total-time',\n    location,\n  });\n\n  const {\n    isLoading: isTopDataLoading,\n    data: topData,\n    isError,\n  } = useEventsStatsQuery({\n    eventView: getEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      ['span.category'],\n      true\n    ),\n    enabled: true,\n    referrer: 'starfish-web-service.span-category-breakdown-timeseries',\n    initialData: [],\n  });\n\n  const totalValues = cumulativeTime?.data[0]?.['sum(span.duration)']\n    ? parseInt(cumulativeTime?.data[0]['sum(span.duration)'] as string, 10)\n    : 0;\n  const totalSegments =\n    segments?.data.reduce(\n      (acc, segment) => acc + parseInt(segment['sum(span.duration)'] as string, 10),\n      0\n    ) ?? 0;\n\n  const otherValue = totalValues ? totalValues - totalSegments : 0;\n\n  const transformedData: DataRow[] = [];\n\n  if (defined(segments)) {\n    for (let index = 0; index < segments.data.length; index++) {\n      const element = segments.data[index];\n      const category = element['span.category'] as string;\n      transformedData.push({\n        cumulativeTime: parseInt(element['sum(span.duration)'] as string, 10),\n        group: {\n          'span.category': category === '' ? NULL_SPAN_CATEGORY : category,\n        },\n      });\n    }\n\n    if (otherValue > 0) {\n      transformedData.push({\n        cumulativeTime: otherValue,\n        group: {\n          'span.category': OTHER_SPAN_GROUP_MODULE,\n        },\n      });\n    }\n  }\n\n  const seriesByDomain: {[category: string]: Series} = {};\n  const colorPalette = theme.charts.getColorPalette(transformedData.length - 2);\n\n  if (defined(topData)) {\n    if (!isTopDataLoading && transformedData.length > 0) {\n      transformedData.forEach((segment, index) => {\n        const category = segment.group['span.category'] as string;\n        const label = category === '' ? NULL_SPAN_CATEGORY : category;\n        seriesByDomain[label] = {\n          seriesName: label,\n          data: [],\n          color: colorPalette[index],\n        };\n      });\n\n      Object.keys(topData).forEach(key => {\n        const seriesData = topData?.[key];\n        const label = key === '' ? NULL_SPAN_CATEGORY : key;\n        seriesByDomain[label].data =\n          seriesData?.data.map(datum => {\n            return {name: datum[0], value: datum[1][0].count} as SeriesDataUnit;\n          }) ?? [];\n      });\n    }\n  }\n\n  const data = Object.values(seriesByDomain);\n\n  const initialShowSeries = transformedData.map(\n    segment => segment.group['span.category'] !== OTHER_SPAN_GROUP_MODULE\n  );\n\n  return (\n    <StyledPanel>\n      <SpanGroupBreakdown\n        tableData={transformedData}\n        totalCumulativeTime={totalValues}\n        isTableLoading={isSegmentsLoading}\n        topSeriesData={data}\n        colorPalette={colorPalette}\n        initialShowSeries={initialShowSeries}\n        isTimeseriesLoading={isTopDataLoading}\n        isCumulativeTimeLoading={isCumulativeDataLoading}\n        transaction={transaction}\n        errored={isError}\n      />\n    </StyledPanel>\n  );\n}\n\nconst StyledPanel = styled(Panel)`\n  padding-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nconst getEventView = (\n  pageFilters: PageFilters,\n  query: string,\n  groups: string[],\n  getTimeseries?: boolean\n) => {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['sum(span.duration)', 'p95(span.duration)', ...groups],\n    yAxis: getTimeseries ? ['p95(span.duration)'] : [],\n    query,\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    orderby: '-sum_span_duration',\n    projects: [1],\n    version: 2,\n    topEvents: groups.length > 0 ? '4' : undefined,\n    interval: getTimeseries ? getInterval(pageFilters.datetime, 'low') : undefined,\n  });\n};\n\nconst getCumulativeTimeEventView = (\n  pageFilters: PageFilters,\n  query: string,\n  groups: string[]\n) => {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['sum(span.duration)', ...groups],\n    query,\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    orderby: '-sum_span_duration',\n    projects: [1],\n    version: 2,\n    topEvents: groups.length > 0 ? '4' : undefined,\n  });\n};\n","import {EventsStats, MultiSeriesEventsStats} from 'sentry/types';\nimport EventView, {encodeSort} from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nexport function useEventsStatsQuery({\n  eventView,\n  enabled,\n  initialData,\n  referrer,\n}: {\n  eventView: EventView;\n  enabled?: boolean;\n  initialData?: any;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isLoading, data, isError} = useGenericDiscoverQuery<\n    EventsStats | MultiSeriesEventsStats,\n    DiscoverQueryProps\n  >({\n    route: 'events-stats',\n    eventView,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...eventView.getEventsAPIPayload(location),\n      yAxis: eventView.yAxis,\n      topEvents: eventView.topEvents,\n      excludeOther: 0,\n      partial: 1,\n      orderby: eventView.sorts?.[0] ? encodeSort(eventView.sorts?.[0]) : undefined,\n      interval: eventView.interval,\n    }),\n    options: {\n      enabled,\n      retry: false,\n      refetchOnWindowFocus: false,\n    },\n    referrer,\n  });\n  return {\n    isLoading,\n    data: isLoading && initialData ? initialData : data,\n    isError,\n  };\n}\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","_jsx","GenericDiscoverQuery","route","afterFetch","data","_","fields","otherMeta","meta","useDiscoverQuery","res","useGenericDiscoverQuery","pageLinks","response","getResponseHeader","undefined","displayName","DurationComparisonCell","_ref","duration","p95","diff","Math","floor","PlaintextLabel","children","t","labelString","toFixed","ComparisonLabel","value","_styled","target","p","theme","green400","red400","DurationCell","milliseconds","delta","_jsxs","Container","Duration","seconds","fixedDigits","abbreviation","formatPercentage","space","ThroughputCell","throughputPerSecond","throughput","formatAbbreviatedNumber","arguments","length","DataTitles","timeSpent","p50p95","p50","errorCount","getTooltip","key","_len","options","Array","_key","Fragment","Link","to","SpanGroupBreakdown","tableData","transformedData","totalCumulativeTime","totalValues","topSeriesData","initialShowSeries","transaction","isTimeseriesLoading","errored","selection","usePageFilters","useTheme","showSeriesArray","setShowSeriesArray","useState","useEffect","visibleSeries","index","series","push","colorPalette","charts","getColorPalette","FlexRowContainer","ChartPadding","Header","ChartLabel","Chart","statsPeriod","height","start","end","loading","utc","grid","left","right","top","bottom","definedAxisTicks","stacked","aggregateOutputFormat","tooltipFormatterOptions","valueFormatter","tooltipFormatterUsingAggregateOutputType","ListContainer","map","row","checkedValue","group","period","datetime","spansLinkQueryParams","getUtcDateString","includes","spansLink","qs","StyledLineItem","ListItemContainer","Checkbox","size","checkboxColor","inputCss","backgroundColor","checked","onChange","updatedSeries","TextAlignLeft","defined","TextOverflow","RightAlignedCell","Tooltip","title","cumulativeTime","containerDisplayMode","position","NumberContainer","style","textDecoration","textDecorationStyle","text","lineHeightBody","fontSizeMedium","border","cardTitle","OTHER_SPAN_GROUP_MODULE","NULL_SPAN_CATEGORY","SpanGroupBreakdownContainer","transactionMethod","pageFilter","organization","useOrganization","location","useLocation","segments","isLoading","isSegmentsLoading","eventView","getCumulativeTimeEventView","orgSlug","slug","referrer","limit","isCumulativeDataLoading","isTopDataLoading","topData","isError","enabled","initialData","getRequestPayload","getEventsAPIPayload","yAxis","topEvents","excludeOther","partial","orderby","sorts","encodeSort","interval","retry","refetchOnWindowFocus","useEventsStatsQuery","getEventView","parseInt","totalSegments","reduce","acc","segment","otherValue","element","category","seriesByDomain","forEach","label","seriesName","color","Object","keys","seriesData","datum","name","count","values","StyledPanel","isTableLoading","isCumulativeTimeLoading","Panel","pageFilters","query","groups","getTimeseries","EventView","dataset","DiscoverDatasets","range","projects","version","getInterval"],"sourceRoot":""}