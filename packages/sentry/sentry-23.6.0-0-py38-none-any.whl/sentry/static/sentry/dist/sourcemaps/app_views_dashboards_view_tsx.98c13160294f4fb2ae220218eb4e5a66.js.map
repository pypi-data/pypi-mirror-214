{"version":3,"file":"chunks/app_views_dashboards_view_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboards/orgDashboards.tsx","webpack:///./app/views/dashboards/view.tsx"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport NotFound from 'sentry/components/errors/notFound';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withRouteAnalytics, {\n  WithRouteAnalyticsProps,\n} from 'sentry/utils/routeAnalytics/withRouteAnalytics';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nimport {assignTempId} from './layoutUtils';\nimport {DashboardDetails, DashboardListItem} from './types';\nimport {hasSavedPageFilters} from './utils';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  onDashboardUpdate: (updatedDashboard: DashboardDetails) => void;\n};\n\ntype Props = WithRouteAnalyticsProps & {\n  api: Client;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n  location: Location;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      this.props.setEventNames('dashboards2.view', 'Dashboards2: View dashboard');\n      this.props.setRouteAnalyticsParams({\n        dashboard_id: params.dashboardId,\n      });\n    }\n\n    return endpoints;\n  }\n\n  onDashboardUpdate(updatedDashboard: DashboardDetails) {\n    this.setState({selectedDashboard: updatedDashboard});\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      const queryParamFilters = new Set([\n        'project',\n        'environment',\n        'statsPeriod',\n        'start',\n        'end',\n        'utc',\n        'release',\n      ]);\n      if (\n        stateKey === 'selectedDashboard' &&\n        // Only redirect if there are saved filters and none of the filters\n        // appear in the query params\n        hasSavedPageFilters(data) &&\n        isEmpty(\n          Object.keys(location.query).filter(unsavedQueryParam =>\n            queryParamFilters.has(unsavedQueryParam)\n          )\n        )\n      ) {\n        browserHistory.replace({\n          ...location,\n          query: {\n            ...location.query,\n            project: data.projects,\n            environment: data.environment,\n            statsPeriod: data.period,\n            start: data.start,\n            end: data.end,\n            utc: data.utc,\n          },\n        });\n      }\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    browserHistory.replace(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/dashboard/${dashboardId}/`,\n        query: {\n          ...location.query,\n        },\n      })\n    );\n  }\n\n  renderLoading() {\n    return (\n      <Layout.Page withPadding>\n        <LoadingIndicator />\n      </Layout.Page>\n    );\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n    let dashboard = selectedDashboard;\n\n    // Ensure there are always tempIds for grid layout\n    // This is needed because there are cases where the dashboard\n    // renders before the onRequestSuccess setState is processed\n    // and will caused stacked widgets because of missing tempIds\n    dashboard = selectedDashboard\n      ? {\n          ...selectedDashboard,\n          widgets: selectedDashboard.widgets.map(assignTempId),\n        }\n      : null;\n\n    return children({\n      error,\n      dashboard,\n      dashboards: this.getDashboards(),\n      onDashboardUpdate: (updatedDashboard: DashboardDetails) =>\n        this.onDashboardUpdate(updatedDashboard),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n    const {loading, selectedDashboard} = this.state;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace(\n        normalizeUrl({\n          pathname: `/organizations/${organization.slug}/dashboards/`,\n          query: {\n            ...location.query,\n          },\n        })\n      );\n      return null;\n    }\n\n    if (\n      loading &&\n      selectedDashboard &&\n      hasSavedPageFilters(selectedDashboard) &&\n      isEmpty(location.query)\n    ) {\n      // Block dashboard from rendering if the dashboard has filters and\n      // the URL does not contain filters yet. The filters can either match the\n      // saved filters, or can be different (i.e. sharing an unsaved state)\n      return this.renderLoading();\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withRouteAnalytics(OrgDashboards);\n","import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {updateDashboardVisit} from 'sentry/actionCreators/dashboards';\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NotFound from 'sentry/components/errors/notFound';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState, Widget} from './types';\nimport {constructWidgetFromQuery} from './utils';\n\nconst ALLOWED_PARAMS = [\n  'start',\n  'end',\n  'utc',\n  'period',\n  'project',\n  'environment',\n  'statsPeriod',\n];\n\ntype Props = RouteComponentProps<\n  {dashboardId: string; orgId: string; widgetId?: number},\n  {}\n> & {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const api = useApi();\n\n  const {organization, params, location} = props;\n  const dashboardId = params.dashboardId;\n  const orgSlug = organization.slug;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n  const [dashboardInitialState, setDashboardInitialState] = useState(DashboardState.VIEW);\n\n  useEffect(() => {\n    if (dashboardId && dashboardId !== 'default-overview') {\n      updateDashboardVisit(api, orgSlug, dashboardId);\n    }\n  }, [api, orgSlug, dashboardId]);\n\n  useEffect(() => {\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    // Clean up url after constructing widget from query string, only allow GHS params\n    if (constructedWidget) {\n      setDashboardInitialState(DashboardState.EDIT);\n      browserHistory.replace({\n        pathname: location.pathname,\n        query: pick(location.query, ALLOWED_PARAMS),\n      });\n    }\n  }, [location.pathname, location.query]);\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <ErrorBoundary>\n              <DashboardDetail\n                {...props}\n                initialState={dashboardInitialState}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                onDashboardUpdate={onDashboardUpdate}\n                newWidget={newWidget}\n                onSetNewWidget={() => setNewWidget(undefined)}\n              />\n            </ErrorBoundary>\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withOrganization(ViewEditDashboard);\n\ntype FeatureProps = {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nexport function DashboardBasicFeature({organization, children}: FeatureProps) {\n  const renderDisabled = () => (\n    <Layout.Page withPadding>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </Layout.Page>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n}\n"],"names":["OrgDashboards","AsyncComponent","constructor","arguments","_defineProperty","loading","reloading","error","errors","dashboards","selectedDashboard","componentDidUpdate","prevProps","isEqual","params","dashboardId","this","props","remountComponent","getEndpoints","organization","url","slug","endpoints","push","setEventNames","setRouteAnalyticsParams","dashboard_id","onDashboardUpdate","updatedDashboard","setState","getDashboards","state","Array","isArray","onRequestSuccess","_ref","stateKey","data","location","queryParamFilters","Set","hasSavedPageFilters","isEmpty","Object","keys","query","filter","unsavedQueryParam","has","browserHistory","project","projects","environment","statsPeriod","period","start","end","utc","length","id","normalizeUrl","pathname","renderLoading","_jsx","Layout","withPadding","children","LoadingIndicator","renderBody","dashboard","widgets","map","assignTempId","renderError","values","find","resp","status","NotFound","super","renderComponent","features","includes","SentryDocumentTitle","title","t","orgSlug","withRouteAnalytics","ALLOWED_PARAMS","ViewEditDashboard","api","useApi","newWidget","setNewWidget","useState","dashboardInitialState","setDashboardInitialState","DashboardState","useEffect","updateDashboardVisit","constructedWidget","constructWidgetFromQuery","pick","DashboardBasicFeature","ErrorBoundary","DashboardDetail","initialState","onSetNewWidget","undefined","displayName","withOrganization","_ref2","Feature","hookName","renderDisabled","Alert","type"],"sourceRoot":""}