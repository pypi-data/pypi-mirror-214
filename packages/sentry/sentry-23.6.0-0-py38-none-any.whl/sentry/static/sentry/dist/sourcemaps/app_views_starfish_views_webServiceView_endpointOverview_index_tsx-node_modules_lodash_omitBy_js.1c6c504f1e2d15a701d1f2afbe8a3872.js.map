{"version":3,"file":"chunks/app_views_starfish_views_webServiceView_endpointOverview_index_tsx-node_modules_lodash_omitBy_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"2WAQO,MAAMA,GAA2BC,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,2DAMhCE,EAAAA,EAAAA,GAAM,GAAE,kBACXA,EAAAA,EAAAA,GAAM,GAAE,wBAEHC,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,+DAI9BH,GAAKA,EAAEC,MAAMC,YAAYE,QAAM,MAChDJ,GACAA,EAAEK,QACG,uCACyBL,EAAEK,uBAE3B,wDAC0CL,EAAEM,2BAClD,K,qMC3BE,MAAMC,GAAiBV,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,aAAbD,CAAc,CAAAW,KAAA,SAAAC,OAAA,gCAK/BC,GAAgBb,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,aAAbD,CAAc,CAAAW,KAAA,SAAAC,OAAA,+BAK9BE,GAAgCd,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,aAAbD,CAAc,CAAAW,KAAA,UAAAC,OAAA,6D,2jDCL3D,MAAMG,EAAuB,E,2MC4B7B,MAAMC,EAAoC,CACxC,CACEC,IAAK,KACLN,KAAM,WACNO,MAAO,KAET,CACED,IAAK,aACLN,KAAM,aACNO,MAAO,KAET,CACED,IAAKE,EAAAA,GACLR,KAAM,qBACNO,MAAO,KAET,CACED,IAAK,YACLN,KAAM,YACNO,MAAO,KAET,CACED,IAAK,uBACLN,KAAMS,EAAAA,EAAAA,SACNF,MAAO,KAET,CACED,IAAK,iBACLN,KAAM,kBACNO,MAAO,MAoBJ,SAASG,EAAuBC,GAA2B,IAA1B,gBAACC,GAAuBD,EAC9D,MAAME,GAAWC,EAAAA,EAAAA,KACXC,GAAeC,EAAAA,EAAAA,KAGfC,EAAuB,CAC3BC,QAAIC,EACJnB,KAAM,4BACNoB,MALY,IAAIC,EAAAA,GAAcT,GAKjBU,eACbC,SAAU,CAAC,GACXC,OAAQ,GACRC,QAASC,EAAAA,GAAAA,SACTC,QAAS,GAGLC,EAAYC,EAAAA,GAAAA,yBAAmCZ,EAAYJ,IAC3D,UAACiB,EAAS,KAAEC,EAAI,eAAEC,GDhFX,SAAuCJ,GACpD,MAAMf,GAAWC,EAAAA,EAAAA,KACXC,GAAeC,EAAAA,EAAAA,KAEfiB,EAAmC,CACvC,CACEC,MAAO,uBACPC,KAAM,SAER,CACED,MAAO,aACPC,KAAM,SAER,CACED,MAAO,YACPC,KAAM,SAER,CACED,MAAO,gBACPC,KAAM,SAER,CACED,MAAO,WACPC,KAAM,SAER,CACED,MAAO,aACPC,KAAM,SAER,CACED,MAAO,iBACPC,KAAM,SAER,CACED,MAAO,WACPC,KAAM,UAIJC,EAAsBR,EAAUS,QAAQC,YAAY,CACxD,CAACH,KAAM,WAAYI,SAAU,CAAC,MAAO,4BAAwBpB,OAAWA,IACxE,CAACgB,KAAM,WAAYI,SAAU,CAAC,MAAO,4BAAwBpB,OAAWA,OAGnEW,UAAWU,EAAcT,KAAMC,IAAkBS,EAAAA,EAAAA,GAAiB,CACvEb,UAAWQ,EACXM,SAAU,6CACV7B,WACA8B,QAAS5B,EAAa6B,OAGlBC,EAA0BjB,EAC7BS,QACAC,YAAYL,GACZa,UAAU,CACT,CACEZ,MAAO,uBACPC,KAAM,UAIZU,EAAwBE,qBAAuB,IAAI1B,EAAAA,GAChD,yBACCW,GAAgBD,OAAO,KAAK,8BAAgC,KAIhE,MAAOD,UAAWkB,EAAkBjB,KAAMkB,IAAsBR,EAAAA,EAAAA,GAAiB,CAC/Eb,UAAWiB,EACXH,SAAU,6CACV7B,WACA8B,QAAS5B,EAAa6B,KAEtBM,MAAO9C,IAGH+C,EAAyBvB,EAC5BS,QACAC,YAAYL,GACZa,UAAU,CACT,CACEZ,MAAO,uBACPC,KAAM,UAIZgB,EAAuBJ,qBAAuB,IAAI1B,EAAAA,GAC/C,0BACCW,GAAgBD,OAAO,KAAK,8BAAgC,KAIhE,MAAOD,UAAWsB,EAAiBrB,KAAMsB,IAAqBZ,EAAAA,EAAAA,GAAiB,CAC7Eb,UAAWuB,EACXT,SAAU,6CACV7B,WACA8B,QAAS5B,EAAa6B,KACtBM,MAAO9C,IAGHkD,EAA0B1B,EAC7BS,QACAC,YAAYL,GACZa,UAAU,CACT,CACEZ,MAAO,uBACPC,KAAM,SAIZmB,EAAwBP,qBAAuB,IAAI1B,EAAAA,GAChD,0BACCW,GAAgBD,OAAO,KAAK,8BAAgC,KAIhE,MAAOD,UAAWyB,EAAkBxB,KAAMyB,IAAsBf,EAAAA,EAAAA,GAAiB,CAC/Eb,UAAW0B,EACXZ,SAAU,6CACV7B,WACA8B,QAAS5B,EAAa6B,KACtBM,MAAO9C,IAGT,OAAIoC,GAAgBQ,GAAoBI,GAAmBG,EAClD,CAACzB,WAAW,EAAMC,KAAM,IAS1B,CACLD,WAAW,EACXC,KARmB,IACfkB,GAAoBlB,MAAQ,MAC5BsB,GAAmBtB,MAAQ,MAC3ByB,GAAoBzB,MAAQ,IAMhCC,eAAgBA,GAAgBD,KAAK,IAAM,GAE/C,CC3D4C0B,CAA8B7B,GAoFxE,OACE8B,EAAAA,EAAAA,IAACC,EAAAA,GAAY,CACX7B,UAAWA,EACXC,KAAMA,EACN6B,YAAavD,EACbwD,aAAc,GACdhD,SAAUA,EACViD,KAAM,CACJC,eA1FN,SAAwBC,GACtB,MAAmB,mBAAfA,EAAO1D,KAEPoD,EAAAA,EAAAA,IAAC3D,EAAAA,GAAc,CAAAkE,UACbP,EAAAA,EAAAA,IAACvD,EAAAA,GAA6B,CAAA8D,SAAED,EAAOhE,SAKzCgE,EAAO1D,MAAQE,EAAAA,IAEf0D,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAF,SAAA,CACND,EAAOhE,MACR0D,EAAAA,EAAAA,IAACU,EAAkB,CACjBC,KAAK,KACLC,SAAS,MACTC,OAAOC,EAAAA,EAAAA,GACJ,0HAOJd,EAAAA,EAAAA,IAACvD,EAAAA,GAA6B,CAAA8D,SAAED,EAAOhE,MAChD,EAkEMyE,eAhEN,SAAwBT,EAA2BU,GACjD,MAAmB,OAAfV,EAAO1D,KAEPoD,EAAAA,EAAAA,IAACiB,EAAAA,EAAI,CAACC,GAAK,gBAAeF,EAAI,mBAAmBA,EAAIxD,KAAK+C,SACvDS,EAAIxD,GAAG2D,MAAM,EAAG,KAKJ,eAAfb,EAAO1D,IACFoE,EAAII,YACTpB,EAAAA,EAAAA,IAACiB,EAAAA,EAAI,CACHC,GAAK,sBAAqBF,EAAI,mBAAmBA,EAAII,yBAAyBb,SAE7ES,EAAII,WAAWD,MAAM,EAAG,KAG3B,aAIe,yBAAfb,EAAO1D,KAEPoD,EAAAA,EAAAA,IAACqB,EAAAA,EAAQ,CACPC,QAASN,EAAI,wBAA0B,IACvCO,YAAa,EACbC,cAAY,IAKC,cAAflB,EAAO1D,KACFoD,EAAAA,EAAAA,IAACyB,EAAAA,EAAQ,CAACC,KAAMV,EAAIV,EAAO1D,KAAM+E,MAAI,EAACC,UAAQ,EAACN,SAAO,IAG5C,mBAAfhB,EAAO1D,KAEPoD,EAAAA,EAAAA,IAAC6B,EAAAA,GAAsB,CACrBC,SAAUd,EAAI,wBACde,IAAMzD,IAAiB,8BAA2C,IAKpEgC,EAAO1D,MAAQE,EAAAA,IACVkF,EAAAA,EAAAA,IAAiB1B,EAAO1D,IAAK,CAAC,EAA9BoF,CAAiChB,EAAK,CAC3C7D,WACAE,eACAa,eAIG8B,EAAAA,EAAAA,IAACxD,EAAAA,GAAa,CAAA+D,SAAES,EAAIV,EAAO1D,MACpC,IAeF,CAjHgBI,EAAuBiF,YAAA,0BAmHvC,MAAMvB,GAAqB/E,EAAAA,EAAAA,GAAOuG,EAAAA,EAAe,CAAAtG,OAAA,aAAtBD,CAAuB,CAAAW,KAAA,UAAAC,OAAA,+B,0UC1LlD,SAAS4F,EAAYC,GACnB,MAAM,gBAACC,EAAe,cAAEC,GAAiBF,EACnC/E,GAAeC,EAAAA,EAAAA,KAUfiF,EAN4B,CAChC,mBACID,EAAgB,CAAE,kBAAiBA,KAAmB,CAAC,OACvDD,EAAkB,CAAE,eAAcA,KAAqB,CAAC,OCnB9BG,KAChC,MAAM,UAACC,EAAS,QAAEC,EAAO,YAAEC,IAAeC,EAAAA,EAAAA,IAAeJ,IACnD,MAACK,EAAK,IAAEC,IAAOC,EAAAA,EAAAA,IAAwB,CAC3CF,MAAOJ,EAAUO,SACjBF,IAAKJ,EAAQM,WAEf,OAAOL,EAAc,CAAE,eAAcA,KAAiB,CAAE,SAAQE,IAAU,OAAMC,IAAM,EDQhEG,EADFC,EAAAA,EAAAA,OASwBC,KAAK,KAE3CC,GAAcC,EAAAA,EAAAA,UAClB,KAAM,CAAEC,QAAS,EAAG5F,MAAO6E,EAAqB/C,MAAO,EAAG+D,KAAM,SAChE,CAAChB,IAGH,OACEvC,EAAAA,EAAAA,IAACwD,EAAAA,EAAS,CACRC,MAAOpG,EAAa6B,KACpBwE,WAAW,EACXC,cAAY,EACZC,aAAe,kBAAiBvG,EAAa6B,eAC7CxB,MAAO6E,EACPa,YAAaA,EACbS,gBAAgB,EAChBC,YAAU,EACVC,OAAO,6BAGb,CAhCS5B,EAAWF,YAAA,cAkCpB,U,qFEZA,MAAM+B,EAAoB,EAEpBC,IAAgBC,EAAAA,EAAAA,GAAQC,EAAAA,GAMf,SAASC,KACtB,MAAMjH,GAAWC,EAAAA,EAAAA,KACXC,GAAeC,EAAAA,EAAAA,MAEf,SAAC+G,EAAQ,OAAEC,EAAM,YAAE3B,GAAexF,EAASO,MAC3C6G,EAAcF,EAChBG,MAAMC,QAAQJ,GACZA,EAAS,GACTA,OACF5G,EACE+E,GAAaU,EAAAA,EAAAA,MAEZwB,EAAOC,IAAYC,EAAAA,EAAAA,UAAgB,CAACC,YAAaC,EAAAA,EAAAA,OACjDC,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAgC,OAEhE1H,EAAkB,CACtB,kBACA,6BACC,eAAcqH,IACd,eAAcD,KAGX5G,EAAQ,IAAIC,EAAAA,GAAcT,GAE1BK,EAAuB,CAC3BC,QAAIC,EACJnB,MAAMwE,EAAAA,EAAAA,GAAE,qBACRpD,MAAOA,EAAME,eACbC,SAAU,CAAC,GACXC,OAAQ,CAAC,QAAS,4BAA6B,sBAC/CC,QAASC,EAAAA,GAAAA,QACT6E,MAAOL,EAAWyC,UAAUC,SAASrC,YAASpF,EAC9CqF,IAAKN,EAAWyC,UAAUC,SAASpC,UAAOrF,EAC1C0H,MAAO3C,EAAWyC,UAAUC,SAASE,aAAU3H,EAC/CQ,QAAS,GAGLC,EAAYC,EAAAA,GAAAA,yBAAmCZ,EAAYJ,IAE1DkB,KAAMgH,EAAQjH,UAAWkH,IAAmBvG,EAAAA,EAAAA,GAAiB,CAClEb,YACAe,QAAS5B,EAAa6B,KACtB/B,aA2IF,OACE6C,EAAAA,EAAAA,IAACuF,EAAAA,EAAoB,CAAAhF,UACnBC,EAAAA,EAAAA,IAACgF,EAAAA,GAAW,CAAAjF,SAAA,EACVP,EAAAA,EAAAA,IAACwF,EAAAA,GAAa,CAAAjF,UACZP,EAAAA,EAAAA,IAACwF,EAAAA,GAAoB,CAAAjF,UACnBP,EAAAA,EAAAA,IAACwF,EAAAA,GAAY,CAAAjF,SAAG,GAAE+D,KAAUC,WAIhC/D,EAAAA,EAAAA,IAACgF,EAAAA,GAAW,CAAAjF,SAAA,EACVP,EAAAA,EAAAA,IAACyF,GAAmC,CAAAlF,UAClCP,EAAAA,EAAAA,IAAC0F,EAAAA,EAAa,CAACC,WAAS,EAAApF,UACtBP,EAAAA,EAAAA,IAAC4F,EAAAA,EAAc,CAACC,cAAc,cAIlCrF,EAAAA,EAAAA,IAACgF,EAAAA,GAAW,CAAAjF,SAAA,EACVP,EAAAA,EAAAA,IAAC8F,GAAS,CAAC1J,QAAS,IAAImE,UACtBP,EAAAA,EAAAA,IAAC+F,EAAAA,GAA2B,CAACxB,YAAaA,OAE5CvE,EAAAA,EAAAA,IAACgG,GAAyB,CAAAzF,UACxBC,EAAAA,EAAAA,IAACyF,EAAAA,EAAgB,CACftF,KAAK,KACL,cAAYG,EAAAA,EAAAA,GAAE,gBACdoF,MAAOxB,EAAMG,YACbsB,SAAUvJ,GAAO+H,EAAS,IAAID,EAAOG,YAAajI,IAAM2D,SAAA,EAExDP,EAAAA,EAAAA,IAACiG,EAAAA,EAAAA,KAAqB,CAAA1F,UAASO,EAAAA,EAAAA,GAAE,cAAN,KAC3Bd,EAAAA,EAAAA,IAACiG,EAAAA,EAAAA,KAAqB,CAAA1F,UAAaO,EAAAA,EAAAA,GAAE,SAAV,SAC3Bd,EAAAA,EAAAA,IAACiG,EAAAA,EAAAA,KAAqB,CAAA1F,UAAWO,EAAAA,EAAAA,GAAE,OAAR,YAI/Bd,EAAAA,EAAAA,IAACoG,GAAgB,CAACC,OAAQ3B,EAAMG,YAAaN,YAAaA,KAC1DvE,EAAAA,EAAAA,IAACsG,GAAS,CAAA/F,UAAEO,EAAAA,EAAAA,GAAE,oBACdd,EAAAA,EAAAA,IAAChD,EAAuB,CAACE,gBAAiBA,KAC1C8C,EAAAA,EAAAA,IAACgG,GAAyB,CAAAzF,UACxBC,EAAAA,EAAAA,IAACyF,EAAAA,EAAgB,CACftF,KAAK,KACL,cAAYG,EAAAA,EAAAA,GAAE,sBACdoF,MAAOnB,EACPoB,SAAUvJ,GAAOoI,EAAepI,GAAK2D,SAAA,EAErCP,EAAAA,EAAAA,IAACiG,EAAAA,EAAAA,KAAqB,CAAA1F,UAAYO,EAAAA,EAAAA,GAAE,eAAT,QAC3Bd,EAAAA,EAAAA,IAACiG,EAAAA,EAAAA,KAAqB,CAAA1F,UACnBO,EAAAA,EAAAA,GAAE,gBADuByF,EAAAA,GAAAA,QAG5BvG,EAAAA,EAAAA,IAACiG,EAAAA,EAAAA,KAAqB,CAAA1F,UACnBO,EAAAA,EAAAA,GAAE,qBADuByF,EAAAA,GAAAA,mBAKhCvG,EAAAA,EAAAA,IAACmC,EAAW,CACVG,cAA+B,QAAhByC,OAAwBtH,EAAYsH,EACnD1C,gBAAiBkC,QAGrB/D,EAAAA,EAAAA,IAACgF,EAAAA,GAAW,CAAAjF,SAAA,EA/LhBP,EAAAA,EAAAA,IAACiE,GAAa,CACZvG,MAAOA,EAAME,eACb4I,iBAAiB,EACjBC,SAAO,EACPjH,MAAO,EACPkH,SAAS,KACTC,wBAAsB,EACtBC,YAAa1I,EAAU0I,YACvBtD,QAASpF,EAAUoF,QACnB8B,OAAQlH,EAAUyE,YAClB3D,SAAS,6BACT6D,MAAO3E,EAAU2E,MACjBC,IAAK5E,EAAU4E,IACfzF,aAAcA,EACdwJ,MAAO,CAAC,QAAS,4BAA6B,sBAC9C9I,QAASC,EAAAA,GAAAA,QAAyBuC,SAEjCtD,IAAwB,IAAvB,QAAC6J,EAAO,QAAEC,GAAQ9J,EAClB,OAAK8J,GAIHvG,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAF,SAAA,EACPP,EAAAA,EAAAA,IAACgH,GAAM,CAAAzG,UACLP,EAAAA,EAAAA,IAACiH,GAAU,CAAA1G,SAAExD,EAAAA,EAAAA,gBAEfiD,EAAAA,EAAAA,IAACkH,GAAiB,CAChB9I,UAAWkH,EACXY,OACEiB,EAAAA,EAAAA,IAAQ9B,IACJvE,EAAAA,EAAAA,GAAE,OAASuE,EAAOhH,KAAK,GAAG,SAAoB+I,QAAQ,SACtD3J,KAGRuC,EAAAA,EAAAA,IAACqH,EAAAA,GAAK,CACJ1E,YAAcA,GAA0B,MACxC2E,OAAQ,GACRjJ,KAAM,CAAC0I,EAAQ,IACflE,MAAM,GACNC,IAAI,GACJgE,QAASA,EACTS,KAAK,EACLC,aAAW,EACXC,iBAAkB,EAClBC,cAAY,EACZC,YAAa,CAACC,EAAAA,IACdxH,KAAM,CACJyH,KAAM,MACNC,MAAO,IACPC,IAAK,MACLC,OAAQ,KAEVC,wBAAyB,CACvBC,eAAgBhC,IAASiC,EAAAA,EAAAA,GAAiBjC,OAG9ClG,EAAAA,EAAAA,IAACoI,EAAAA,GAAa,KACdpI,EAAAA,EAAAA,IAACgH,GAAM,CAAAzG,UACLP,EAAAA,EAAAA,IAACiH,GAAU,CAAA1G,SAAExD,EAAAA,EAAAA,SAEfiD,EAAAA,EAAAA,IAACkH,GAAiB,CAChB9I,UAAWkH,EACXY,OACEiB,EAAAA,EAAAA,IAAQ9B,IACJgD,EAAAA,EAAAA,IACEhD,EAAOhH,KAAK,GAAG,6BACf,iBAEFZ,KAGRuC,EAAAA,EAAAA,IAACqH,EAAAA,GAAK,CACJ1E,YAAcA,GAA0B,MACxC2E,OAAQ,GACRjJ,KAAM,CAAC0I,EAAQ,IACflE,MAAM,GACNC,IAAI,GACJgE,QAASA,EACTS,KAAK,EACLC,aAAW,EACXC,iBAAkB,EAClBC,cAAY,EACZC,YAAa,CAACW,EAAAA,IACdlI,KAAM,CACJyH,KAAM,MACNC,MAAO,IACPC,IAAK,MACLC,OAAQ,KAEVC,wBAAyB,CACvBC,eAAgBhC,IACdmC,EAAAA,EAAAA,IAAyCnC,EAAO,gBAGtDlG,EAAAA,EAAAA,IAACoI,EAAAA,GAAa,KACdpI,EAAAA,EAAAA,IAACgH,GAAM,CAAAzG,UACLP,EAAAA,EAAAA,IAACiH,GAAU,CAAA1G,SAAExD,EAAAA,EAAAA,gBAEfiD,EAAAA,EAAAA,IAACkH,GAAiB,CAChB9I,UAAWkH,EACXY,OACEiB,EAAAA,EAAAA,IAAQ9B,IACJgD,EAAAA,EAAAA,IACEhD,EAAOhH,KAAK,GAAG,sBACf,gBAEFZ,KAGRuC,EAAAA,EAAAA,IAACqH,EAAAA,GAAK,CACJ1E,YAAazE,EAAUyE,YACvB2E,OAAQ,GACRjJ,KAAM,CAAC0I,EAAQ,IACflE,MAAO3E,EAAU2E,MACjBC,IAAK5E,EAAU4E,IACfgE,QAASA,EACTS,KAAK,EACLnH,KAAM,CACJyH,KAAM,MACNC,MAAO,IACPC,IAAK,MACLC,OAAQ,KAEVP,iBAAkB,EAClBD,aAAW,EACXG,YAAa,CAACY,EAAAA,SA1GX,IA4GI,KAkEXvI,EAAAA,EAAAA,IAACoI,EAAAA,GAAa,cAM1B,CAEA,SAAShC,GAAgBoC,GAMtB,IANuB,OACxBnC,EAAM,YACN9B,GAIDiE,EAGC,OACExI,EAAAA,EAAAA,IAACyI,EAAAA,EAAU,CACTC,WAAYrC,GAAUvB,EAAAA,EAAAA,IACtB6D,QAAQ,yBACRC,aAAcA,KAAgB,EAC9BvE,SAAUE,EACV/E,MAAOwE,GAGb,CAOA,SAASkD,GAAiB2B,GAAsC,IAArC,UAACzK,EAAS,MAAE8H,GAAuB2C,EAC5D,OAAIzK,GACK4B,EAAAA,EAAAA,IAAC8I,EAAAA,EAAW,CAACxB,OAAO,UAGtBtH,EAAAA,EAAAA,IAAC+I,GAAU,CAAAxI,SAAE2F,GACtB,CAvRwB9B,GAAgBnC,YAAA,mBAwP/BmE,GAAgBnE,YAAA,mBAyBhBiF,GAAiBjF,YAAA,oBAQ1B,MAAM8G,IAAapN,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,cACjBG,GAAKA,EAAEC,MAAMiN,oBAAkB,KAGxC1C,IAAY3K,EAAAA,EAAAA,GAAO,KAAI,CAAAC,OAAA,aAAXD,CAAY,UACnBG,GAAKA,EAAEC,MAAMkN,SAAO,eAChBnN,GAAKA,EAAEC,MAAMmN,eAAa,4BAEtBrN,EAAAA,EAAAA,GAAM,GAAE,KAGrB4J,IAAsC9J,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,uDAGhDE,EAAAA,EAAAA,GAAM,GAAE,mBACEA,EAAAA,EAAAA,GAAM,GAAE,wBAEJC,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,mEAM/C6J,IAAYnK,EAAAA,EAAAA,GAAOD,EAAAA,EAAwB,CAAAE,OAAA,aAA/BD,CAAgC,kBAC/BE,EAAAA,EAAAA,GAAM,GAAE,KAGrBmK,IAA4BrK,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,kBAC5BE,EAAAA,EAAAA,GAAM,GAAE,KAGrBoL,IAAatL,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,EACfG,GAAKA,EAAEC,MAAMoN,KAAKC,WAAS,KAGzBpC,IAASrL,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,cACbE,EAAAA,EAAAA,GAAM,GAAE,iG,yCCjUvBwN,EAAOC,QAhBP,SAAgBC,GACd,GAAwB,mBAAbA,EACT,MAAM,IAAIC,UAxBQ,uBA0BpB,OAAO,WACL,IAAIC,EAAOC,UACX,OAAQD,EAAKE,QACX,KAAK,EAAG,OAAQJ,EAAUK,KAAKC,MAC/B,KAAK,EAAG,OAAQN,EAAUK,KAAKC,KAAMJ,EAAK,IAC1C,KAAK,EAAG,OAAQF,EAAUK,KAAKC,KAAMJ,EAAK,GAAIA,EAAK,IACnD,KAAK,EAAG,OAAQF,EAAUK,KAAKC,KAAMJ,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAE9D,OAAQF,EAAUO,MAAMD,KAAMJ,EAChC,CACF,C,+CCrCA,IAAIM,EAAe,EAAQ,2CACvBC,EAAS,EAAQ,oCACjBC,EAAS,EAAQ,oCA0BrBZ,EAAOC,QAJP,SAAgBY,EAAQX,GACtB,OAAOU,EAAOC,EAAQF,EAAOD,EAAaR,IAC5C,C","sources":["webpack:///./app/components/performance/layouts.tsx","webpack:///./app/views/starfish/components/textAlign.tsx","webpack:///./app/views/starfish/components/samplesTable/useSlowMedianFastSamplesQuery.tsx","webpack:///./app/views/starfish/components/samplesTable/transactionSamplesTable.tsx","webpack:///./app/views/starfish/views/webServiceView/endpointOverview/issuesTable.tsx","webpack:///./app/views/starfish/utils/getDateConditions.tsx","webpack:///./app/views/starfish/views/webServiceView/endpointOverview/index.tsx","webpack:///../node_modules/lodash/negate.js","webpack:///../node_modules/lodash/omitBy.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\n/**\n * Common performance layouts\n */\n\nexport const PerformanceLayoutBodyRow = styled('div')<{\n  minSize: number;\n  columns?: number;\n}>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n  grid-row-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    ${p =>\n      p.columns\n        ? `\n    grid-template-columns: repeat(${p.columns}, 1fr);\n    `\n        : `\n    grid-template-columns: repeat(auto-fit, minmax(${p.minSize}px, 1fr));\n    `}\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const TextAlignRight = styled('span')`\n  text-align: right;\n  width: 100%;\n`;\n\nexport const TextAlignLeft = styled('span')`\n  text-align: left;\n  width: 100%;\n`;\n\nexport const OverflowEllipsisTextContainer = styled('span')`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n","import {useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nconst LIMIT_PER_POPULATION = 2;\n\n/**\n * This hook will fetch transaction events from 3 different types of populations and combine them in one set, then return them:\n *\n * - Slowest Events\n * - Median / Baseline Events\n * - Fastest Events\n *\n * It assumes that you are passing an eventView object with a query scoped to a specific transaction\n *\n * @param eventView An eventView containing query information, such as the transaction and other filters\n */\nexport default function useSlowMedianFastSamplesQuery(eventView: EventView) {\n  const location = useLocation();\n  const organization = useOrganization();\n\n  const commonColumns: QueryFieldValue[] = [\n    {\n      field: 'transaction.duration',\n      kind: 'field',\n    },\n    {\n      field: 'profile_id',\n      kind: 'field',\n    },\n    {\n      field: 'timestamp',\n      kind: 'field',\n    },\n    {\n      field: 'spans.browser',\n      kind: 'field',\n    },\n    {\n      field: 'spans.db',\n      kind: 'field',\n    },\n    {\n      field: 'spans.http',\n      kind: 'field',\n    },\n    {\n      field: 'spans.resource',\n      kind: 'field',\n    },\n    {\n      field: 'spans.ui',\n      kind: 'field',\n    },\n  ];\n\n  const eventViewAggregates = eventView.clone().withColumns([\n    {kind: 'function', function: ['p50', 'transaction.duration', undefined, undefined]},\n    {kind: 'function', function: ['p95', 'transaction.duration', undefined, undefined]},\n  ]);\n\n  const {isLoading: isLoadingAgg, data: aggregatesData} = useDiscoverQuery({\n    eventView: eventViewAggregates,\n    referrer: 'starfish-transaction-summary-sample-events',\n    location,\n    orgSlug: organization.slug,\n  });\n\n  const slowestSamplesEventView = eventView\n    .clone()\n    .withColumns(commonColumns)\n    .withSorts([\n      {\n        field: 'transaction.duration',\n        kind: 'desc',\n      },\n    ]);\n\n  slowestSamplesEventView.additionalConditions = new MutableSearch(\n    `transaction.duration:>${\n      aggregatesData?.data?.[0]?.['p95(transaction.duration)'] ?? 0\n    }`\n  );\n\n  const {isLoading: isLoadingSlowest, data: slowestSamplesData} = useDiscoverQuery({\n    eventView: slowestSamplesEventView,\n    referrer: 'starfish-transaction-summary-sample-events',\n    location,\n    orgSlug: organization.slug,\n\n    limit: LIMIT_PER_POPULATION,\n  });\n\n  const medianSamplesEventView = eventView\n    .clone()\n    .withColumns(commonColumns)\n    .withSorts([\n      {\n        field: 'transaction.duration',\n        kind: 'desc',\n      },\n    ]);\n\n  medianSamplesEventView.additionalConditions = new MutableSearch(\n    `transaction.duration:<=${\n      aggregatesData?.data?.[0]?.['p50(transaction.duration)'] ?? 0\n    }`\n  );\n\n  const {isLoading: isLoadingMedian, data: medianSamplesData} = useDiscoverQuery({\n    eventView: medianSamplesEventView,\n    referrer: 'starfish-transaction-summary-sample-events',\n    location,\n    orgSlug: organization.slug,\n    limit: LIMIT_PER_POPULATION,\n  });\n\n  const fastestSamplesEventView = eventView\n    .clone()\n    .withColumns(commonColumns)\n    .withSorts([\n      {\n        field: 'transaction.duration',\n        kind: 'asc',\n      },\n    ]);\n\n  fastestSamplesEventView.additionalConditions = new MutableSearch(\n    `transaction.duration:<=${\n      aggregatesData?.data?.[0]?.['p50(transaction.duration)'] ?? 0\n    }`\n  );\n\n  const {isLoading: isLoadingFastest, data: fastestSamplesData} = useDiscoverQuery({\n    eventView: fastestSamplesEventView,\n    referrer: 'starfish-transaction-summary-sample-events',\n    location,\n    orgSlug: organization.slug,\n    limit: LIMIT_PER_POPULATION,\n  });\n\n  if (isLoadingAgg || isLoadingSlowest || isLoadingMedian || isLoadingFastest) {\n    return {isLoading: true, data: []};\n  }\n\n  const combinedData = [\n    ...(slowestSamplesData?.data ?? []),\n    ...(medianSamplesData?.data ?? []),\n    ...(fastestSamplesData?.data ?? []),\n  ];\n\n  return {\n    isLoading: false,\n    data: combinedData,\n    aggregatesData: aggregatesData?.data[0] ?? [],\n  };\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport DateTime from 'sentry/components/dateTime';\nimport Duration from 'sentry/components/duration';\nimport GridEditable, {GridColumnHeader} from 'sentry/components/gridEditable';\nimport Link from 'sentry/components/links/link';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t} from 'sentry/locale';\nimport {NewQuery} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {SPAN_OP_RELATIVE_BREAKDOWN_FIELD} from 'sentry/utils/discover/fields';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {DurationComparisonCell} from 'sentry/views/starfish/components/samplesTable/common';\nimport useSlowMedianFastSamplesQuery from 'sentry/views/starfish/components/samplesTable/useSlowMedianFastSamplesQuery';\nimport {\n  OverflowEllipsisTextContainer,\n  TextAlignLeft,\n  TextAlignRight,\n} from 'sentry/views/starfish/components/textAlign';\nimport {DataTitles} from 'sentry/views/starfish/views/spans/types';\n\ntype Keys =\n  | 'id'\n  | 'profile_id'\n  | 'timestamp'\n  | 'transaction.duration'\n  | 'p95_comparison'\n  | 'span_ops_breakdown.relative';\ntype TableColumnHeader = GridColumnHeader<Keys>;\n\nconst COLUMN_ORDER: TableColumnHeader[] = [\n  {\n    key: 'id',\n    name: 'Event ID',\n    width: 100,\n  },\n  {\n    key: 'profile_id',\n    name: 'Profile ID',\n    width: 140,\n  },\n  {\n    key: SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n    name: 'Operation Duration',\n    width: 180,\n  },\n  {\n    key: 'timestamp',\n    name: 'Timestamp',\n    width: 230,\n  },\n  {\n    key: 'transaction.duration',\n    name: DataTitles.duration,\n    width: 100,\n  },\n  {\n    key: 'p95_comparison',\n    name: 'Compared to P95',\n    width: 100,\n  },\n];\n\ntype Props = {\n  queryConditions: string[];\n};\n\ntype DataRow = {\n  id: string;\n  profile_id: string;\n  'spans.browser': number;\n  'spans.db': number;\n  'spans.http': number;\n  'spans.resource': number;\n  'spans.ui': number;\n  timestamp: string;\n  'transaction.duration': number;\n};\n\nexport function TransactionSamplesTable({queryConditions}: Props) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const query = new MutableSearch(queryConditions);\n\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: 'Endpoint Overview Samples',\n    query: query.formatString(),\n    projects: [1],\n    fields: [],\n    dataset: DiscoverDatasets.DISCOVER,\n    version: 2,\n  };\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n  const {isLoading, data, aggregatesData} = useSlowMedianFastSamplesQuery(eventView);\n\n  function renderHeadCell(column: GridColumnHeader): React.ReactNode {\n    if (column.key === 'p95_comparison') {\n      return (\n        <TextAlignRight>\n          <OverflowEllipsisTextContainer>{column.name}</OverflowEllipsisTextContainer>\n        </TextAlignRight>\n      );\n    }\n\n    if (column.key === SPAN_OP_RELATIVE_BREAKDOWN_FIELD) {\n      return (\n        <Fragment>\n          {column.name}\n          <StyledIconQuestion\n            size=\"xs\"\n            position=\"top\"\n            title={t(\n              `Span durations are summed over the course of an entire transaction. Any overlapping spans are only counted once.`\n            )}\n          />\n        </Fragment>\n      );\n    }\n\n    return <OverflowEllipsisTextContainer>{column.name}</OverflowEllipsisTextContainer>;\n  }\n\n  function renderBodyCell(column: TableColumnHeader, row: DataRow): React.ReactNode {\n    if (column.key === 'id') {\n      return (\n        <Link to={`/performance/${row['project.name']}:${row.id}`}>\n          {row.id.slice(0, 8)}\n        </Link>\n      );\n    }\n\n    if (column.key === 'profile_id') {\n      return row.profile_id ? (\n        <Link\n          to={`/profiling/profile/${row['project.name']}/${row.profile_id}/flamechart/`}\n        >\n          {row.profile_id.slice(0, 8)}\n        </Link>\n      ) : (\n        '(no value)'\n      );\n    }\n\n    if (column.key === 'transaction.duration') {\n      return (\n        <Duration\n          seconds={row['transaction.duration'] / 1000}\n          fixedDigits={2}\n          abbreviation\n        />\n      );\n    }\n\n    if (column.key === 'timestamp') {\n      return <DateTime date={row[column.key]} year timeZone seconds />;\n    }\n\n    if (column.key === 'p95_comparison') {\n      return (\n        <DurationComparisonCell\n          duration={row['transaction.duration']}\n          p95={(aggregatesData?.['p95(transaction.duration)'] as number) ?? 0}\n        />\n      );\n    }\n\n    if (column.key === SPAN_OP_RELATIVE_BREAKDOWN_FIELD) {\n      return getFieldRenderer(column.key, {})(row, {\n        location,\n        organization,\n        eventView,\n      });\n    }\n\n    return <TextAlignLeft>{row[column.key]}</TextAlignLeft>;\n  }\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={data as DataRow[]}\n      columnOrder={COLUMN_ORDER}\n      columnSortBy={[]}\n      location={location}\n      grid={{\n        renderHeadCell,\n        renderBodyCell,\n      }}\n    />\n  );\n}\n\nconst StyledIconQuestion = styled(QuestionTooltip)`\n  position: relative;\n  left: 4px;\n`;\n","import {useMemo} from 'react';\n\nimport GroupList from 'sentry/components/issues/groupList';\nimport {IssueCategory} from 'sentry/types';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {getDateConditions} from 'sentry/views/starfish/utils/getDateConditions';\n\ntype Props = {\n  issueCategory?: IssueCategory;\n  transactionName?: string;\n};\n\nfunction IssuesTable(props: Props) {\n  const {transactionName, issueCategory} = props;\n  const organization = useOrganization();\n  const pageFilters = usePageFilters();\n  const dateCondtions = getDateConditions(pageFilters);\n\n  const queryConditions: string[] = [\n    'is:unresolved',\n    ...(issueCategory ? [`issue.category:${issueCategory}`] : ['']),\n    ...(transactionName ? [`transaction:${transactionName}`] : ['']),\n    ...dateCondtions,\n  ];\n  const queryCondtionString = queryConditions.join(' ');\n\n  const queryParams = useMemo(\n    () => ({project: 1, query: queryCondtionString, limit: 5, sort: 'new'}),\n    [queryCondtionString]\n  );\n\n  return (\n    <GroupList\n      orgId={organization.slug}\n      withChart={false}\n      narrowGroups\n      endpointPath={`/organizations/${organization.slug}/issues/`}\n      query={queryCondtionString}\n      queryParams={queryParams}\n      withPagination={false}\n      useTintRow\n      source=\"starfish-endpoint-summary\"\n    />\n  );\n}\n\nexport default IssuesTable;\n","import {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {getDateFilters} from 'sentry/views/starfish/utils/getDateFilters';\n\nexport const getDateConditions = (pageFilter): string[] => {\n  const {startTime, endTime, statsPeriod} = getDateFilters(pageFilter);\n  const {start, end} = normalizeDateTimeParams({\n    start: startTime.toDate(),\n    end: endTime.toDate(),\n  });\n  return statsPeriod ? [`statsPeriod:${statsPeriod}`] : [`start:${start}`, `end:${end}`];\n};\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport _EventsRequest from 'sentry/components/charts/eventsRequest';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {PerformanceLayoutBodyRow} from 'sentry/components/performance/layouts';\nimport Placeholder from 'sentry/components/placeholder';\nimport {SegmentedControl} from 'sentry/components/segmentedControl';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {IssueCategory, NewQuery} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {tooltipFormatterUsingAggregateOutputType} from 'sentry/utils/discover/charts';\nimport {useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport withApi from 'sentry/utils/withApi';\nimport {SidebarSpacer} from 'sentry/views/performance/transactionSummary/utils';\nimport {ERRORS_COLOR, P95_COLOR, THROUGHPUT_COLOR} from 'sentry/views/starfish/colours';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport {TransactionSamplesTable} from 'sentry/views/starfish/components/samplesTable/transactionSamplesTable';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport formatThroughput from 'sentry/views/starfish/utils/chartValueFormatters/formatThroughput';\nimport SpansTable from 'sentry/views/starfish/views/spans/spansTable';\nimport {DataTitles} from 'sentry/views/starfish/views/spans/types';\nimport IssuesTable from 'sentry/views/starfish/views/webServiceView/endpointOverview/issuesTable';\nimport {SpanGroupBreakdownContainer} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\nconst SPANS_TABLE_LIMIT = 5;\n\nconst EventsRequest = withApi(_EventsRequest);\n\ntype State = {\n  spansFilter: ModuleName;\n};\n\nexport default function EndpointOverview() {\n  const location = useLocation();\n  const organization = useOrganization();\n\n  const {endpoint, method, statsPeriod} = location.query;\n  const transaction = endpoint\n    ? Array.isArray(endpoint)\n      ? endpoint[0]\n      : endpoint\n    : undefined;\n  const pageFilter = usePageFilters();\n\n  const [state, setState] = useState<State>({spansFilter: ModuleName.ALL});\n  const [issueFilter, setIssueFilter] = useState<IssueCategory | 'ALL'>('ALL');\n\n  const queryConditions = [\n    'has:http.method',\n    'transaction.op:http.server',\n    `transaction:${transaction}`,\n    `http.method:${method}`,\n  ];\n\n  const query = new MutableSearch(queryConditions);\n\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Endpoint Overview'),\n    query: query.formatString(),\n    projects: [1],\n    fields: ['tps()', 'p95(transaction.duration)', 'http_error_count()'],\n    dataset: DiscoverDatasets.METRICS,\n    start: pageFilter.selection.datetime.start ?? undefined,\n    end: pageFilter.selection.datetime.end ?? undefined,\n    range: pageFilter.selection.datetime.period ?? undefined,\n    version: 2,\n  };\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n\n  const {data: totals, isLoading: isTotalsLoading} = useDiscoverQuery({\n    eventView,\n    orgSlug: organization.slug,\n    location,\n  });\n\n  function renderSidebarCharts() {\n    return (\n      <EventsRequest\n        query={query.formatString()}\n        includePrevious={false}\n        partial\n        limit={5}\n        interval=\"1h\"\n        includeTransformedData\n        environment={eventView.environment}\n        project={eventView.project}\n        period={eventView.statsPeriod}\n        referrer=\"starfish-endpoint-overview\"\n        start={eventView.start}\n        end={eventView.end}\n        organization={organization}\n        yAxis={['tps()', 'p95(transaction.duration)', 'http_error_count()']}\n        dataset={DiscoverDatasets.METRICS}\n      >\n        {({loading, results}) => {\n          if (!results) {\n            return null;\n          }\n          return (\n            <Fragment>\n              <Header>\n                <ChartLabel>{DataTitles.throughput}</ChartLabel>\n              </Header>\n              <ChartSummaryValue\n                isLoading={isTotalsLoading}\n                value={\n                  defined(totals)\n                    ? t('%s/s', (totals.data[0]['tps()'] as number).toFixed(2))\n                    : undefined\n                }\n              />\n              <Chart\n                statsPeriod={(statsPeriod as string) ?? '24h'}\n                height={80}\n                data={[results[0]]}\n                start=\"\"\n                end=\"\"\n                loading={loading}\n                utc={false}\n                isLineChart\n                definedAxisTicks={2}\n                disableXAxis\n                chartColors={[THROUGHPUT_COLOR]}\n                grid={{\n                  left: '8px',\n                  right: '0',\n                  top: '8px',\n                  bottom: '0',\n                }}\n                tooltipFormatterOptions={{\n                  valueFormatter: value => formatThroughput(value),\n                }}\n              />\n              <SidebarSpacer />\n              <Header>\n                <ChartLabel>{DataTitles.p95}</ChartLabel>\n              </Header>\n              <ChartSummaryValue\n                isLoading={isTotalsLoading}\n                value={\n                  defined(totals)\n                    ? tooltipFormatterUsingAggregateOutputType(\n                        totals.data[0]['p95(transaction.duration)'] as number,\n                        'duration'\n                      )\n                    : undefined\n                }\n              />\n              <Chart\n                statsPeriod={(statsPeriod as string) ?? '24h'}\n                height={80}\n                data={[results[1]]}\n                start=\"\"\n                end=\"\"\n                loading={loading}\n                utc={false}\n                isLineChart\n                definedAxisTicks={2}\n                disableXAxis\n                chartColors={[P95_COLOR]}\n                grid={{\n                  left: '8px',\n                  right: '0',\n                  top: '8px',\n                  bottom: '0',\n                }}\n                tooltipFormatterOptions={{\n                  valueFormatter: value =>\n                    tooltipFormatterUsingAggregateOutputType(value, 'duration'),\n                }}\n              />\n              <SidebarSpacer />\n              <Header>\n                <ChartLabel>{DataTitles.errorCount}</ChartLabel>\n              </Header>\n              <ChartSummaryValue\n                isLoading={isTotalsLoading}\n                value={\n                  defined(totals)\n                    ? tooltipFormatterUsingAggregateOutputType(\n                        totals.data[0]['http_error_count()'] as number,\n                        'integer'\n                      )\n                    : undefined\n                }\n              />\n              <Chart\n                statsPeriod={eventView.statsPeriod}\n                height={80}\n                data={[results[2]]}\n                start={eventView.start as string}\n                end={eventView.end as string}\n                loading={loading}\n                utc={false}\n                grid={{\n                  left: '8px',\n                  right: '0',\n                  top: '8px',\n                  bottom: '0',\n                }}\n                definedAxisTicks={2}\n                isLineChart\n                chartColors={[ERRORS_COLOR]}\n              />\n            </Fragment>\n          );\n        }}\n      </EventsRequest>\n    );\n  }\n\n  return (\n    <PageFiltersContainer>\n      <Layout.Page>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>{`${method} ${transaction}`}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <SearchContainerWithFilterAndMetrics>\n            <PageFilterBar condensed>\n              <DatePageFilter alignDropdown=\"left\" />\n            </PageFilterBar>\n          </SearchContainerWithFilterAndMetrics>\n\n          <Layout.Main>\n            <StyledRow minSize={200}>\n              <SpanGroupBreakdownContainer transaction={transaction as string} />\n            </StyledRow>\n            <SegmentedControlContainer>\n              <SegmentedControl\n                size=\"xs\"\n                aria-label={t('Filter Spans')}\n                value={state.spansFilter}\n                onChange={key => setState({...state, spansFilter: key})}\n              >\n                <SegmentedControl.Item key=\"\">{t('All Spans')}</SegmentedControl.Item>\n                <SegmentedControl.Item key=\"http\">{t('http')}</SegmentedControl.Item>\n                <SegmentedControl.Item key=\"db\">{t('db')}</SegmentedControl.Item>\n              </SegmentedControl>\n            </SegmentedControlContainer>\n            {/* TODO: Add transaction method to filter */}\n            <SpanMetricsTable filter={state.spansFilter} transaction={transaction} />\n            <SubHeader>{t('Sample Events')}</SubHeader>\n            <TransactionSamplesTable queryConditions={queryConditions} />\n            <SegmentedControlContainer>\n              <SegmentedControl\n                size=\"xs\"\n                aria-label={t('Filter issue types')}\n                value={issueFilter}\n                onChange={key => setIssueFilter(key)}\n              >\n                <SegmentedControl.Item key=\"ALL\">{t('All Issues')}</SegmentedControl.Item>\n                <SegmentedControl.Item key={IssueCategory.ERROR}>\n                  {t('Errors Only')}\n                </SegmentedControl.Item>\n                <SegmentedControl.Item key={IssueCategory.PERFORMANCE}>\n                  {t('Performance Only')}\n                </SegmentedControl.Item>\n              </SegmentedControl>\n            </SegmentedControlContainer>\n            <IssuesTable\n              issueCategory={issueFilter === 'ALL' ? undefined : issueFilter}\n              transactionName={transaction}\n            />\n          </Layout.Main>\n          <Layout.Side>\n            {renderSidebarCharts()}\n            <SidebarSpacer />\n          </Layout.Side>\n        </Layout.Body>\n      </Layout.Page>\n    </PageFiltersContainer>\n  );\n}\n\nfunction SpanMetricsTable({\n  filter,\n  transaction,\n}: {\n  filter: ModuleName;\n  transaction: string | undefined;\n}) {\n  // TODO: Add transaction http method to query conditions as well, since transaction name alone is not unique\n\n  return (\n    <SpansTable\n      moduleName={filter ?? ModuleName.ALL}\n      orderBy=\"-time_spent_percentage\"\n      onSetOrderBy={() => undefined}\n      endpoint={transaction}\n      limit={SPANS_TABLE_LIMIT}\n    />\n  );\n}\n\ntype ChartValueProps = {\n  isLoading: boolean;\n  value: React.ReactNode;\n};\n\nfunction ChartSummaryValue({isLoading, value}: ChartValueProps) {\n  if (isLoading) {\n    return <Placeholder height=\"24px\" />;\n  }\n\n  return <ChartValue>{value}</ChartValue>;\n}\n\nconst ChartValue = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nconst SubHeader = styled('h3')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeLarge};\n  margin: 0;\n  margin-bottom: ${space(1)};\n`;\n\nconst SearchContainerWithFilterAndMetrics = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto auto;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr auto;\n  }\n`;\n\nconst StyledRow = styled(PerformanceLayoutBodyRow)`\n  margin-bottom: ${space(2)};\n`;\n\nconst SegmentedControlContainer = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst ChartLabel = styled('div')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst Header = styled('div')`\n  padding: 0 ${space(1)} 0 0;\n  min-height: 24px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n"],"names":["PerformanceLayoutBodyRow","_styled","target","space","p","theme","breakpoints","small","medium","columns","minSize","TextAlignRight","name","styles","TextAlignLeft","OverflowEllipsisTextContainer","LIMIT_PER_POPULATION","COLUMN_ORDER","key","width","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","DataTitles","TransactionSamplesTable","_ref","queryConditions","location","useLocation","organization","useOrganization","savedQuery","id","undefined","query","MutableSearch","formatString","projects","fields","dataset","DiscoverDatasets","version","eventView","EventView","isLoading","data","aggregatesData","commonColumns","field","kind","eventViewAggregates","clone","withColumns","function","isLoadingAgg","useDiscoverQuery","referrer","orgSlug","slug","slowestSamplesEventView","withSorts","additionalConditions","isLoadingSlowest","slowestSamplesData","limit","medianSamplesEventView","isLoadingMedian","medianSamplesData","fastestSamplesEventView","isLoadingFastest","fastestSamplesData","useSlowMedianFastSamplesQuery","_jsx","GridEditable","columnOrder","columnSortBy","grid","renderHeadCell","column","children","_jsxs","Fragment","StyledIconQuestion","size","position","title","t","renderBodyCell","row","Link","to","slice","profile_id","Duration","seconds","fixedDigits","abbreviation","DateTime","date","year","timeZone","DurationComparisonCell","duration","p95","getFieldRenderer","displayName","QuestionTooltip","IssuesTable","props","transactionName","issueCategory","queryCondtionString","pageFilter","startTime","endTime","statsPeriod","getDateFilters","start","end","normalizeDateTimeParams","toDate","getDateConditions","usePageFilters","join","queryParams","useMemo","project","sort","GroupList","orgId","withChart","narrowGroups","endpointPath","withPagination","useTintRow","source","SPANS_TABLE_LIMIT","EventsRequest","withApi","_EventsRequest","EndpointOverview","endpoint","method","transaction","Array","isArray","state","setState","useState","spansFilter","ModuleName","issueFilter","setIssueFilter","selection","datetime","range","period","totals","isTotalsLoading","PageFiltersContainer","Layout","SearchContainerWithFilterAndMetrics","PageFilterBar","condensed","DatePageFilter","alignDropdown","StyledRow","SpanGroupBreakdownContainer","SegmentedControlContainer","SegmentedControl","value","onChange","SpanMetricsTable","filter","SubHeader","IssueCategory","includePrevious","partial","interval","includeTransformedData","environment","yAxis","loading","results","Header","ChartLabel","ChartSummaryValue","defined","toFixed","Chart","height","utc","isLineChart","definedAxisTicks","disableXAxis","chartColors","THROUGHPUT_COLOR","left","right","top","bottom","tooltipFormatterOptions","valueFormatter","formatThroughput","SidebarSpacer","tooltipFormatterUsingAggregateOutputType","P95_COLOR","ERRORS_COLOR","_ref2","SpansTable","moduleName","orderBy","onSetOrderBy","_ref3","Placeholder","ChartValue","fontSizeExtraLarge","gray300","fontSizeLarge","text","cardTitle","module","exports","predicate","TypeError","args","arguments","length","call","this","apply","baseIteratee","negate","pickBy","object"],"sourceRoot":""}