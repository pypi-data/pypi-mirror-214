{"version":3,"file":"chunks/app_views_settings_project_projectUserFeedback_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/userFeedback.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectUserFeedback.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/user-feedback/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'feedback:branding',\n        type: 'boolean',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Show Sentry Branding',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Show \"powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',\n        getData: data => ({options: data}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport Access from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport formGroups from 'sentry/data/forms/userFeedback';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype RouteParams = {\n  projectId: string;\n};\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\nclass ProjectUserFeedbackSettings extends AsyncView<Props> {\n  submitTimeout: number | undefined = undefined;\n\n  componentDidMount() {\n    super.componentDidMount();\n\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        window.setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${organization.slug}/${projectId}/keys/`],\n      ['project', `/projects/${organization.slug}/${projectId}/`],\n    ];\n  }\n\n  getTitle(): string {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('User Feedback'), projectId, false);\n  }\n\n  handleClick = () => {\n    Sentry.showReportDialog({\n      // should never make it to the Sentry API, but just in case, use throwaway id\n      eventId: '00000000000000000000000000000000',\n    });\n  };\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const {projectId} = this.props.params;\n\n    return (\n      <div>\n        <SettingsPageHeader\n          title={t('User Feedback')}\n          action={\n            <ButtonList>\n              <Button external href=\"https://docs.sentry.io/product/user-feedback/\">\n                {t('Read the docs')}\n              </Button>\n              <Button priority=\"primary\" onClick={this.handleClick}>\n                {t('Open the report dialog')}\n              </Button>\n            </ButtonList>\n          }\n        />\n        <TextBlock>\n          {t(\n            `Don't rely on stack traces and graphs alone to understand\n            the cause and impact of errors. Enable User Feedback to collect\n            your users' comments when they encounter a crash or bug.`\n          )}\n        </TextBlock>\n        <TextBlock>\n          {t(\n            `When configured, your users will be presented with a dialog prompting\n            them for additional information. That information will get attached to\n            the issue in Sentry.`\n          )}\n        </TextBlock>\n\n        <PermissionAlert project={project} />\n\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint={`/projects/${organization.slug}/${projectId}/`}\n          initialData={this.state.project.options}\n        >\n          <Access access={['project:write']} project={project}>\n            {({hasAccess}) => <JsonForm disabled={!hasAccess} forms={formGroups} />}\n          </Access>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst ButtonList = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n`;\n\nexport default withOrganization(ProjectUserFeedbackSettings);\n"],"names":["route","title","fields","name","type","label","placeholder","help","getData","data","options","routeName","orgSlug","projectSlug","arguments","length","undefined","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","_jsx","SentryDocumentTitle","this","children","renderComponent","displayName","permissionAlertText","t","PermissionAlert","_ref","access","project","team","props","Access","_ref2","hasAccess","Alert","ProjectUserFeedbackSettings","constructor","_defineProperty","Sentry","eventId","componentDidMount","super","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","componentWillUnmount","getEndpoints","organization","projectId","params","slug","routeTitleGen","renderBody","_jsxs","SettingsPageHeader","action","ButtonList","Button","external","href","priority","onClick","handleClick","TextBlock","Form","saveOnBlur","apiMethod","apiEndpoint","initialData","state","JsonForm","disabled","forms","formGroups","_styled","target","space","withOrganization"],"sourceRoot":""}