{"version":3,"file":"chunks/app_components_forms_controls_multipleCheckbox_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"miBAoCA,MAAMA,GAA0BC,EAAAA,EAAAA,eAA4C,CAC1EC,aAAcC,IACdC,MAAO,GACPC,KAAM,GACNC,UAAU,IAGZ,SAASC,EAAgBC,GAAqD,IAApD,SAACC,EAAQ,MAAEL,EAAK,SAAEE,EAAQ,SAAEI,EAAQ,KAAEL,GAAYG,EAC1E,MAAMN,GAAeS,EAAAA,EAAAA,cACnB,CAACC,EAA0BC,KACzB,GAAwB,mBAAbH,EACT,OAGF,MAAMI,EAAWD,EAAEE,OAAOC,QACtB,IAAIZ,EAAOQ,GACXR,EAAMa,QAAOC,GAAKA,IAAMN,IAE5BF,EAASI,EAAUD,EAAE,GAEvB,CAACT,EAAOM,IAGJS,GAAeC,EAAAA,EAAAA,UACnB,KAAM,CACJhB,QACAF,eACAG,OACAC,cAEF,CAACA,EAAUJ,EAAcG,EAAMD,IAGjC,OACEiB,EAAAA,EAAAA,IAACrB,EAAwBsB,SAAQ,CAAClB,MAAOe,EAAaV,UACpDY,EAAAA,EAAAA,IAACE,EAAuB,CAAAd,SAAEA,KAGhC,CAEA,SAASe,EAAIC,GAKS,IAJpBrB,MAAOQ,EAAS,SAChBH,EACAH,SAAUoB,EAAY,SACtBhB,GACkBe,EAClB,MAAM,SAACnB,EAAQ,MAAEF,EAAK,aAAEF,EAAY,KAAEG,IAAQsB,EAAAA,EAAAA,YAAW3B,GAEzD,OACEqB,EAAAA,EAAAA,IAACO,EAAc,CAAAnB,UACboB,EAAAA,EAAAA,IAACC,EAAK,CAAArB,SAAA,EACJY,EAAAA,EAAAA,IAACU,EAAAA,EAAQ,CACP1B,KAAMA,EACNW,QAASZ,EAAM4B,SAASpB,GACxBN,SAAUA,GAAYoB,EACtBhB,SAAUG,IACRX,EAAaU,EAAWC,GACxBH,IAAWG,EAAE,EAEfT,MAAOA,EAAM6B,cAEfZ,EAAAA,EAAAA,IAACa,EAAa,CAAAzB,SAAEA,QAIxB,CA1DSF,EAAgB4B,YAAA,mBAiChBX,EAAIW,YAAA,OA2Bb5B,EAAiBiB,KAAOA,EAExB,UAEMD,GAA0Ba,EAAAA,EAAAA,GAAO,MAAK,CAAArB,OAAA,aAAZqB,CAAa,CAAA/B,KAAA,SAAAgC,OAAA,gCAKvCP,GAAQM,EAAAA,EAAAA,GAAO,QAAO,CAAArB,OAAA,aAAdqB,CAAe,CAAA/B,KAAA,UAAAgC,OAAA,gIAUvBH,GAAgBE,EAAAA,EAAAA,GAAO,OAAM,CAAArB,OAAA,aAAbqB,CAAc,gBACnBE,EAAAA,EAAAA,GAAM,GAAE,KAGnBV,GAAiBQ,EAAAA,EAAAA,GAAO,MAAK,CAAArB,OAAA,aAAZqB,CAAa,kCAGbG,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,oCAG9BH,GAAKA,EAAEC,MAAMC,YAAYE,QAAM,wCAG/BJ,GAAKA,EAAEC,MAAMC,YAAYG,OAAK,gB","sources":["webpack:///./app/components/forms/controls/multipleCheckbox.tsx"],"sourcesContent":["import React, {createContext, ReactNode, useCallback, useContext, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport noop from 'lodash/noop';\n\nimport Checkbox from 'sentry/components/checkbox';\nimport {space} from 'sentry/styles/space';\n\ntype CheckboxValue = string | number;\n\ntype SelectedValue = CheckboxValue[];\n\ntype Props = {\n  children: ReactNode;\n  name: string;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype CheckboxItemProps = {\n  children: ReactNode;\n  value: string | number;\n  disabled?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype MultipleCheckboxContextValue = {\n  disabled: Props['disabled'];\n  handleChange: (\n    itemValue: CheckboxValue,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => void;\n  name: string;\n  value: Props['value'];\n};\n\nconst MultipleCheckboxContext = createContext<MultipleCheckboxContextValue>({\n  handleChange: noop,\n  value: [],\n  name: '',\n  disabled: false,\n});\n\nfunction MultipleCheckbox({children, value, disabled, onChange, name}: Props) {\n  const handleChange = useCallback(\n    (itemValue: CheckboxValue, e: React.ChangeEvent<HTMLInputElement>) => {\n      if (typeof onChange !== 'function') {\n        return;\n      }\n\n      const newValue = e.target.checked\n        ? [...value, itemValue]\n        : value.filter(v => v !== itemValue);\n\n      onChange(newValue, e);\n    },\n    [value, onChange]\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      value,\n      handleChange,\n      name,\n      disabled,\n    }),\n    [disabled, handleChange, name, value]\n  );\n\n  return (\n    <MultipleCheckboxContext.Provider value={contextValue}>\n      <MultipleCheckboxWrapper>{children}</MultipleCheckboxWrapper>\n    </MultipleCheckboxContext.Provider>\n  );\n}\n\nfunction Item({\n  value: itemValue,\n  children,\n  disabled: itemDisabled,\n  onChange,\n}: CheckboxItemProps) {\n  const {disabled, value, handleChange, name} = useContext(MultipleCheckboxContext);\n\n  return (\n    <LabelContainer>\n      <Label>\n        <Checkbox\n          name={name}\n          checked={value.includes(itemValue)}\n          disabled={disabled || itemDisabled}\n          onChange={e => {\n            handleChange(itemValue, e);\n            onChange?.(e);\n          }}\n          value={value.toString()}\n        />\n        <CheckboxLabel>{children}</CheckboxLabel>\n      </Label>\n    </LabelContainer>\n  );\n}\n\nMultipleCheckbox.Item = Item;\n\nexport default MultipleCheckbox;\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  display: inline-flex;\n  align-items: center;\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: ${space(1)};\n`;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n"],"names":["MultipleCheckboxContext","createContext","handleChange","noop","value","name","disabled","MultipleCheckbox","_ref","children","onChange","useCallback","itemValue","e","newValue","target","checked","filter","v","contextValue","useMemo","_jsx","Provider","MultipleCheckboxWrapper","Item","_ref2","itemDisabled","useContext","LabelContainer","_jsxs","Label","Checkbox","includes","toString","CheckboxLabel","displayName","_styled","styles","space","p","theme","breakpoints","small","medium","large"],"sourceRoot":""}