{"version":3,"file":"chunks/app_views_settings_organizationAuthTokens_authTokenDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationAuthTokens/authTokenDetails.tsx"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Alert from 'sentry/components/alert';\nimport {Form, TextField} from 'sentry/components/forms';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {setDateToTime} from 'sentry/utils/dates';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {handleXhrErrorResponse} from 'sentry/utils/handleXhrErrorResponse';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {tokenPreview, TokenWip} from 'sentry/views/settings/organizationAuthTokens';\n\nfunction generateMockToken({\n  id,\n  name,\n  scopes,\n  dateCreated = new Date(),\n  dateLastUsed,\n  projectLastUsed,\n}: {\n  id: string;\n  name: string;\n  scopes: string[];\n  dateCreated?: Date;\n  dateLastUsed?: Date;\n  projectLastUsed?: Project;\n}): TokenWip {\n  return {\n    id,\n    name,\n    tokenLastCharacters: crypto.randomUUID().slice(0, 4),\n    scopes,\n    dateCreated,\n    dateLastUsed,\n    projectLastUsed,\n  };\n}\n\ntype Props = {\n  organization: Organization;\n  params: {tokenId: string};\n};\n\nfunction AuthTokenDetailsForm({\n  token,\n  organization,\n}: {\n  organization: Organization;\n  token: TokenWip;\n}) {\n  const initialData = {\n    name: token.name,\n    tokenPreview: tokenPreview(token.tokenLastCharacters || '****'),\n  };\n\n  return (\n    <Form\n      apiMethod=\"PUT\"\n      initialData={initialData}\n      apiEndpoint={`/organizations/${organization.slug}/auth-tokens/${token.id}/`}\n      onSubmit={() => {\n        // TODO FN: Actually submit data\n\n        try {\n          const message = t('Successfully updated the auth token.');\n          addSuccessMessage(message);\n        } catch (error) {\n          const message = t('Failed to update the auth token.');\n          handleXhrErrorResponse(message, error);\n          addErrorMessage(message);\n        }\n      }}\n      onCancel={() =>\n        browserHistory.push(normalizeUrl(`/settings/${organization.slug}/auth-tokens/`))\n      }\n    >\n      <TextField\n        name=\"name\"\n        label={t('Name')}\n        value={token.dateLastUsed}\n        required\n        help={t('A name to help you identify this token.')}\n      />\n\n      <TextField\n        name=\"tokenPreview\"\n        label={t('Token')}\n        value={tokenPreview(\n          token.tokenLastCharacters\n            ? getDynamicText({\n                value: token.tokenLastCharacters,\n                fixed: 'ABCD',\n              })\n            : '****'\n        )}\n        disabled\n        help={t('You can only view the token once after creation.')}\n      />\n\n      <FieldGroup\n        label={t('Scopes')}\n        inline={false}\n        help={t(\n          'You cannot change the scopes of an existing token. If you need different scopes, please create a new token.'\n        )}\n      >\n        <div>{token.scopes.slice().sort().join(', ')}</div>\n      </FieldGroup>\n    </Form>\n  );\n}\n\nexport function OrganizationAuthTokensDetails({params, organization}: Props) {\n  const [token, setToken] = useState<TokenWip | null>(null);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const {tokenId} = params;\n\n  const fetchToken = useCallback(async () => {\n    try {\n      // TODO FN: Actually do something here\n      await new Promise(resolve => setTimeout(resolve, 500));\n      setToken(\n        generateMockToken({\n          id: tokenId,\n          name: 'custom token',\n          scopes: ['org:ci'],\n          dateLastUsed: setDateToTime(new Date(), '00:05:00'),\n          projectLastUsed: {slug: 'my-project', name: 'My Project'} as Project,\n          dateCreated: setDateToTime(new Date(), '00:01:00'),\n        })\n      );\n      setHasLoadingError(false);\n    } catch (error) {\n      const message = t('Failed to load auth token.');\n      handleXhrErrorResponse(message, error);\n      setHasLoadingError(error);\n    }\n  }, [tokenId]);\n\n  useEffect(() => {\n    fetchToken();\n  }, [fetchToken]);\n\n  return (\n    <div>\n      <SentryDocumentTitle title={t('Edit Auth Token')} />\n      <SettingsPageHeader title={t('Edit Auth Token')} />\n\n      <Alert>Note: This page is WIP and currently only shows mocked data.</Alert>\n\n      <TextBlock>\n        {t(\n          \"Authentication tokens allow you to perform actions against the Sentry API on behalf of your organization. They're the easiest way to get started using the API.\"\n        )}\n      </TextBlock>\n      <TextBlock>\n        {tct(\n          'For more information on how to use the web API, see our [link:documentation].',\n          {\n            link: <ExternalLink href=\"https://docs.sentry.io/api/\" />,\n          }\n        )}\n      </TextBlock>\n      <Panel>\n        <PanelHeader>{t('Auth Token Details')}</PanelHeader>\n\n        <PanelBody>\n          {hasLoadingError && (\n            <LoadingError\n              message={t('Failed to load auth token.')}\n              onRetry={fetchToken}\n            />\n          )}\n\n          {!hasLoadingError && !token && <LoadingIndicator />}\n\n          {!hasLoadingError && token && (\n            <AuthTokenDetailsForm token={token} organization={organization} />\n          )}\n        </PanelBody>\n      </Panel>\n    </div>\n  );\n}\n\nexport default withOrganization(OrganizationAuthTokensDetails);\n"],"names":["AuthTokenDetailsForm","_ref2","token","organization","initialData","name","tokenPreview","tokenLastCharacters","_jsxs","Form","apiMethod","apiEndpoint","slug","id","onSubmit","message","t","addSuccessMessage","error","handleXhrErrorResponse","addErrorMessage","onCancel","browserHistory","normalizeUrl","children","_jsx","TextField","label","value","dateLastUsed","required","help","getDynamicText","fixed","disabled","FieldGroup","inline","scopes","slice","sort","join","OrganizationAuthTokensDetails","_ref3","params","setToken","useState","hasLoadingError","setHasLoadingError","tokenId","fetchToken","useCallback","async","Promise","resolve","setTimeout","_ref","dateCreated","Date","projectLastUsed","crypto","randomUUID","generateMockToken","setDateToTime","useEffect","SentryDocumentTitle","title","SettingsPageHeader","Alert","TextBlock","tct","link","ExternalLink","href","Panel","PanelHeader","PanelBody","LoadingError","onRetry","LoadingIndicator","displayName","withOrganization"],"sourceRoot":""}