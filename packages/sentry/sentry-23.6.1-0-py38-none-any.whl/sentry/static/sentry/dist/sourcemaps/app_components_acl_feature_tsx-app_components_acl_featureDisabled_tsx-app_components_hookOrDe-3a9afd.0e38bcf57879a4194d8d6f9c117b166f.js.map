{"version":3,"file":"chunks/app_components_acl_feature_tsx-app_components_acl_featureDisabled_tsx-app_components_hookOrDe-3a9afd.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/comingSoon.tsx","webpack:///./app/components/acl/feature.tsx","webpack:///./app/components/acl/featureDisabled.tsx","webpack:///./app/components/hookOrDefault.tsx","webpack:///./app/utils/selectText.tsx","webpack:///./app/utils/useCopyToClipboard.tsx","webpack:///./app/utils/withConfig.tsx"],"sourcesContent":["import {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\nfunction ComingSoon() {\n  return (\n    <Alert type=\"info\" showIcon>\n      {t('This feature is coming soon!')}\n    </Alert>\n  );\n}\n\nexport default ComingSoon;\n","import {Component} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {Config, Organization, Project} from 'sentry/types';\nimport {FeatureDisabledHooks} from 'sentry/types/hooks';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\nimport ComingSoon from './comingSoon';\n\ntype Props = {\n  /**\n   * If children is a function then will be treated as a render prop and\n   * passed FeatureRenderProps.\n   *\n   * The other interface is more simple, only show `children` if org/project has\n   * all the required feature.\n   */\n  children: React.ReactNode | ChildrenRenderFn;\n  config: Config;\n  /**\n   * List of required feature tags. Note we do not enforce uniqueness of tags anywhere.\n   * On the backend end, feature tags have a scope prefix string that is stripped out on the\n   * frontend (since feature tags are attached to a context object).\n   *\n   * Use `organizations:` or `projects:` prefix strings to specify a feature with context.\n   */\n  features: string[];\n  /**\n   * The following properties will be set by the HoCs\n   */\n  organization: Organization;\n  /**\n   * Specify the key to use for hookstore functionality.\n   *\n   * The hookName should be prefixed with `feature-disabled`.\n   *\n   * When specified, the hookstore will be checked if the feature is\n   * disabled, and the first available hook will be used as the render\n   * function.\n   */\n  hookName?: keyof FeatureDisabledHooks;\n  project?: Project;\n  /**\n   * Custom renderer function for when the feature is not enabled.\n   *\n   *  - [default] Set this to false to disable rendering anything. If the\n   *    feature is not enabled no children will be rendered.\n   *\n   *  - Set this to `true` to use the default `ComingSoon` alert component.\n   *\n   *  - Provide a custom render function to customize the rendered component.\n   *\n   * When a custom render function is used, the same object that would be\n   * passed to `children` if a func is provided there, will be used here,\n   * additionally `children` will also be passed.\n   */\n  renderDisabled?: boolean | RenderDisabledFn;\n  /**\n   * Should the component require all features or just one or more.\n   */\n  requireAll?: boolean;\n};\n\n/**\n * Common props passed to children and disabled render handlers.\n */\ntype FeatureRenderProps = {\n  features: string[];\n  hasFeature: boolean;\n  organization: Organization;\n  project?: Project;\n};\n\n/**\n * When a feature is disabled the caller of Feature may provide a `renderDisabled`\n * prop. This prop can be overridden by getsentry via hooks. Often getsentry will\n * call the original children function  but override the `renderDisabled`\n * with another function/component.\n */\ntype RenderDisabledProps = FeatureRenderProps & {\n  children: React.ReactNode | ChildrenRenderFn;\n  renderDisabled?: (props: FeatureRenderProps) => React.ReactNode;\n};\n\nexport type RenderDisabledFn = (props: RenderDisabledProps) => React.ReactNode;\n\ntype ChildRenderProps = FeatureRenderProps & {\n  renderDisabled?: undefined | boolean | RenderDisabledFn;\n};\n\nexport type ChildrenRenderFn = (props: ChildRenderProps) => React.ReactNode;\n\ntype AllFeatures = {\n  configFeatures: string[];\n  organization: string[];\n  project: string[];\n};\n\n/**\n * Component to handle feature flags.\n */\nclass Feature extends Component<Props> {\n  static defaultProps = {\n    renderDisabled: false,\n    requireAll: true,\n  };\n\n  getAllFeatures(): AllFeatures {\n    const {organization, project, config} = this.props;\n\n    return {\n      configFeatures: config.features ? Array.from(config.features) : [],\n      organization: (organization && organization.features) || [],\n      project: (project && project.features) || [],\n    };\n  }\n\n  hasFeature(feature: string, features: AllFeatures) {\n    const shouldMatchOnlyProject = feature.match(/^projects:(.+)/);\n    const shouldMatchOnlyOrg = feature.match(/^organizations:(.+)/);\n\n    // Array of feature strings\n    const {configFeatures, organization, project} = features;\n\n    // Check config store first as this overrides features scoped to org or\n    // project contexts.\n    if (configFeatures.includes(feature)) {\n      return true;\n    }\n\n    if (shouldMatchOnlyProject) {\n      return project.includes(shouldMatchOnlyProject[1]);\n    }\n\n    if (shouldMatchOnlyOrg) {\n      return organization.includes(shouldMatchOnlyOrg[1]);\n    }\n\n    // default, check all feature arrays\n    return organization.includes(feature) || project.includes(feature);\n  }\n\n  render() {\n    const {\n      children,\n      features,\n      renderDisabled,\n      hookName,\n      organization,\n      project,\n      requireAll,\n    } = this.props;\n\n    const allFeatures = this.getAllFeatures();\n    const method = requireAll ? 'every' : 'some';\n    const hasFeature =\n      !features || features[method](feat => this.hasFeature(feat, allFeatures));\n\n    // Default renderDisabled to the ComingSoon component\n    let customDisabledRender =\n      renderDisabled === false\n        ? false\n        : typeof renderDisabled === 'function'\n        ? renderDisabled\n        : () => <ComingSoon />;\n\n    // Override the renderDisabled function with a hook store function if there\n    // is one registered for the feature.\n    if (hookName) {\n      const hooks = HookStore.get(hookName);\n\n      if (hooks.length > 0) {\n        customDisabledRender = hooks[0];\n      }\n    }\n    const renderProps = {\n      organization,\n      project,\n      features,\n      hasFeature,\n    };\n\n    if (!hasFeature && customDisabledRender !== false) {\n      return customDisabledRender({children, ...renderProps});\n    }\n\n    if (isRenderFunc<ChildrenRenderFn>(children)) {\n      return children({renderDisabled, ...renderProps});\n    }\n\n    return hasFeature && children ? children : null;\n  }\n}\n\nexport default withOrganization(withProject(withConfig(Feature)));\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {Button, ButtonLabel} from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {CONFIG_DOCS_URL} from 'sentry/constants';\nimport {IconChevron, IconCopy} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {selectText} from 'sentry/utils/selectText';\nimport useCopyToClipboard from 'sentry/utils/useCopyToClipboard';\n\nconst installText = (features: string[], featureName: string): string =>\n  `# ${t('Enables the %s feature', featureName)}\\n${features\n    .map(f => `SENTRY_FEATURES['${f}'] = True`)\n    .join('\\n')}`;\n\ntype Props = {\n  /**\n   * The English name of the feature. This is used in the comment that will\n   * be outputted above the example line of code to enable the feature.\n   */\n  featureName: string;\n  /**\n   * The feature flag keys that should be displayed in the code example for\n   * enabling the feature.\n   */\n  features: string[];\n  /**\n   * Render the disabled message within a warning Alert. A custom Alert\n   * component may be provided.\n   *\n   * Attaches additional styles to the FeatureDisabled component to make it\n   * look consistent within the Alert.\n   */\n  alert?: boolean | React.ElementType;\n  /**\n   * Do not show the help toggle. The description will always be rendered.\n   */\n  hideHelpToggle?: boolean;\n  /**\n   * A custom message to display. Defaults to a generic disabled message.\n   */\n  message?: string;\n};\n\n/**\n * DisabledInfo renders a component informing that a feature has been disabled.\n *\n * By default this component will render a help button which toggles more\n * information about why the feature is disabled, showing the missing feature\n * flag and linking to documentation for managing sentry server feature flags.\n */\nfunction FeatureDisabled({\n  features,\n  featureName,\n  alert,\n  hideHelpToggle,\n  message = t('This feature is not enabled on your Sentry installation.'),\n}: Props) {\n  const [showHelp, setShowHelp] = useState(false);\n\n  const snippet = installText(features, featureName);\n  const {onClick} = useCopyToClipboard({text: snippet});\n\n  function renderHelp() {\n    return (\n      <Fragment>\n        <HelpText>\n          {tct(\n            `Enable this feature on your sentry installation by adding the\n              following configuration into your [configFile:sentry.conf.py].\n              See [configLink:the configuration documentation] for more\n              details.`,\n            {\n              configFile: <code />,\n              configLink: <ExternalLink href={CONFIG_DOCS_URL} />,\n            }\n          )}\n        </HelpText>\n        <CopyButton borderless icon={<IconCopy size=\"xs\" />} onClick={onClick} size=\"xs\">\n          {t('Copy to Clipboard')}\n        </CopyButton>\n        <Pre onClick={e => selectText(e.target as HTMLElement)}>\n          <code>{snippet}</code>\n        </Pre>\n      </Fragment>\n    );\n  }\n\n  if (!alert) {\n    const showDescription = hideHelpToggle || showHelp;\n    return (\n      <Fragment>\n        <FeatureDisabledMessage>\n          {message}\n          {!hideHelpToggle && (\n            <ToggleButton\n              priority=\"link\"\n              size=\"xs\"\n              onClick={() => setShowHelp(!showHelp)}\n            >\n              {t('Help')}\n              <IconChevron direction={showDescription ? 'up' : 'down'} />\n            </ToggleButton>\n          )}\n        </FeatureDisabledMessage>\n        {showDescription && <HelpDescription>{renderHelp()}</HelpDescription>}\n      </Fragment>\n    );\n  }\n\n  const AlertComponent = typeof alert === 'boolean' ? Alert : alert;\n  return (\n    <AlertComponent type=\"warning\" showIcon expand={renderHelp()}>\n      {message}\n    </AlertComponent>\n  );\n}\n\nconst FeatureDisabledMessage = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  line-height: ${p => p.theme.text.lineHeightBody};\n`;\n\nconst HelpDescription = styled('div')`\n  margin-top: ${space(1)};\n\n  pre,\n  code {\n    margin-bottom: 0;\n    white-space: pre;\n  }\n\n  button {\n    margin-bottom: ${space(0.5)};\n  }\n`;\n\nconst HelpText = styled('p')`\n  margin-bottom: ${space(1)};\n`;\n\nconst ToggleButton = styled(Button)`\n  color: ${p => p.theme.active};\n  height: ${p => p.theme.text.lineHeightBody}em;\n  min-height: ${p => p.theme.text.lineHeightBody}em;\n\n  &:hover {\n    color: ${p => p.theme.activeHover};\n  }\n\n  ${ButtonLabel} {\n    display: grid;\n    grid-auto-flow: column;\n    gap: ${space(1)};\n  }\n`;\n\nconst CopyButton = styled(Button)`\n  margin-left: auto;\n`;\n\nconst Pre = styled('pre')`\n  margin-bottom: 0;\n  overflow: auto;\n`;\n\nexport default FeatureDisabled;\n","import {Component, lazy, Suspense} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {HookName, Hooks} from 'sentry/types/hooks';\n\ntype Params<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  hookName: H;\n  /**\n   * Component that will be shown if no hook is available\n   */\n  defaultComponent?: ReturnType<Hooks[H]>;\n  /**\n   * This is a function that returns a promise (more specifically a function\n   * that returns the result of a dynamic import using `import()`. This will\n   * use React.Suspense and React.lazy to render the component.\n   */\n  defaultComponentPromise?: () => Promise<ReturnType<Hooks[H]>>;\n};\n\n/**\n * Use this instead of the usual ternery operator when using getsentry hooks.\n * So in lieu of:\n *\n *  HookStore.get('component:org-auth-view').length\n *   ? HookStore.get('component:org-auth-view')[0]()\n *   : OrganizationAuth\n *\n * do this instead:\n *\n *   const HookedOrganizationAuth = HookOrDefault({\n *     hookName:'component:org-auth-view',\n *     defaultComponent: OrganizationAuth,\n *   })\n *\n * Note, you will need to add the hookstore function in getsentry [0] first and\n * then register the types [2] and validHookName [1] in sentry.\n *\n * [0] /getsentry/static/getsentry/gsApp/registerHooks.jsx\n * [1] /sentry/app/stores/hookStore.tsx\n * [2] /sentry/app/types/hooks.ts\n */\nfunction HookOrDefault<H extends HookName>({\n  hookName,\n  defaultComponent,\n  defaultComponentPromise,\n}: Params<H>) {\n  type Props = React.ComponentProps<ReturnType<Hooks[H]>>;\n  type State = {hooks: Hooks[H][]};\n\n  class HookOrDefaultComponent extends Component<Props, State> {\n    static displayName = `HookOrDefaultComponent(${hookName})`;\n\n    state: State = {\n      hooks: HookStore.get(hookName),\n    };\n\n    componentWillUnmount() {\n      this.unlistener?.();\n    }\n\n    unlistener = HookStore.listen(\n      (name: string, hooks: Hooks[HookName][]) =>\n        name === hookName && this.setState({hooks}),\n      undefined\n    );\n\n    get defaultComponent() {\n      // If `defaultComponentPromise` is passed, then return a Suspended component\n      if (defaultComponentPromise) {\n        const DefaultComponent = lazy(defaultComponentPromise);\n\n        return function (props: Props) {\n          return (\n            <Suspense fallback={null}>\n              <DefaultComponent {...props} />\n            </Suspense>\n          );\n        };\n      }\n\n      return defaultComponent;\n    }\n\n    render() {\n      const hookExists = this.state.hooks && this.state.hooks.length;\n      const componentFromHook = this.state.hooks[0]?.();\n      const HookComponent =\n        hookExists && componentFromHook ? componentFromHook : this.defaultComponent;\n\n      return HookComponent ? <HookComponent {...this.props} /> : null;\n    }\n  }\n\n  return HookOrDefaultComponent;\n}\n\nexport default HookOrDefault;\n","/**\n * Select the text of the provided HTML Element\n */\nexport function selectText(node: HTMLElement): void {\n  if (node instanceof HTMLInputElement && node.type === 'text') {\n    node.select();\n    return;\n  }\n\n  if (node instanceof Node && window.getSelection) {\n    const range = document.createRange();\n    range.selectNode(node);\n\n    const selection = window.getSelection();\n    selection?.removeAllRanges();\n    selection?.addRange(range);\n  }\n}\n","import {useCallback, useRef, useState} from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\n\ntype Opts = {\n  /**\n   * The text that you want to copy.\n   *\n   * Use `JSON.stringify()` if you have an object to share.\n   *\n   * If/When `new ClipboardItem()` accepts a mime type of application/json then\n   * it could accept other types, but for now string is the most common case.\n   */\n  text: string;\n\n  /**\n   * The toast message that will appear if an error happens when copying.\n   *\n   * Disable toast messages by setting the `hideMessages` prop.\n   */\n  errorMessage?: React.ReactNode;\n\n  /**\n   * Disable creating toast messages when copying has succeeded/errored.\n   */\n  hideMessages?: boolean;\n\n  /**\n   * Callback after copying is complete.\n   */\n  onCopy?: undefined | ((copiedText: string) => void);\n\n  /**\n   * Callback if an error happened while copying.\n   */\n  onError?: undefined | ((error: Error) => void);\n\n  /**\n   * The toast messaage that will appear after the copy operation is done.\n   *\n   * Disable toast messages by setting the `hideMessages` prop.\n   */\n  successMessage?: React.ReactNode;\n};\n\nexport default function useCopyToClipboard({\n  errorMessage = t('Error copying to clipboard'),\n  hideMessages,\n  onCopy,\n  onError,\n  successMessage = t('Copied to clipboard'),\n  text,\n}: Opts) {\n  const timeoutRef = useRef<undefined | ReturnType<typeof setTimeout>>();\n  const [state, setState] = useState<'ready' | 'copied' | 'error'>('ready');\n\n  const handleOnClick = useCallback(() => {\n    navigator.clipboard\n      .writeText(text)\n      .then(() => {\n        setState('copied');\n        if (!hideMessages) {\n          addSuccessMessage(successMessage);\n        }\n        onCopy?.(text);\n      })\n      .catch(error => {\n        setState('error');\n        if (!hideMessages) {\n          addErrorMessage(errorMessage);\n        }\n        onError?.(error);\n      })\n      .finally(() => {\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = setTimeout(() => setState('ready'), 1000);\n      });\n  }, [errorMessage, hideMessages, onCopy, onError, successMessage, text]);\n\n  const label =\n    state === 'ready'\n      ? t('Copy')\n      : state === 'copied'\n      ? t('Copied')\n      : t('Unable to copy');\n\n  return {\n    onClick: handleOnClick,\n    label,\n  };\n}\n","import ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {Config} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedConfigProps = {\n  config: Config;\n};\n\n/**\n * Higher order component that passes the config object to the wrapped\n * component\n */\nfunction withConfig<P extends InjectedConfigProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  type Props = Omit<P, keyof InjectedConfigProps> & Partial<InjectedConfigProps>;\n\n  function Wrapper(props: Props) {\n    const config = useLegacyStore(ConfigStore);\n    const allProps = {config, ...props} as P;\n\n    return <WrappedComponent {...allProps} />;\n  }\n\n  Wrapper.displayName = `withConfig(${getDisplayName(WrappedComponent)})`;\n\n  return Wrapper;\n}\n\nexport default withConfig;\n"],"names":["ComingSoon","_jsx","Alert","type","showIcon","children","t","displayName","Feature","Component","getAllFeatures","organization","project","config","this","props","configFeatures","features","Array","from","hasFeature","feature","shouldMatchOnlyProject","match","shouldMatchOnlyOrg","includes","render","renderDisabled","hookName","requireAll","allFeatures","feat","customDisabledRender","hooks","HookStore","length","renderProps","isRenderFunc","_defineProperty","withOrganization","withProject","withConfig","FeatureDisabled","_ref","featureName","alert","hideHelpToggle","message","showHelp","setShowHelp","useState","snippet","installText","map","f","join","onClick","useCopyToClipboard","text","renderHelp","_jsxs","Fragment","HelpText","tct","configFile","configLink","ExternalLink","href","CONFIG_DOCS_URL","CopyButton","borderless","icon","IconCopy","size","Pre","e","selectText","target","showDescription","FeatureDisabledMessage","ToggleButton","priority","IconChevron","direction","HelpDescription","AlertComponent","expand","_styled","p","theme","lineHeightBody","space","Button","active","activeHover","ButtonLabel","name","styles","defaultComponent","defaultComponentPromise","HookOrDefaultComponent","constructor","arguments","setState","undefined","componentWillUnmount","unlistener","DefaultComponent","lazy","Suspense","fallback","hookExists","state","componentFromHook","HookComponent","node","HTMLInputElement","select","Node","window","getSelection","range","document","createRange","selectNode","selection","removeAllRanges","addRange","errorMessage","hideMessages","onCopy","onError","successMessage","timeoutRef","useRef","useCallback","navigator","clipboard","writeText","then","addSuccessMessage","catch","error","addErrorMessage","finally","current","clearTimeout","setTimeout","label","WrappedComponent","Wrapper","allProps","useLegacyStore","ConfigStore","getDisplayName"],"sourceRoot":""}