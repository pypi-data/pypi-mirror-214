{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport {MemberRole} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Team Slug'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        transformInput: slugify,\n        disabled: ({hasTeamWrite}) => !hasTeamWrite,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n  {\n    title: 'Team Organization Role',\n    fields: [\n      {\n        name: 'orgRole',\n        type: 'select',\n        choices: ({orgRoleList}) => {\n          const choices = orgRoleList.map((r: MemberRole) => [r.id, r.name]) ?? [];\n          choices.unshift(['', 'None']);\n          return choices;\n        },\n        required: false,\n        label: t('Organization Role'),\n        help: t(\n          'Organization owners can bulk assign an org-role for all the members in this team'\n        ),\n        disabled: ({hasOrgAdmin, idpProvisioned}) => !hasOrgAdmin || idpProvisioned,\n        visible: ({hasOrgRoleFlag}) => hasOrgRoleFlag,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You are giving all team members the permissions of this organization role'\n        ),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'sentry/actionCreators/teams';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport teamSettingsFields from 'sentry/data/forms/teamSettingsFields';\nimport {IconDelete} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = RouteComponentProps<{teamId: string}, {}> & {\n  organization: Organization;\n  team: Team;\n};\n\ntype State = AsyncView['state'];\n\nclass TeamSettings extends AsyncView<Props, State> {\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess: FormProps['onSubmitSuccess'] = (resp, _model, id) => {\n    const {organization} = this.props;\n\n    // Use the old slug when triggering the update so we correctly replace the\n    // previous team in the store\n    updateTeamSuccess(this.props.team.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      browserHistory.replace(\n        normalizeUrl(`/settings/${organization.slug}/teams/${resp.slug}/settings/`)\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    const {organization, params} = this.props;\n    try {\n      await removeTeam(this.api, {orgId: organization.slug, teamId: params.teamId});\n      browserHistory.replace(normalizeUrl(`/settings/${organization.slug}/teams/`));\n    } catch {\n      // removeTeam already displays an error message\n    }\n  };\n\n  renderBody() {\n    const {organization, team} = this.props;\n    const idpProvisioned = team.flags['idp:provisioned'];\n    const orgRoleList = organization.orgRoleList;\n    const hasOrgRoleFlag = organization.features.includes('org-roles-for-teams');\n\n    const hasTeamWrite = hasEveryAccess(['team:write'], {organization, team});\n    const hasTeamAdmin = hasEveryAccess(['team:admin'], {organization, team});\n    const hasOrgAdmin = hasEveryAccess(['org:admin'], {organization});\n\n    return (\n      <Fragment>\n        <PermissionAlert access={['team:write']} team={team} />\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint={`/teams/${organization.slug}/${team.slug}/`}\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n            orgRole: team.orgRole,\n          }}\n        >\n          <JsonForm\n            additionalFieldProps={{\n              idpProvisioned,\n              hasOrgRoleFlag,\n              hasTeamWrite,\n              hasOrgAdmin,\n              orgRoleList,\n            }}\n            forms={teamSettingsFields}\n          />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Team Administration')}</PanelHeader>\n          <FieldGroup\n            label={t('Remove Team')}\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!hasTeamAdmin}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  data-test-id=\"button-remove-team\"\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </FieldGroup>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(TeamSettings);\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n"],"names":["route","title","fields","name","type","required","label","t","placeholder","help","transformInput","slugify","disabled","_ref","hasTeamWrite","saveOnBlur","saveMessageAlertType","saveMessage","choices","_ref2","orgRoleList","map","r","id","unshift","_ref3","hasOrgAdmin","idpProvisioned","visible","_ref4","hasOrgRoleFlag","str","normalize","toLowerCase","replace","AsyncView","AsyncComponent","getTitle","render","_jsx","SentryDocumentTitle","this","children","renderComponent","displayName","TeamSettings","constructor","arguments","_defineProperty","resp","_model","organization","props","updateTeamSuccess","team","slug","addSuccessMessage","browserHistory","normalizeUrl","setState","loading","async","params","removeTeam","api","orgId","teamId","getEndpoints","renderBody","flags","features","includes","hasEveryAccess","hasTeamAdmin","_jsxs","Fragment","PermissionAlert","access","Form","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","handleSubmitSuccess","onSubmitError","addErrorMessage","initialData","orgRole","JsonForm","additionalFieldProps","forms","teamSettingsFields","Panel","PanelHeader","FieldGroup","Confirm","onConfirm","handleRemoveTeam","priority","message","tct","Button","icon","IconDelete","withOrganization","permissionAlertText","project","Access","hasAccess","Alert"],"sourceRoot":""}