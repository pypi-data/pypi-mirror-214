{"version":3,"file":"chunks/app_views_performance_landing_vitalsCards_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/vitals/vitalsCardsDiscoverQuery.tsx","webpack:///./app/components/sparklines/index.tsx","webpack:///./app/views/performance/vitalDetail/colorBar.tsx","webpack:///./app/views/performance/vitalDetail/vitalPercents.tsx","webpack:///./app/views/performance/landing/vitalsCards.tsx"],"sourcesContent":["import pick from 'lodash/pick';\n\nimport {MetaType} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryPropsWithContext,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {WebVital} from 'sentry/utils/fields';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\n\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type VitalData = {\n  good: number;\n  meh: number;\n  p75: number | null;\n  poor: number;\n  total: number;\n};\n\nexport type VitalsData = Record<string, VitalData>;\n\ntype VitalsProps = {\n  vitals: WebVital[];\n};\n\ntype RequestProps = DiscoverQueryPropsWithContext & VitalsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<VitalsProps>, 'tableData'> & {\n  vitalsData: VitalsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getRequestPayload(props: RequestProps) {\n  const {eventView, vitals} = props;\n  const apiPayload = eventView?.getEventsAPIPayload(props.location);\n  return {\n    vital: vitals,\n    ...pick(apiPayload, ['query', ...Object.values(PERFORMANCE_URL_PARAM)]),\n  };\n}\n\nfunction VitalsCardsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<VitalsData, VitalsProps>\n      getRequestPayload={getRequestPayload}\n      route=\"events-vitals\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({vitalsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default VitalsCardsDiscoverQuery;\n","import {Sparklines as BaseSparklines} from 'react-sparklines';\nimport * as PropTypes from 'prop-types';\n\n/**\n * This is required because:\n *\n * - React.Suspense only works with default exports\n * - typescript complains that the library's `propTypes` does not\n * have `children defined.\n * - typescript also won't let us access `Sparklines.propTypes`\n */\nexport class Sparklines extends BaseSparklines {\n  static propTypes = {\n    children: PropTypes.node,\n    data: PropTypes.array,\n    limit: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    svgWidth: PropTypes.number,\n    svgHeight: PropTypes.number,\n    preserveAspectRatio: PropTypes.string,\n    margin: PropTypes.number,\n    style: PropTypes.object,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onMouseMove: PropTypes.func,\n  };\n}\n","import {ReactNode} from 'react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\n\ntype ColorStop = {\n  color: Color | string;\n  percent: number;\n  renderBarStatus?: (barStatus: ReactNode, key: string) => ReactNode;\n};\n\ntype Props = {\n  colorStops: ColorStop[];\n  barHeight?: number;\n};\n\nfunction ColorBar(props: Props) {\n  return (\n    <VitalBar\n      barHeight={props.barHeight}\n      fractions={props.colorStops.map(({percent}) => percent)}\n    >\n      {props.colorStops.map(colorStop => {\n        const barStatus = <BarStatus color={colorStop.color} key={colorStop.color} />;\n\n        return colorStop.renderBarStatus?.(barStatus, colorStop.color) ?? barStatus;\n      })}\n    </VitalBar>\n  );\n}\n\ntype VitalBarProps = {\n  fractions: number[];\n  barHeight?: number;\n};\n\nconst VitalBar = styled('div')<VitalBarProps>`\n  height: ${p => (p.barHeight ? `${p.barHeight}px` : '16px')};\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  background: ${p => p.theme.gray100};\n  display: grid;\n  grid-template-columns: ${p => p.fractions.map(f => `${f}fr`).join(' ')};\n  margin-bottom: ${p => (p.barHeight ? '' : space(1))};\n  border-radius: 2px;\n`;\n\ntype ColorProps = {\n  color: Color | string;\n};\n\nconst BarStatus = styled('div')<ColorProps>`\n  background-color: ${p => p.theme[p.color] ?? p.color};\n`;\n\nexport default ColorBar;\n","import styled from '@emotion/styled';\n\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {WebVital} from 'sentry/utils/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\n\nimport {VitalState, vitalStateIcons, webVitalMeh, webVitalPoor} from './utils';\n\ntype Percent = {\n  percent: number;\n  vitalState: VitalState;\n};\n\ntype Props = {\n  percents: Percent[];\n  vital: WebVital | WebVital[];\n  hideTooltips?: boolean;\n  showVitalPercentNames?: boolean;\n  showVitalThresholds?: boolean;\n};\n\nfunction getVitalStateText(vital: WebVital | WebVital[], vitalState) {\n  const unit = !Array.isArray(vital) && vital !== WebVital.CLS ? 'ms' : '';\n  switch (vitalState) {\n    case VitalState.POOR:\n      return Array.isArray(vital)\n        ? t('Poor')\n        : tct('(>[threshold][unit])', {threshold: webVitalPoor[vital], unit});\n    case VitalState.MEH:\n      return Array.isArray(vital)\n        ? t('Meh')\n        : tct('(>[threshold][unit])', {threshold: webVitalMeh[vital], unit});\n    case VitalState.GOOD:\n      return Array.isArray(vital)\n        ? t('Good')\n        : tct('(<=[threshold][unit])', {threshold: webVitalMeh[vital], unit});\n    default:\n      return null;\n  }\n}\n\nexport default function VitalPercents(props: Props) {\n  return (\n    <VitalSet>\n      {props.percents.map(pct => (\n        <VitalStatus data-test-id=\"vital-status\" key={pct.vitalState}>\n          {vitalStateIcons[pct.vitalState]}\n          {props.showVitalPercentNames && pct.vitalState}{' '}\n          {formatPercentage(pct.percent, 0)}\n          {props.showVitalThresholds && getVitalStateText(props.vital, pct.vitalState)}\n        </VitalStatus>\n      ))}\n    </VitalSet>\n  );\n}\n\nconst VitalSet = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n`;\n\nconst VitalStatus = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport Card from 'sentry/components/card';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitle} from 'sentry/components/charts/styles';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {Sparklines} from 'sentry/components/sparklines';\nimport SparklinesLine from 'sentry/components/sparklines/line';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Column,\n  generateFieldAsString,\n  getAggregateAlias,\n} from 'sentry/utils/discover/fields';\nimport {WebVital} from 'sentry/utils/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport VitalsCardsDiscoverQuery, {\n  VitalData,\n  VitalsData,\n} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport toArray from 'sentry/utils/toArray';\nimport useApi from 'sentry/utils/useApi';\n\nimport ColorBar from '../vitalDetail/colorBar';\nimport {\n  vitalAbbreviations,\n  vitalDetailRouteWithQuery,\n  vitalMap,\n  VitalState,\n  vitalStateColors,\n} from '../vitalDetail/utils';\nimport VitalPercents from '../vitalDetail/vitalPercents';\n\nimport {\n  getDefaultDisplayFieldForPlatform,\n  LandingDisplayField,\n  vitalCardDetails,\n} from './utils';\n\ntype FrontendCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  frontendOnly?: boolean;\n};\n\nexport function FrontendCards(props: FrontendCardsProps) {\n  const {eventView, location, organization, projects, frontendOnly = false} = props;\n\n  if (frontendOnly) {\n    const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n    const isFrontend = defaultDisplay === LandingDisplayField.FRONTEND_PAGELOAD;\n\n    if (!isFrontend) {\n      return null;\n    }\n  }\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\n  return (\n    <VitalsCardsDiscoverQuery\n      eventView={eventView}\n      location={location}\n      orgSlug={organization.slug}\n      vitals={vitals}\n    >\n      {({isLoading, vitalsData}) => {\n        return (\n          <VitalsContainer>\n            {vitals.map(vital => {\n              const target = vitalDetailRouteWithQuery({\n                orgSlug: organization.slug,\n                query: eventView.generateQueryStringObject(),\n                vitalName: vital,\n                projectID: decodeList(location.query.project),\n              });\n\n              const value = isLoading\n                ? '\\u2014'\n                : getP75(vitalsData?.[vital] ?? null, vital);\n              const chart = (\n                <VitalBarContainer>\n                  <VitalBar isLoading={isLoading} vital={vital} data={vitalsData} />\n                </VitalBarContainer>\n              );\n\n              return (\n                <Link\n                  key={vital}\n                  to={target}\n                  data-test-id={`vitals-linked-card-${vitalAbbreviations[vital]}`}\n                >\n                  <VitalCard\n                    title={vitalMap[vital] ?? ''}\n                    tooltip={WEB_VITAL_DETAILS[vital].description ?? ''}\n                    value={isLoading ? '\\u2014' : value}\n                    chart={chart}\n                    minHeight={150}\n                  />\n                </Link>\n              );\n            })}\n          </VitalsContainer>\n        );\n      }}\n    </VitalsCardsDiscoverQuery>\n  );\n}\n\nconst VitalBarContainer = styled('div')`\n  margin-top: ${space(1.5)};\n`;\n\ntype BaseCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\ntype GenericCardsProps = BaseCardsProps & {\n  functions: Column[];\n};\n\nfunction GenericCards(props: GenericCardsProps) {\n  const api = useApi();\n\n  const {eventView: baseEventView, location, organization, functions} = props;\n  const {query} = location;\n  const eventView = baseEventView.withColumns(functions);\n\n  // construct request parameters for fetching chart data\n  const globalSelection = eventView.getPageFilters();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : undefined;\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : undefined;\n  const interval =\n    typeof query.sparkInterval === 'string'\n      ? query.sparkInterval\n      : getInterval(\n          {\n            start: start || null,\n            end: end || null,\n            period: globalSelection.datetime.period,\n          },\n          'low'\n        );\n  const apiPayload = eventView.getEventsAPIPayload(location);\n\n  return (\n    <DiscoverQuery\n      location={location}\n      eventView={eventView}\n      orgSlug={organization.slug}\n      limit={1}\n      referrer=\"api.performance.vitals-cards\"\n    >\n      {({isLoading: isSummaryLoading, tableData}) => (\n        <EventsRequest\n          api={api}\n          organization={organization}\n          period={globalSelection.datetime.period}\n          project={globalSelection.projects}\n          environment={globalSelection.environments}\n          team={apiPayload.team}\n          start={start}\n          end={end}\n          interval={interval}\n          query={apiPayload.query}\n          includePrevious={false}\n          yAxis={eventView.getFields()}\n          partial\n        >\n          {({results}) => {\n            const series = results?.reduce((allSeries, oneSeries) => {\n              allSeries[oneSeries.seriesName] = oneSeries.data.map(item => item.value);\n              return allSeries;\n            }, {});\n            const details = vitalCardDetails(organization);\n\n            return (\n              <VitalsContainer>\n                {functions.map(func => {\n                  let fieldName = generateFieldAsString(func);\n\n                  if (fieldName.includes('apdex')) {\n                    // Replace apdex with explicit thresholds with a generic one for lookup\n                    fieldName = 'apdex()';\n                  }\n\n                  const cardDetail = details[fieldName];\n                  if (!cardDetail) {\n                    Sentry.captureMessage(`Missing field '${fieldName}' in vital cards.`);\n                    return null;\n                  }\n\n                  const {title, tooltip, formatter} = cardDetail;\n                  const alias = getAggregateAlias(fieldName);\n                  const rawValue = tableData?.data?.[0]?.[alias] as number;\n\n                  const data = series?.[fieldName];\n                  const value =\n                    isSummaryLoading || !defined(rawValue)\n                      ? '\\u2014'\n                      : formatter(rawValue);\n                  const chart = <SparklineChart data={data} />;\n                  return (\n                    <VitalCard\n                      key={fieldName}\n                      title={title}\n                      tooltip={tooltip}\n                      value={value}\n                      chart={chart}\n                      horizontal\n                      minHeight={96}\n                      isNotInteractive\n                    />\n                  );\n                })}\n              </VitalsContainer>\n            );\n          }}\n        </EventsRequest>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nfunction _BackendCards(props: BaseCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'transaction.duration', undefined, undefined],\n    },\n    {kind: 'function', function: ['tpm', '', undefined, undefined]},\n    {kind: 'function', function: ['failure_rate', '', undefined, undefined]},\n    {\n      kind: 'function',\n      function: ['apdex', '', undefined, undefined],\n    },\n  ];\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const BackendCards = _BackendCards;\n\ntype MobileCardsProps = BaseCardsProps & {\n  showStallPercentage: boolean;\n};\n\nfunction _MobileCards(props: MobileCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_cold', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_warm', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.frames_slow_rate', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.frames_frozen_rate', undefined, undefined],\n    },\n  ];\n  if (props.showStallPercentage) {\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.stall_percentage', undefined, undefined],\n    });\n  }\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const MobileCards = _MobileCards;\n\ntype SparklineChartProps = {\n  data: number[];\n};\n\nfunction SparklineChart(props: SparklineChartProps) {\n  const {data} = props;\n  const width = 150;\n  const height = 24;\n  const lineColor = theme.charts.getColorPalette(1)[0];\n  return (\n    <SparklineContainer data-test-id=\"sparkline\" width={width} height={height}>\n      <Sparklines data={data} width={width} height={height}>\n        <SparklinesLine style={{stroke: lineColor, fill: 'none', strokeWidth: 3}} />\n      </Sparklines>\n    </SparklineContainer>\n  );\n}\n\ntype SparklineContainerProps = {\n  height: number;\n  width: number;\n};\n\nconst SparklineContainer = styled('div')<SparklineContainerProps>`\n  flex-grow: 4;\n  max-height: ${p => p.height}px;\n  max-width: ${p => p.width}px;\n  margin: ${space(1)} ${space(0)} ${space(0.5)} ${space(3)};\n`;\n\nconst VitalsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n`;\n\ntype VitalBarProps = {\n  data: VitalsData | null;\n  isLoading: boolean;\n  vital: WebVital | WebVital[];\n  barHeight?: number;\n  showBar?: boolean;\n  showDetail?: boolean;\n  showDurationDetail?: boolean;\n  showStates?: boolean;\n  showTooltip?: boolean;\n  showVitalPercentNames?: boolean;\n  showVitalThresholds?: boolean;\n  value?: string;\n};\n\nexport function VitalBar(props: VitalBarProps) {\n  const {\n    isLoading,\n    data,\n    vital,\n    value,\n    showBar = true,\n    showStates = false,\n    showDurationDetail = false,\n    showVitalPercentNames = true,\n    showVitalThresholds = false,\n    showDetail = true,\n    showTooltip = false,\n    barHeight,\n  } = props;\n\n  if (isLoading) {\n    return showStates ? <Placeholder height=\"48px\" /> : null;\n  }\n\n  const emptyState = showStates ? (\n    <EmptyVitalBar small>{t('No vitals found')}</EmptyVitalBar>\n  ) : null;\n\n  if (!data) {\n    return emptyState;\n  }\n\n  const counts: Pick<VitalData, 'poor' | 'meh' | 'good' | 'total'> = {\n    poor: 0,\n    meh: 0,\n    good: 0,\n    total: 0,\n  };\n  const vitals = toArray(vital);\n  vitals.forEach(vitalName => {\n    const c = data?.[vitalName] ?? {};\n    Object.keys(counts).forEach(countKey => (counts[countKey] += c[countKey]));\n  });\n\n  if (!counts.total) {\n    return emptyState;\n  }\n\n  const p75: React.ReactNode = Array.isArray(vital)\n    ? null\n    : value ?? getP75(data?.[vital] ?? null, vital);\n  const percents = getPercentsFromCounts(counts);\n  const colorStops = getColorStopsFromPercents(percents);\n\n  return (\n    <Fragment>\n      {showBar && (\n        <StyledTooltip\n          title={\n            <VitalPercents\n              vital={vital}\n              percents={percents}\n              showVitalPercentNames={false}\n              showVitalThresholds={false}\n              hideTooltips={showTooltip}\n            />\n          }\n          disabled={!showTooltip}\n          position=\"bottom\"\n        >\n          <ColorBar barHeight={barHeight} colorStops={colorStops} />\n        </StyledTooltip>\n      )}\n      {showDetail && (\n        <BarDetail>\n          {showDurationDetail && p75 && (\n            <div>\n              {t('The p75 for all transactions is ')}\n              <strong>{p75}</strong>\n            </div>\n          )}\n\n          <VitalPercents\n            vital={vital}\n            percents={percents}\n            showVitalPercentNames={showVitalPercentNames}\n            showVitalThresholds={showVitalThresholds}\n          />\n        </BarDetail>\n      )}\n    </Fragment>\n  );\n}\n\nconst EmptyVitalBar = styled(EmptyStateWarning)`\n  height: 48px;\n  padding: ${space(1.5)} 15%;\n`;\n\ntype VitalCardProps = {\n  chart: React.ReactNode;\n  title: string;\n  tooltip: string;\n  value: string | number;\n  horizontal?: boolean;\n  isNotInteractive?: boolean;\n  minHeight?: number;\n};\n\nfunction VitalCard(props: VitalCardProps) {\n  const {chart, minHeight, horizontal, title, tooltip, value, isNotInteractive} = props;\n  return (\n    <StyledCard interactive={!isNotInteractive} minHeight={minHeight}>\n      <HeaderTitle>\n        <OverflowEllipsis>{title}</OverflowEllipsis>\n        <QuestionTooltip size=\"sm\" position=\"top\" title={tooltip} />\n      </HeaderTitle>\n      <CardContent horizontal={horizontal}>\n        <CardValue>{value}</CardValue>\n        {chart}\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst CardContent = styled('div')<{horizontal?: boolean}>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${p => (p.horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n`;\n\nconst StyledCard = styled(Card)<{minHeight?: number}>`\n  color: ${p => p.theme.textColor};\n  padding: ${space(2)} ${space(3)};\n  align-items: flex-start;\n  margin-bottom: ${space(2)};\n  ${p => p.minHeight && `min-height: ${p.minHeight}px`};\n`;\n\nconst StyledTooltip = styled(Tooltip)`\n  width: 100%;\n`;\n\nfunction getP75(data: VitalData | null, vitalName: WebVital): string {\n  const p75 = data?.p75 ?? null;\n  if (p75 === null) {\n    return '\\u2014';\n  }\n  return vitalName === WebVital.CLS ? p75.toFixed(2) : `${p75.toFixed(0)}ms`;\n}\n\ntype Percent = {\n  percent: number;\n  vitalState: VitalState;\n};\n\nfunction getPercentsFromCounts({poor, meh, good, total}) {\n  const poorPercent = poor / total;\n  const mehPercent = meh / total;\n  const goodPercent = good / total;\n\n  const percents: Percent[] = [\n    {\n      vitalState: VitalState.GOOD,\n      percent: goodPercent,\n    },\n    {\n      vitalState: VitalState.MEH,\n      percent: mehPercent,\n    },\n    {\n      vitalState: VitalState.POOR,\n      percent: poorPercent,\n    },\n  ];\n\n  return percents;\n}\n\nfunction getColorStopsFromPercents(percents: Percent[]) {\n  return percents.map(({percent, vitalState}) => ({\n    percent,\n    color: vitalStateColors[vitalState],\n  }));\n}\n\nconst BarDetail = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst CardValue = styled('div')`\n  font-size: 32px;\n  margin-top: ${space(1)};\n`;\n\nconst OverflowEllipsis = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n"],"names":["getRequestPayload","props","eventView","vitals","apiPayload","getEventsAPIPayload","location","vital","pick","Object","values","PERFORMANCE_URL_PARAM","VitalsCardsDiscoverQuery","_jsx","GenericDiscoverQuery","route","children","_ref","tableData","rest","vitalsData","displayName","Sparklines","BaseSparklines","_defineProperty","PropTypes","data","limit","width","height","svgWidth","svgHeight","preserveAspectRatio","margin","style","min","max","onMouseMove","ColorBar","VitalBar","barHeight","fractions","colorStops","map","percent","colorStop","barStatus","BarStatus","color","renderBarStatus","_styled","target","p","theme","gray100","f","join","space","getVitalStateText","vitalState","unit","Array","isArray","WebVital","VitalState","t","tct","threshold","webVitalPoor","webVitalMeh","VitalPercents","VitalSet","percents","pct","_jsxs","VitalStatus","vitalStateIcons","showVitalPercentNames","formatPercentage","showVitalThresholds","fontSizeMedium","GenericCards","api","useApi","baseEventView","organization","functions","query","withColumns","globalSelection","getPageFilters","start","datetime","getUtcToLocalDateObject","undefined","end","interval","sparkInterval","getInterval","period","DiscoverQuery","orgSlug","slug","referrer","_ref2","isLoading","isSummaryLoading","EventsRequest","project","projects","environment","environments","team","includePrevious","yAxis","getFields","partial","_ref3","results","series","reduce","allSeries","oneSeries","seriesName","item","value","details","vitalCardDetails","VitalsContainer","func","fieldName","generateFieldAsString","includes","cardDetail","Sentry","title","tooltip","formatter","alias","getAggregateAlias","rawValue","defined","chart","SparklineChart","VitalCard","horizontal","minHeight","isNotInteractive","lineColor","SparklineContainer","SparklinesLine","stroke","fill","strokeWidth","breakpoints","small","large","showBar","showStates","showDurationDetail","showDetail","showTooltip","Placeholder","emptyState","EmptyVitalBar","counts","poor","meh","good","total","toArray","forEach","vitalName","c","keys","countKey","p75","toFixed","getP75","_ref4","poorPercent","mehPercent","goodPercent","getPercentsFromCounts","_ref5","vitalStateColors","getColorStopsFromPercents","Fragment","StyledTooltip","hideTooltips","disabled","position","BarDetail","EmptyStateWarning","StyledCard","interactive","HeaderTitle","OverflowEllipsis","QuestionTooltip","size","CardContent","CardValue","Card","textColor","Tooltip","name","styles","overflowEllipsis"],"sourceRoot":""}