{"version":3,"file":"chunks/app_views_admin_adminRelays_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/linkWithConfirmation.tsx","webpack:///./app/components/resultGrid.tsx","webpack:///./app/views/admin/adminRelays.tsx"],"sourcesContent":["import {ButtonProps} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\n\nimport Anchor from './anchor';\n\ntype Props = {\n  message: React.ReactNode;\n  onConfirm: () => void;\n  title: string;\n  children?: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  priority?: ButtonProps['priority'];\n};\n\n/**\n * <Confirm> is a more generic version of this component\n */\nfunction LinkWithConfirmation({\n  className,\n  disabled,\n  title,\n  children,\n  ...otherProps\n}: Props) {\n  return (\n    <Confirm {...otherProps} disabled={disabled}>\n      <Anchor href=\"#\" className={className} disabled={disabled} title={title}>\n        {children}\n      </Anchor>\n    </Confirm>\n  );\n}\n\nexport default LinkWithConfirmation;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Client, RequestOptions} from 'sentry/api';\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport MenuItem from 'sentry/components/menuItem';\nimport Pagination from 'sentry/components/pagination';\nimport {IconSearch} from 'sentry/icons';\nimport withApi from 'sentry/utils/withApi';\n\ntype Option = [value: string, label: string];\n\ntype FilterProps = {\n  location: Location;\n  name: string;\n  options: Option[];\n  path: string;\n  queryKey: string;\n  value: string;\n};\n\nclass Filter extends Component<FilterProps> {\n  getCurrentLabel() {\n    const selected = this.props.options.find(\n      item => item[0] === (this.props.value ?? '')\n    );\n    if (selected) {\n      return this.props.name + ': ' + selected[1];\n    }\n    return this.props.name + ': ' + 'Any';\n  }\n\n  getDefaultItem() {\n    const query = {...this.props.location.query, cursor: ''};\n    delete query[this.props.queryKey];\n\n    return (\n      <MenuItem\n        key=\"\"\n        isActive={this.props.value === '' || !this.props.value}\n        to={{pathname: this.props.path, query}}\n      >\n        Any\n      </MenuItem>\n    );\n  }\n\n  getSelector = () => (\n    <DropdownLink title={this.getCurrentLabel()}>\n      {this.getDefaultItem()}\n      {this.props.options.map(([value, label]) => {\n        const filterQuery = {\n          [this.props.queryKey]: value,\n          cursor: '',\n        };\n\n        const query = {...this.props.location.query, ...filterQuery};\n        return (\n          <MenuItem\n            key={value}\n            isActive={this.props.value === value}\n            to={{pathname: this.props.path, query}}\n          >\n            {label}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    return (\n      <div className=\"filter-options\">\n        {this.props.options.length === 1 ? (\n          <strong>{this.getCurrentLabel()}</strong>\n        ) : (\n          this.getSelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype SortByProps = {\n  location: Location;\n  options: Option[];\n  path: string;\n  value: string;\n};\n\nclass SortBy extends Component<SortByProps> {\n  getCurrentSortLabel() {\n    return this.props.options.find(([value]) => value === this.props.value)?.[1];\n  }\n\n  getSortBySelector() {\n    return (\n      <DropdownLink title={this.getCurrentSortLabel()} className=\"sorted-by\">\n        {this.props.options.map(([value, label]) => {\n          const query = {...this.props.location.query, sortBy: value, cursor: ''};\n          return (\n            <MenuItem\n              isActive={this.props.value === value}\n              key={value}\n              to={{pathname: this.props.path, query}}\n            >\n              {label}\n            </MenuItem>\n          );\n        })}\n      </DropdownLink>\n    );\n  }\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"sort-options\">\n        Showing results sorted by\n        {this.props.options.length === 1 ? (\n          <strong className=\"sorted-by\">{this.getCurrentSortLabel()}</strong>\n        ) : (\n          this.getSortBySelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype FilterConfig = {\n  name: string;\n  options: Option[];\n};\n\n// XXX(ts): Using Partial here on the DefaultProps is not really correct, since\n// defaultProps guarantees they'll be set. But because this component is\n// wrapped with a HoC, we lose the defaultProps, and users of the component\ntype Props = {\n  api: Client;\n  location: Location;\n} & Partial<DefaultProps>;\n\ntype DefaultProps = {\n  columns: React.ReactNode[];\n  columnsForRow: (row: any) => React.ReactNode[];\n  defaultParams: Record<string, any>;\n  defaultSort: string;\n  endpoint: string;\n  filters: Record<string, FilterConfig>;\n  hasPagination: boolean;\n  hasSearch: boolean;\n  keyForRow: (row: any) => string;\n  method: RequestOptions['method'];\n  path: string;\n  sortOptions: Option[];\n};\n\ntype State = {\n  error: string | boolean;\n  filters: Record<string, string>;\n  loading: boolean;\n  pageLinks: null | string;\n  query: string;\n  rows: any[];\n  sortBy: string;\n};\n\nclass ResultGrid extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    path: '',\n    endpoint: '',\n    method: 'GET',\n    columns: [],\n    sortOptions: [],\n    filters: {},\n    defaultSort: '',\n    keyForRow: row => row.id,\n    columnsForRow: () => [],\n    defaultParams: {\n      per_page: 50,\n    },\n    hasPagination: true,\n    hasSearch: false,\n  };\n\n  state: State = this.defaultState;\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps() {\n    const queryParams = this.query;\n    this.setState(\n      {\n        query: queryParams.query ?? '',\n        sortBy: queryParams.sortBy ?? this.props.defaultSort,\n        filters: {...queryParams},\n        pageLinks: null,\n        loading: true,\n        error: false,\n      },\n      this.fetchData\n    );\n  }\n\n  get defaultState() {\n    const queryParams = this.query;\n\n    return {\n      rows: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      query: queryParams.query ?? '',\n      sortBy: queryParams.sortBy ?? this.props.defaultSort,\n      filters: {...queryParams},\n    } as State;\n  }\n\n  get query() {\n    return ((this.props.location ?? {}).query ?? {}) as {[k: string]: string};\n  }\n\n  remountComponent() {\n    this.setState(this.defaultState, this.fetchData);\n  }\n\n  refresh() {\n    this.setState({loading: true}, this.fetchData);\n  }\n\n  fetchData() {\n    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage\n    const queryParams = {\n      ...this.props.defaultParams,\n      sortBy: this.state.sortBy,\n      ...this.query,\n    };\n\n    this.props.api.request(this.props.endpoint!, {\n      method: this.props.method,\n      data: queryParams,\n      success: (data, _, resp) => {\n        this.setState({\n          loading: false,\n          error: false,\n          rows: data,\n          pageLinks: resp?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  }\n\n  onSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    const location = this.props.location ?? {};\n    const {query} = this.state;\n    const targetQueryParams = {...(location.query ?? {}), query, cursor: ''};\n\n    e.preventDefault();\n\n    browserHistory.push({\n      pathname: this.props.path,\n      query: targetQueryParams,\n    });\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({query: evt.target.value});\n  };\n\n  renderLoading() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"loading\">\n            <div className=\"loading-indicator\" />\n            <div className=\"loading-message\">Hold on to your butts!</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderError() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"alert-block alert-error\">Something bad happened :(</div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderNoResults() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>No results found.</td>\n      </tr>\n    );\n  }\n\n  renderResults() {\n    return this.state.rows.map(row => (\n      <tr key={this.props.keyForRow?.(row)}>{this.props.columnsForRow?.(row)}</tr>\n    ));\n  }\n\n  render() {\n    const {filters, sortOptions, path, location} = this.props;\n    return (\n      <div className=\"result-grid\">\n        <div className=\"table-options\">\n          {this.props.hasSearch && (\n            <div className=\"result-grid-search\">\n              <form onSubmit={this.onSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control input-search\"\n                    placeholder=\"search\"\n                    style={{width: 300}}\n                    name=\"query\"\n                    autoComplete=\"off\"\n                    value={this.state.query}\n                    onChange={this.onQueryChange}\n                  />\n                  <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                    <IconSearch size=\"xs\" />\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <SortBy\n            options={sortOptions ?? []}\n            value={this.state.sortBy}\n            path={path ?? ''}\n            location={location}\n          />\n          {Object.keys(filters ?? {}).map(filterKey => (\n            <Filter\n              key={filterKey}\n              queryKey={filterKey}\n              value={this.state.filters[filterKey]}\n              path={path ?? ''}\n              location={location}\n              {...(filters?.[filterKey] as FilterConfig)}\n            />\n          ))}\n        </div>\n\n        <table className=\"table table-grid\">\n          <thead>\n            <tr>{this.props.columns}</tr>\n          </thead>\n          <tbody>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.state.rows.length === 0\n              ? this.renderNoResults()\n              : this.renderResults()}\n          </tbody>\n        </table>\n        {this.props.hasPagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport {ResultGrid};\n\nexport default withApi(ResultGrid);\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport moment from 'moment';\n\nimport {Client} from 'sentry/api';\nimport LinkWithConfirmation from 'sentry/components/links/linkWithConfirmation';\nimport ResultGrid from 'sentry/components/resultGrid';\nimport {t} from 'sentry/locale';\nimport withApi from 'sentry/utils/withApi';\n\nconst prettyDate = (x: string) => moment(x).format('ll LTS');\n\ntype Props = RouteComponentProps<{}, {}> & {api: Client};\n\ntype State = {\n  loading: boolean;\n};\n\ntype RelayRow = {\n  firstSeen: string;\n  id: string;\n  lastSeen: string;\n  publicKey: string;\n  relayId: string;\n};\n\nclass AdminRelays extends Component<Props, State> {\n  state: State = {\n    loading: false,\n  };\n\n  onDelete(key: string) {\n    this.setState({loading: true});\n    this.props.api.request(`/relays/${key}/`, {\n      method: 'DELETE',\n      success: () => this.setState({loading: false}),\n      error: () => this.setState({loading: false}),\n    });\n  }\n\n  getRow(row: RelayRow) {\n    return [\n      <td key=\"id\">\n        <strong>{row.relayId}</strong>\n      </td>,\n      <td key=\"key\">{row.publicKey}</td>,\n      <td key=\"firstSeen\" style={{textAlign: 'right'}}>\n        {prettyDate(row.firstSeen)}\n      </td>,\n      <td key=\"lastSeen\" style={{textAlign: 'right'}}>\n        {prettyDate(row.lastSeen)}\n      </td>,\n      <td key=\"tools\" style={{textAlign: 'right'}}>\n        <span className=\"editor-tools\">\n          <LinkWithConfirmation\n            className=\"danger\"\n            title=\"Remove\"\n            message={t('Are you sure you wish to delete this relay?')}\n            onConfirm={() => this.onDelete(row.id)}\n          >\n            {t('Remove')}\n          </LinkWithConfirmation>\n        </span>\n      </td>,\n    ];\n  }\n\n  render() {\n    const columns = [\n      <th key=\"id\" style={{width: 350, textAlign: 'left'}}>\n        Relay\n      </th>,\n      <th key=\"key\">Public Key</th>,\n      <th key=\"firstSeen\" style={{width: 150, textAlign: 'right'}}>\n        First seen\n      </th>,\n      <th key=\"lastSeen\" style={{width: 150, textAlign: 'right'}}>\n        Last seen\n      </th>,\n      <th key=\"tools\" />,\n    ];\n\n    return (\n      <div>\n        <h3>{t('Relays')}</h3>\n        <ResultGrid\n          path=\"/manage/relays/\"\n          endpoint=\"/relays/\"\n          method=\"GET\"\n          columns={columns}\n          columnsForRow={this.getRow}\n          hasSearch={false}\n          sortOptions={[\n            ['firstSeen', 'First seen'],\n            ['lastSeen', 'Last seen'],\n            ['relayId', 'Relay ID'],\n          ]}\n          defaultSort=\"firstSeen\"\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport {AdminRelays};\n\nexport default withApi(AdminRelays);\n"],"names":["LinkWithConfirmation","_ref","className","disabled","title","children","otherProps","_jsx","Confirm","Anchor","href","displayName","Filter","Component","constructor","arguments","_defineProperty","_jsxs","DropdownLink","this","getCurrentLabel","getDefaultItem","props","options","map","value","label","filterQuery","queryKey","cursor","query","location","MenuItem","isActive","to","pathname","path","selected","find","item","name","render","length","getSelector","SortBy","getCurrentSortLabel","_ref2","getSortBySelector","_ref3","sortBy","ResultGrid","defaultState","e","state","targetQueryParams","preventDefault","browserHistory","evt","setState","target","UNSAFE_componentWillMount","fetchData","UNSAFE_componentWillReceiveProps","queryParams","defaultSort","filters","pageLinks","loading","error","rows","remountComponent","refresh","defaultParams","api","request","endpoint","method","data","success","_","resp","getResponseHeader","renderLoading","colSpan","columns","renderError","renderNoResults","renderResults","row","columnsForRow","keyForRow","sortOptions","hasSearch","onSubmit","onSearch","type","placeholder","style","width","autoComplete","onChange","onQueryChange","IconSearch","size","Object","keys","filterKey","hasPagination","Pagination","id","per_page","withApi","prettyDate","x","moment","format","AdminRelays","onDelete","key","getRow","relayId","publicKey","textAlign","firstSeen","lastSeen","message","t","onConfirm"],"sourceRoot":""}