{"version":3,"file":"chunks/SuperuserAccessForm.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/superuserAccessForm.tsx","webpack:///./app/components/u2f/u2fContainer.tsx","webpack:///./app/components/u2f/webAuthnHelper.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/constants/superuserAccessErrors.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport trimEnd from 'lodash/trimEnd';\n\nimport {logout} from 'sentry/actionCreators/account';\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport Hook from 'sentry/components/hook';\nimport {ThemeAndStyleProvider} from 'sentry/components/themeAndStyleProvider';\nimport U2fContainer from 'sentry/components/u2f/u2fContainer';\nimport {ErrorCodes} from 'sentry/constants/superuserAccessErrors';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {space} from 'sentry/styles/space';\nimport {Authenticator} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype OnTapProps = NonNullable<React.ComponentProps<typeof U2fContainer>['onTap']>;\n\ntype Props = {\n  api: Client;\n};\n\ntype State = {\n  authenticators: Array<Authenticator>;\n  error: boolean;\n  errorType: string;\n  showAccessForms: boolean;\n  superuserAccessCategory: string;\n  superuserReason: string;\n};\n\nclass SuperuserAccessForm extends Component<Props, State> {\n  state: State = {\n    authenticators: [],\n    error: false,\n    errorType: '',\n    showAccessForms: true,\n    superuserAccessCategory: '',\n    superuserReason: '',\n  };\n\n  componentDidMount() {\n    this.getAuthenticators();\n  }\n\n  handleSubmitCOPS = () => {\n    this.setState({\n      superuserAccessCategory: 'cops_csm',\n      superuserReason: 'COPS and CSM use',\n    });\n  };\n\n  handleSubmit = async data => {\n    const {api} = this.props;\n    const {superuserAccessCategory, superuserReason, authenticators} = this.state;\n    const disableU2FForSUForm = ConfigStore.get('disableU2FForSUForm');\n\n    const suAccessCategory = superuserAccessCategory || data.superuserAccessCategory;\n\n    const suReason = superuserReason || data.superuserReason;\n\n    if (!authenticators.length && !disableU2FForSUForm) {\n      this.handleError(ErrorCodes.NO_AUTHENTICATOR);\n      return;\n    }\n\n    if (this.state.showAccessForms && !disableU2FForSUForm) {\n      this.setState({\n        showAccessForms: false,\n        superuserAccessCategory: suAccessCategory,\n        superuserReason: suReason,\n      });\n    } else {\n      try {\n        await api.requestPromise('/auth/', {method: 'PUT', data});\n        this.handleSuccess();\n      } catch (err) {\n        this.handleError(err);\n      }\n    }\n  };\n\n  handleU2fTap = async (data: Parameters<OnTapProps>[0]) => {\n    const {api} = this.props;\n    try {\n      data.isSuperuserModal = true;\n      data.superuserAccessCategory = this.state.superuserAccessCategory;\n      data.superuserReason = this.state.superuserReason;\n      await api.requestPromise('/auth/', {method: 'PUT', data});\n      this.handleSuccess();\n    } catch (err) {\n      this.setState({showAccessForms: true});\n      // u2fInterface relies on this\n      throw err;\n    }\n  };\n\n  handleSuccess = () => {\n    window.location.reload();\n  };\n\n  handleError = err => {\n    let errorType = '';\n    if (err.status === 403) {\n      if (err.responseJSON.detail.code === 'no_u2f') {\n        errorType = ErrorCodes.NO_AUTHENTICATOR;\n      } else {\n        errorType = ErrorCodes.INVALID_PASSWORD;\n      }\n    } else if (err.status === 401) {\n      errorType = ErrorCodes.INVALID_SSO_SESSION;\n    } else if (err.status === 400) {\n      errorType = ErrorCodes.INVALID_ACCESS_CATEGORY;\n    } else if (err === ErrorCodes.NO_AUTHENTICATOR) {\n      errorType = ErrorCodes.NO_AUTHENTICATOR;\n    } else {\n      errorType = ErrorCodes.UNKNOWN_ERROR;\n    }\n    this.setState({\n      error: true,\n      errorType,\n      showAccessForms: true,\n    });\n  };\n\n  handleLogout = async () => {\n    const {api} = this.props;\n    try {\n      await logout(api);\n    } catch {\n      // ignore errors\n    }\n    const authLoginPath = `/auth/login/?next=${encodeURIComponent(window.location.href)}`;\n    const {superuserUrl} = window.__initialData.links;\n    if (window.__initialData?.customerDomain && superuserUrl) {\n      const redirectURL = `${trimEnd(superuserUrl, '/')}${authLoginPath}`;\n      window.location.assign(redirectURL);\n      return;\n    }\n    window.location.assign(authLoginPath);\n  };\n\n  async getAuthenticators() {\n    const {api} = this.props;\n\n    try {\n      const authenticators = await api.requestPromise('/authenticators/');\n      this.setState({authenticators: authenticators ?? []});\n    } catch {\n      // ignore errors\n    }\n  }\n\n  render() {\n    const {authenticators, error, errorType, showAccessForms} = this.state;\n    if (errorType === ErrorCodes.INVALID_SSO_SESSION) {\n      this.handleLogout();\n      return null;\n    }\n    return (\n      <ThemeAndStyleProvider>\n        <Form\n          submitLabel={t('Continue')}\n          onSubmit={this.handleSubmit}\n          initialData={{isSuperuserModal: true}}\n          extraButton={\n            <BackWrapper>\n              <Button type=\"submit\" onClick={this.handleSubmitCOPS}>\n                {t('COPS/CSM')}\n              </Button>\n            </BackWrapper>\n          }\n          resetOnError\n        >\n          {error && (\n            <StyledAlert type=\"error\" showIcon>\n              {errorType}\n            </StyledAlert>\n          )}\n          {showAccessForms && <Hook name=\"component:superuser-access-category\" />}\n          {!showAccessForms && (\n            <U2fContainer\n              authenticators={authenticators}\n              displayMode=\"sudo\"\n              onTap={this.handleU2fTap}\n            />\n          )}\n        </Form>\n      </ThemeAndStyleProvider>\n    );\n  }\n}\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n\nconst BackWrapper = styled('div')`\n  width: 100%;\n  margin-left: ${space(4)};\n`;\n\nexport default withApi(SuperuserAccessForm);\n","import {Authenticator} from 'sentry/types';\n\nimport U2fSign from './u2fsign';\n\ntype U2FSignProps = React.ComponentProps<typeof U2fSign>;\n\ntype Props = {\n  authenticators: Array<Authenticator>;\n  onTap: U2FSignProps['onTap'];\n  className?: string;\n  displayMode?: U2FSignProps['displayMode'];\n};\n\nfunction U2fContainer({className, authenticators, ...props}: Props) {\n  if (!authenticators.length) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      {authenticators.map(auth =>\n        auth.id === 'u2f' && auth.challenge ? (\n          <U2fSign key={auth.id} {...props} challengeData={auth.challenge} />\n        ) : null\n      )}\n    </div>\n  );\n}\n\nexport default U2fContainer;\n","// Copyright (c) 2019 GitHub, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n// below is from https://github.com/github/webauthn-json/tree/66322fc5c12184c5269691ab5abaac79545a3916\n\nexport function base64urlToBuffer(baseurl64String: string): ArrayBuffer {\n  // Base64url to Base64\n  const padding = '=='.slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, '+').replace(/_/g, '/') + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): string {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = '';\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n  return base64urlString;\n}\n","import {Component} from 'react';\nimport * as Sentry from '@sentry/react';\nimport * as cbor from 'cbor-web';\n\nimport {base64urlToBuffer, bufferToBase64url} from 'sentry/components/u2f/webAuthnHelper';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ChallengeData, Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype TapParams = {\n  challenge: string;\n  response: string;\n  isSuperuserModal?: boolean;\n  superuserAccessCategory?: string;\n  superuserReason?: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  onTap: ({\n    response,\n    challenge,\n    isSuperuserModal,\n    superuserAccessCategory,\n    superuserReason,\n  }: TapParams) => Promise<void>;\n  organization: Organization;\n  silentIfUnsupported: boolean;\n  children?: React.ReactNode;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  challengeElement: HTMLInputElement | null;\n  deviceFailure: string | null;\n  failCount: number;\n  formElement: HTMLFormElement | null;\n  hasBeenTapped: boolean;\n  isSafari: boolean;\n  isSupported: boolean | null;\n  responseElement: HTMLInputElement | null;\n};\n\nclass U2fInterface extends Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n    isSafari: false,\n    failCount: 0,\n  };\n\n  componentDidMount() {\n    const supported = !!window.PublicKeyCredential;\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    const isSafari =\n      navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n\n    if (isSafari) {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        deviceFailure: 'safari: requires interaction',\n        isSafari,\n        hasBeenTapped: false,\n      });\n    }\n\n    if (supported && !isSafari) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  getU2FResponse(data) {\n    if (!data.response) {\n      return JSON.stringify(data);\n    }\n\n    if (this.props.flowMode === 'sign') {\n      const authenticatorData = {\n        keyHandle: data.id,\n        clientData: bufferToBase64url(data.response.clientDataJSON),\n        signatureData: bufferToBase64url(data.response.signature),\n        authenticatorData: bufferToBase64url(data.response.authenticatorData),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n    if (this.props.flowMode === 'enroll') {\n      const authenticatorData = {\n        id: data.id,\n        rawId: bufferToBase64url(data.rawId),\n        response: {\n          attestationObject: bufferToBase64url(data.response.attestationObject),\n          clientDataJSON: bufferToBase64url(data.response.clientDataJSON),\n        },\n        type: bufferToBase64url(data.type),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n\n    throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = this.getU2FResponse(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n          failCount: this.state.failCount + 1,\n        });\n      });\n  }\n\n  webAuthnSignIn(publicKeyCredentialRequestOptions) {\n    const promise = navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  webAuthnRegister(publicKey) {\n    const promise = navigator.credentials.create({\n      publicKey,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  invokeU2fFlow() {\n    if (this.props.flowMode === 'sign') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnAuthenticationData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      challenge\n        .then(data => {\n          this.webAuthnSignIn(data);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else if (this.props.flowMode === 'enroll') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnRegisterData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      // challenge contains a PublicKeyCredentialRequestOptions object for webauthn registration\n      challenge\n        .then(data => {\n          this.webAuthnRegister(data.publicKey);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderSafariWebAuthn = () => {\n    return (\n      <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n        {this.props.flowMode === 'enroll'\n          ? t('Enroll with WebAuthn')\n          : t('Sign in with WebAuthn')}\n      </a>\n    );\n  };\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    if (this.state.isSafari && this.state.failCount === 0) {\n      return this.renderSafariWebAuthn();\n    }\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                `[p1:The Sentry server administrator modified the device\n                 registrations.] [p2:You need to remove and re-add the device to continue using\n                 your U2F device. Use a different sign-in method or contact [support] for\n                 assistance.]`,\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure\n            ? this.state.failCount === 0 && this.state.isSafari\n              ? ' loading-dots'\n              : ' device-failure'\n            : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default withOrganization(U2fInterface);\n","import {t} from 'sentry/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = React.ComponentProps<typeof U2fInterface>;\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode?: 'signin' | 'enroll' | 'sudo';\n};\n\nfunction U2fSign({displayMode = 'signin', ...props}: Props) {\n  const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n\n  return (\n    <U2fInterface\n      {...props}\n      silentIfUnsupported={displayMode === 'sudo'}\n      flowMode={flowMode}\n    >\n      <p>{MESSAGES[displayMode] ?? null}</p>\n    </U2fInterface>\n  );\n}\n\nexport default U2fSign;\n","// TODO(epurkhiser): These can't be translated with `t()` because they're an\n// Enum. We should probably just use a regular map\nexport enum ErrorCodes {\n  INVALID_PASSWORD = 'Incorrect password',\n  INVALID_SSO_SESSION = 'Your SSO Session has expired, please reauthenticate',\n  INVALID_ACCESS_CATEGORY = 'Please fill out the access category and reason correctly',\n  NO_AUTHENTICATOR = 'Please add a U2F authenticator to your account',\n  UNKNOWN_ERROR = 'An error ocurred, please try again',\n}\n"],"names":["SuperuserAccessForm","Component","constructor","arguments","_defineProperty","authenticators","error","errorType","showAccessForms","superuserAccessCategory","superuserReason","this","setState","async","api","props","state","disableU2FForSUForm","ConfigStore","suAccessCategory","data","suReason","length","requestPromise","method","handleSuccess","err","handleError","ErrorCodes","isSuperuserModal","window","location","reload","status","responseJSON","detail","code","logout","authLoginPath","encodeURIComponent","href","superuserUrl","__initialData","links","customerDomain","redirectURL","trimEnd","assign","componentDidMount","getAuthenticators","render","handleLogout","_jsx","ThemeAndStyleProvider","children","_jsxs","Form","submitLabel","t","onSubmit","handleSubmit","initialData","extraButton","BackWrapper","Button","type","onClick","handleSubmitCOPS","resetOnError","StyledAlert","showIcon","Hook","name","U2fContainer","displayMode","onTap","handleU2fTap","displayName","_styled","Alert","target","styles","space","withApi","_ref","className","map","auth","id","challenge","U2fSign","challengeData","base64urlToBuffer","baseurl64String","padding","slice","base64String","replace","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","U2fInterface","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","isSafari","failCount","invokeU2fFlow","ref","form","value","JSON","stringify","onTryAgain","flowMode","supportMail","support","renderSafariWebAuthn","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","supported","PublicKeyCredential","navigator","userAgent","includes","getU2FResponse","response","authenticatorData","keyHandle","clientData","clientDataJSON","signatureData","signature","rawId","attestationObject","Error","submitU2fResponse","promise","then","u2fResponse","catch","submit","failure","metaData","Sentry","webAuthnSignIn","publicKeyCredentialRequestOptions","credentials","get","publicKey","webAuthnRegister","create","challengeArray","webAuthnAuthenticationData","cbor","decodeFirst","webAuthnRegisterData","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","renderPrompt","bindChallengeElement","bindResponseElement","withOrganization","MESSAGES","signin","sudo","enroll"],"sourceRoot":""}