{"version":3,"file":"chunks/app_views_settings_project_projectServiceHooks_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHooks.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport Switch from 'sentry/components/switchButton';\nimport Truncate from 'sentry/components/truncate';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, ServiceHook} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype RowProps = {\n  hook: ServiceHook;\n  onToggleActive: () => void;\n  orgId: string;\n  projectId: string;\n};\n\nfunction ServiceHookRow({orgId, projectId, hook, onToggleActive}: RowProps) {\n  return (\n    <FieldGroup\n      label={\n        <Link\n          data-test-id=\"project-service-hook\"\n          to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}\n        >\n          <Truncate value={hook.url} />\n        </Link>\n      }\n      help={\n        <small>\n          {hook.events && hook.events.length !== 0 ? (\n            hook.events.join(', ')\n          ) : (\n            <em>{t('no events configured')}</em>\n          )}\n        </small>\n      }\n    >\n      <Switch isActive={hook.status === 'active'} size=\"lg\" toggle={onToggleActive} />\n    </FieldGroup>\n  );\n}\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  hookList: null | ServiceHook[];\n} & AsyncView['state'];\n\nclass ProjectServiceHooks extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    const projectId = params.projectId;\n    return [['hookList', `/projects/${organization.slug}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = (hook: ServiceHook) => {\n    const {organization, params} = this.props;\n    const {hookList} = this.state;\n    if (!hookList) {\n      return;\n    }\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(\n      `/projects/${organization.slug}/${params.projectId}/hooks/${hook.id}/`,\n      {\n        method: 'PUT',\n        data: {\n          isActive: hook.status !== 'active',\n        },\n        success: data => {\n          clearIndicators();\n          this.setState({\n            hookList: hookList.map(h => {\n              if (h.id === data.id) {\n                return {\n                  ...h,\n                  ...data,\n                };\n              }\n              return h;\n            }),\n          });\n        },\n        error: () => {\n          addErrorMessage(t('Unable to remove application. Please try again.'));\n        },\n      }\n    );\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {organization, params} = this.props;\n\n    return (\n      <Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" showIcon>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList?.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={organization.slug}\n              projectId={params.projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {hookList} = this.state;\n    const body =\n      hookList && hookList.length > 0 ? this.renderResults() : this.renderEmpty();\n\n    const {organization, params} = this.props;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            organization.access.includes('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${organization.slug}/projects/${params.projectId}/hooks/new/`}\n                size=\"sm\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(ProjectServiceHooks);\n"],"names":["AsyncView","AsyncComponent","getTitle","render","_jsx","SentryDocumentTitle","title","this","children","renderComponent","displayName","ServiceHookRow","_ref","orgId","projectId","hook","onToggleActive","FieldGroup","label","Link","to","id","Truncate","value","url","help","events","length","join","t","Switch","isActive","status","size","toggle","ProjectServiceHooks","constructor","arguments","_defineProperty","organization","params","props","hookList","state","addLoadingMessage","api","request","slug","method","data","success","clearIndicators","setState","map","h","error","addErrorMessage","getEndpoints","renderEmpty","EmptyMessage","renderResults","_jsxs","Fragment","PanelHeader","PanelBody","PanelAlert","type","showIcon","bind","renderBody","body","SettingsPageHeader","action","access","includes","Button","priority","icon","IconAdd","isCircled","Panel","withOrganization"],"sourceRoot":""}