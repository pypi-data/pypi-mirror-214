{"version":3,"file":"chunks/app_components_featureFeedback_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/featureFeedback/feedbackModal.tsx","webpack:///./app/components/featureFeedback/index.tsx"],"sourcesContent":["import {Fragment, useCallback, useMemo, useState} from 'react';\nimport {css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {\n  BrowserClient,\n  defaultIntegrations,\n  defaultStackParser,\n  makeFetchTransport,\n} from '@sentry/react';\nimport {Event} from '@sentry/types';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Textarea from 'sentry/components/forms/controls/textarea';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport {Data} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport OrganizationStore from 'sentry/stores/organizationStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {space} from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useProjects from 'sentry/utils/useProjects';\n\nexport const feedbackClient = new BrowserClient({\n  // feedback project under Sentry organization\n  dsn: 'https://3c5ef4e344a04a0694d187a1272e96de@o1.ingest.sentry.io/6356259',\n  transport: makeFetchTransport,\n  stackParser: defaultStackParser,\n  integrations: defaultIntegrations,\n});\n\nconst defaultFeedbackTypes = [\n  t(\"I don't like this feature\"),\n  t('I like this feature'),\n  t('Other reason'),\n];\n\nexport type ChildrenProps<T> = {\n  Body: (props: {\n    children: React.ReactNode;\n    showSelfHostedMessage?: boolean;\n  }) => ReturnType<ModalRenderProps['Body']>;\n  Footer: (props: {\n    onBack?: () => void;\n    onNext?: () => void;\n    primaryDisabledReason?: string;\n    secondaryAction?: React.ReactNode;\n    submitEventData?: Event;\n  }) => ReturnType<ModalRenderProps['Footer']>;\n  Header: (props: {children: React.ReactNode}) => ReturnType<ModalRenderProps['Header']>;\n  onFieldChange: <Field extends keyof T>(field: Field, value: T[Field]) => void;\n  state: T;\n};\n\ntype CustomFeedbackModal<T> = {\n  children: (props: ChildrenProps<T>) => React.ReactNode;\n  featureName: string;\n  initialData: T;\n};\n\ntype DefaultFeedbackModal = {\n  featureName: string;\n  children?: undefined;\n  feedbackTypes?: string[];\n  secondaryAction?: React.ReactNode;\n};\n\nexport type FeedbackModalProps<T extends Data> =\n  | DefaultFeedbackModal\n  | CustomFeedbackModal<T>;\n\nexport function FeedbackModal<T extends Data>({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  ...props\n}: FeedbackModalProps<T> & ModalRenderProps) {\n  const {organization} = useLegacyStore(OrganizationStore);\n  const {projects, initiallyLoaded: projectsLoaded} = useProjects();\n  const location = useLocation();\n\n  const theme = useTheme();\n  const user = ConfigStore.get('user');\n  const isSelfHosted = ConfigStore.get('isSelfHosted');\n  const [state, setState] = useState<T>(\n    props.children === undefined\n      ? ({subject: undefined, additionalInfo: undefined} as unknown as T)\n      : props.initialData\n  );\n  const isScreenSmall = useMedia(`(max-width: ${theme.breakpoints.small})`);\n\n  const project = useMemo(() => {\n    if (projectsLoaded && location.query.project) {\n      return projects.find(p => p.id === location.query.project);\n    }\n    return undefined;\n  }, [projectsLoaded, projects, location.query.project]);\n\n  const handleSubmit = useCallback(\n    (submitEventData?: Event) => {\n      const message = `${props.featureName} feedback by ${user.email}`;\n\n      const commonEventProps: Event = {\n        message,\n        request: {\n          url: window.location.href, // gives the full url (origin + pathname)\n        },\n        extra: {\n          orgFeatures: organization?.features ?? [],\n          orgAccess: organization?.access ?? [],\n          projectFeatures: project?.features ?? [],\n        },\n        tags: {\n          featureName: props.featureName,\n        },\n        user,\n        level: 'info',\n      };\n\n      if (props.children === undefined) {\n        const feedbackTypes = props.feedbackTypes ?? defaultFeedbackTypes;\n        feedbackClient.captureEvent({\n          ...commonEventProps,\n          contexts: {\n            feedback: {\n              additionalInfo: state.additionalInfo?.trim() ? state.additionalInfo : null,\n            },\n          },\n          message: state.additionalInfo?.trim()\n            ? `${message} - ${feedbackTypes[state.subject]} - ${state.additionalInfo}`\n            : `${message} - ${feedbackTypes[state.subject]}`,\n        });\n      } else {\n        feedbackClient.captureEvent({\n          ...commonEventProps,\n          ...(submitEventData ?? {}),\n        });\n      }\n\n      addSuccessMessage(t('Thanks for taking the time to provide us feedback!'));\n      closeModal();\n    },\n    [\n      closeModal,\n      organization?.features,\n      organization?.access,\n      project?.features,\n      user,\n      props,\n      state,\n    ]\n  );\n\n  const ModalHeader = useCallback(\n    ({children: headerChildren}: {children: React.ReactNode}) => {\n      return (\n        <Header closeButton>\n          <h3>{headerChildren}</h3>\n        </Header>\n      );\n    },\n    [Header]\n  );\n\n  const ModalFooter = useCallback(\n    ({\n      onBack,\n      onNext,\n      submitEventData,\n      primaryDisabledReason,\n      secondaryAction,\n    }: Parameters<ChildrenProps<T>['Footer']>[0]) => {\n      return (\n        <Footer>\n          {secondaryAction && (\n            <SecondaryActionWrapper>{secondaryAction}</SecondaryActionWrapper>\n          )}\n          {onBack && (\n            <BackButtonWrapper>\n              <Button onClick={onBack}>{t('Back')}</Button>\n            </BackButtonWrapper>\n          )}\n          <ButtonBar gap={1}>\n            <Button onClick={closeModal}>{t('Cancel')}</Button>\n            <Button\n              priority=\"primary\"\n              title={\n                props.children === undefined\n                  ? !defined(state.subject)\n                    ? t('Required fields must be filled out')\n                    : undefined\n                  : primaryDisabledReason\n              }\n              onClick={onNext ?? (() => handleSubmit(submitEventData))}\n              disabled={\n                props.children === undefined\n                  ? !defined(state.subject)\n                  : defined(primaryDisabledReason)\n              }\n            >\n              {onNext ? t('Next') : isScreenSmall ? t('Submit') : t('Submit Feedback')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      );\n    },\n    [Footer, isScreenSmall, closeModal, handleSubmit, state, props.children]\n  );\n\n  const ModalBody = useCallback(\n    ({\n      children: bodyChildren,\n      showSelfHostedMessage = true,\n    }: Parameters<ChildrenProps<T>['Body']>[0]) => {\n      return (\n        <Body>\n          {bodyChildren}\n          {isSelfHosted && showSelfHostedMessage && (\n            <Alert type=\"info\">\n              {tct(\n                \"You agree that any feedback you submit is subject to Sentry's [privacyPolicy:Privacy Policy] and Sentry may use such feedback without restriction or obligation.\",\n                {\n                  privacyPolicy: <ExternalLink href=\"https://sentry.io/privacy/\" />,\n                }\n              )}\n            </Alert>\n          )}\n        </Body>\n      );\n    },\n    [Body, isSelfHosted]\n  );\n\n  function handleFieldChange<Field extends keyof T>(field: Field, value: T[Field]) {\n    const newState = cloneDeep(state);\n    newState[field] = value;\n    setState(newState);\n  }\n\n  if (props.children === undefined) {\n    const feedbackTypes = props.feedbackTypes ?? defaultFeedbackTypes;\n\n    return (\n      <Fragment>\n        <ModalHeader>{t('Submit Feedback')}</ModalHeader>\n        <ModalBody>\n          <SelectField\n            label={t('Type of feedback')}\n            name=\"subject\"\n            inline={false}\n            options={feedbackTypes.map((feedbackType, index) => ({\n              value: index,\n              label: feedbackType,\n            }))}\n            placeholder={t('Select type of feedback')}\n            value={state.subject}\n            onChange={value => setState({...state, subject: value})}\n            flexibleControlStateSize\n            stacked\n            required\n          />\n          <FieldGroup\n            label={t('Additional feedback')}\n            inline={false}\n            required={false}\n            flexibleControlStateSize\n            stacked\n          >\n            <Textarea\n              name=\"additional-feedback\"\n              value={state.additionalInfo}\n              rows={5}\n              autosize\n              placeholder={t('What did you expect?')}\n              onChange={event =>\n                setState({\n                  ...state,\n                  additionalInfo: event.target.value,\n                })\n              }\n            />\n          </FieldGroup>\n        </ModalBody>\n        <ModalFooter secondaryAction={props?.secondaryAction} />\n      </Fragment>\n    );\n  }\n\n  return (\n    <Fragment>\n      {props.children({\n        Header: ModalHeader,\n        Body: ModalBody,\n        Footer: ModalFooter,\n        onFieldChange: handleFieldChange,\n        state,\n      })}\n    </Fragment>\n  );\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 680px;\n`;\n\nconst BackButtonWrapper = styled('div')`\n  margin-right: ${space(1)};\n  width: 100%;\n`;\n\nconst SecondaryActionWrapper = styled('div')`\n  flex: 1;\n  align-self: center;\n`;\n","import {openModal} from 'sentry/actionCreators/modal';\nimport {Button, ButtonProps} from 'sentry/components/button';\nimport {\n  FeedbackModal,\n  FeedbackModalProps,\n  modalCss,\n} from 'sentry/components/featureFeedback/feedbackModal';\nimport {Data} from 'sentry/components/forms/types';\nimport {IconMegaphone} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\nexport type FeatureFeedbackProps<T extends Data> = FeedbackModalProps<T> & {\n  buttonProps?: Partial<ButtonProps>;\n  secondaryAction?: React.ReactNode;\n};\n\n// Provides a button that, when clicked, opens a modal with a form that,\n// when filled and submitted, will send feedback to Sentry (feedbacks project).\nexport function FeatureFeedback<T extends Data>({\n  buttonProps = {},\n  ...props\n}: FeatureFeedbackProps<T>) {\n  function handleClick(e: React.MouseEvent) {\n    openModal(modalProps => <FeedbackModal {...modalProps} {...props} />, {\n      modalCss,\n    });\n\n    buttonProps.onClick?.(e);\n  }\n\n  return (\n    <Button {...buttonProps} icon={<IconMegaphone />} onClick={handleClick}>\n      {t('Give Feedback')}\n    </Button>\n  );\n}\n"],"names":["feedbackClient","BrowserClient","dsn","transport","makeFetchTransport","stackParser","defaultStackParser","integrations","defaultIntegrations","defaultFeedbackTypes","t","FeedbackModal","_ref","Header","Body","Footer","closeModal","props","organization","useLegacyStore","OrganizationStore","projects","initiallyLoaded","projectsLoaded","useProjects","location","useLocation","theme","useTheme","user","ConfigStore","isSelfHosted","state","setState","useState","undefined","children","subject","additionalInfo","initialData","isScreenSmall","useMedia","breakpoints","small","project","useMemo","query","find","p","id","handleSubmit","useCallback","submitEventData","message","featureName","email","commonEventProps","request","url","window","href","extra","orgFeatures","features","orgAccess","access","projectFeatures","tags","level","feedbackTypes","captureEvent","contexts","feedback","trim","addSuccessMessage","ModalHeader","_ref2","headerChildren","_jsx","closeButton","ModalFooter","_ref3","onBack","onNext","primaryDisabledReason","secondaryAction","_jsxs","SecondaryActionWrapper","BackButtonWrapper","Button","onClick","ButtonBar","gap","priority","title","defined","disabled","ModalBody","_ref4","bodyChildren","showSelfHostedMessage","Alert","type","tct","privacyPolicy","ExternalLink","Fragment","SelectField","label","name","inline","options","map","feedbackType","index","value","placeholder","onChange","flexibleControlStateSize","stacked","required","FieldGroup","Textarea","rows","autosize","event","target","onFieldChange","field","newState","cloneDeep","displayName","modalCss","styles","_styled","space","FeatureFeedback","buttonProps","icon","IconMegaphone","e","openModal","modalProps"],"sourceRoot":""}