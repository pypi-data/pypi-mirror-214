{"version":3,"file":"chunks/app_utils_performance_contexts_pageError_tsx-app_views_starfish_views_spans_spansView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/contexts/pageError.tsx","webpack:///./app/views/starfish/components/chartPanel.tsx","webpack:///./app/views/starfish/views/spans/selectors/actionSelector.tsx","webpack:///./app/views/starfish/views/spans/selectors/domainSelector.tsx","webpack:///./app/views/starfish/views/spans/selectors/spanOperationSelector.tsx","webpack:///./app/views/starfish/utils/zeroFillSeries.tsx","webpack:///./app/views/starfish/views/spans/queries.tsx","webpack:///./app/views/starfish/views/spans/spanTimeCharts.tsx","webpack:///./app/views/starfish/views/spans/spansView.tsx"],"sourcesContent":["import {createContext, useContext, useState} from 'react';\n\nimport {Alert} from 'sentry/components/alert';\n\nconst pageErrorContext = createContext<{\n  setPageError: (error: string | undefined) => void;\n  pageError?: string;\n}>({\n  pageError: undefined,\n  setPageError: (_: string | undefined) => {},\n});\n\nexport function PageErrorProvider({children}: {children: React.ReactNode}) {\n  const [pageError, setPageError] = useState<string | undefined>();\n  return (\n    <pageErrorContext.Provider\n      value={{\n        pageError,\n        setPageError,\n      }}\n    >\n      {children}\n    </pageErrorContext.Provider>\n  );\n}\n\nexport function PageErrorAlert() {\n  const {pageError} = useContext(pageErrorContext);\n  if (!pageError) {\n    return null;\n  }\n\n  return (\n    <Alert type=\"error\" data-test-id=\"page-error-alert\" showIcon>\n      {pageError}\n    </Alert>\n  );\n}\n\nexport const usePageError = () => useContext(pageErrorContext);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  button?: JSX.Element;\n  title?: React.ReactNode;\n};\n\nexport default function ChartPanel({title, children, button}: Props) {\n  return (\n    <Panel>\n      <PanelBody withPadding>\n        {title && (\n          <Header>\n            {title && <ChartLabel>{title}</ChartLabel>}\n            {button}\n          </Header>\n        )}\n        {children}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst ChartLabel = styled('p')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst Header = styled('div')`\n  padding: 0 ${space(1)} 0 0;\n  min-height: 36px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n","import {ReactNode} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {PageFilters} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\ntype Props = {\n  moduleName?: ModuleName;\n  spanCategory?: string;\n  value?: string;\n};\n\nexport function ActionSelector({\n  value = '',\n  moduleName = ModuleName.ALL,\n  spanCategory,\n}: Props) {\n  // TODO: This only returns the top 25 actions. It should either load them all, or paginate, or allow searching\n  //\n  const {selection} = usePageFilters();\n\n  const location = useLocation();\n  const eventView = getEventView(moduleName, selection, spanCategory);\n\n  const useHTTPActions = moduleName === ModuleName.HTTP;\n\n  const {data: actions} = useSpansQuery<[{'span.action': string}]>({\n    eventView,\n    initialData: [],\n    enabled: !useHTTPActions,\n  });\n\n  const options = useHTTPActions\n    ? HTTP_ACTION_OPTIONS\n    : [\n        {value: '', label: 'All'},\n        ...actions.map(datum => ({\n          value: datum['span.action'],\n          label: datum['span.action'],\n        })),\n      ];\n\n  return (\n    <CompactSelect\n      triggerProps={{\n        prefix: LABEL_FOR_MODULE_NAME[moduleName],\n      }}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            'span.action': newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nconst HTTP_ACTION_OPTIONS = [\n  {value: '', label: 'All'},\n  ...['GET', 'POST', 'PUT', 'DELETE'].map(action => ({\n    value: action,\n    label: action,\n  })),\n];\n\nconst LABEL_FOR_MODULE_NAME: {[key in ModuleName]: ReactNode} = {\n  http: t('HTTP Method'),\n  db: t('SQL Command'),\n  none: t('Action'),\n  '': t('Action'),\n};\n\nfunction getEventView(\n  moduleName: ModuleName,\n  pageFilters: PageFilters,\n  spanCategory?: string\n) {\n  const queryConditions: string[] = [];\n  if (moduleName) {\n    queryConditions.push('!span.action:\"\"');\n  }\n  if (spanCategory) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      queryConditions.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      queryConditions.push(`span.category:${spanCategory}`);\n    }\n  }\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['span.action', 'count()'],\n    orderby: '-count',\n    query: queryConditions.join(' '),\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    projects: [1],\n    version: 2,\n  });\n}\n","import {ReactNode} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {PageFilters} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\ntype Props = {\n  moduleName?: ModuleName;\n  spanCategory?: string;\n  value?: string;\n};\n\nexport function DomainSelector({\n  value = '',\n  moduleName = ModuleName.ALL,\n  spanCategory,\n}: Props) {\n  // TODO: This only returns the top 25 domains. It should either load them all, or paginate, or allow searching\n  //\n  const {selection} = usePageFilters();\n\n  const location = useLocation();\n  const eventView = getEventView(moduleName, selection, spanCategory);\n\n  const {data: domains} = useSpansQuery<[{'span.domain': string}]>({\n    eventView,\n    initialData: [],\n  });\n\n  const options = [\n    {value: '', label: 'All'},\n    ...domains.map(datum => ({\n      value: datum['span.domain'],\n      label: datum['span.domain'],\n    })),\n  ];\n\n  return (\n    <CompactSelect\n      triggerProps={{\n        prefix: LABEL_FOR_MODULE_NAME[moduleName],\n      }}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            'span.domain': newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nconst LABEL_FOR_MODULE_NAME: {[key in ModuleName]: ReactNode} = {\n  http: t('Host'),\n  db: t('Table'),\n  none: t('Domain'),\n  '': t('Domain'),\n};\n\nfunction getEventView(\n  moduleName: string,\n  pageFilters: PageFilters,\n  spanCategory?: string\n) {\n  const queryConditions: string[] = [`!span.domain:\"\"`];\n  if (moduleName) {\n    queryConditions.push(`span.module:${moduleName}`);\n  }\n  if (spanCategory) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      queryConditions.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      queryConditions.push(`span.category:${spanCategory}`);\n    }\n  }\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['span.domain', 'count()'],\n    orderby: '-count',\n    query: queryConditions.join(' '),\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    projects: [1],\n    version: 2,\n  });\n}\n","import {browserHistory} from 'react-router';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {PageFilters} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\ntype Props = {\n  value: string;\n  moduleName?: ModuleName;\n  spanCategory?: string;\n};\n\nexport function SpanOperationSelector({\n  value = '',\n  moduleName = ModuleName.ALL,\n  spanCategory,\n}: Props) {\n  // TODO: This only returns the top 25 operations. It should either load them all, or paginate, or allow searching\n  //\n  const {selection} = usePageFilters();\n\n  const location = useLocation();\n  const eventView = getEventView(moduleName, selection, spanCategory);\n\n  const {data: operations} = useSpansQuery<[{'span.op': string}]>({\n    eventView,\n    initialData: [],\n  });\n\n  const options = [\n    {value: '', label: 'All'},\n    ...operations.map(datum => ({\n      value: datum['span.op'],\n      label: datum['span.op'],\n    })),\n  ];\n\n  return (\n    <CompactSelect\n      triggerProps={{prefix: t('Operation')}}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            'span.op': newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nfunction getEventView(\n  moduleName: ModuleName,\n  pageFilters: PageFilters,\n  spanCategory?: string\n) {\n  const queryConditions: string[] = [];\n  if (moduleName) {\n    queryConditions.push(`span.module:${moduleName}`);\n  }\n  if (spanCategory) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      queryConditions.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      queryConditions.push(`span.category:${spanCategory}`);\n    }\n  }\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['span.op', 'count()'],\n    orderby: '-count',\n    query: queryConditions.join(' '),\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    projects: [1],\n    version: 2,\n  });\n}\n","import moment from 'moment';\n\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\n\nexport function zeroFillSeries(\n  series: Series,\n  interval: moment.Duration,\n  startTime?: moment.Moment,\n  endTime?: moment.Moment,\n  zerofillValue?: any\n): Series {\n  if (!series?.data?.length) {\n    return series;\n  }\n  if (!zerofillValue) {\n    zerofillValue = 0;\n  }\n\n  const firstDatum = series.data[0];\n  const lastDatum = series.data[series.data.length - 1];\n  const dateFormat = moment(firstDatum.name).creationData().format?.toString();\n\n  if (!dateFormat) {\n    return series;\n  }\n\n  const newData: SeriesDataUnit[] = [];\n\n  const startTimeNearestInterval =\n    startTime && roundDownToNearest12HourInterval(startTime);\n  const endTimeNearestInterval = endTime && roundDownToNearest12HourInterval(endTime);\n\n  const seriesData = [\n    ...(startTimeNearestInterval &&\n    startTimeNearestInterval.diff(moment(firstDatum.name)) < 0\n      ? [{value: zerofillValue, name: startTimeNearestInterval.format(dateFormat)}]\n      : []),\n    ...series.data,\n    ...(endTimeNearestInterval && endTimeNearestInterval.diff(moment(lastDatum.name)) > 0\n      ? [{value: zerofillValue, name: endTimeNearestInterval.format(dateFormat)}]\n      : []),\n  ];\n\n  let currentDatum, nextDatum, lastSeenDate, nextDate, diff;\n  for (let index = 0; index < seriesData.length - 1; index++) {\n    // Push the first datapoint\n    if (index === 0) {\n      newData.push({\n        ...seriesData[index],\n        name: moment(seriesData[index].name).format(dateFormat),\n      });\n    }\n\n    currentDatum = seriesData[index];\n    nextDatum = seriesData[index + 1];\n\n    lastSeenDate = moment(currentDatum.name);\n    nextDate = moment(nextDatum.name);\n\n    diff = moment.duration(nextDate.diff(lastSeenDate));\n\n    while (diff.asMilliseconds() > interval.asMilliseconds()) {\n      // The gap between the two datapoints is more than the intended interval!\n      // We need to fill 0s\n      lastSeenDate.add(interval);\n\n      newData.push({\n        value: zerofillValue,\n        name: moment(lastSeenDate).format(dateFormat),\n      });\n\n      diff = moment.duration(moment(nextDatum.name).diff(lastSeenDate));\n    }\n\n    // Push the next datapoint\n    newData.push({\n      ...nextDatum,\n      name: moment(nextDatum.name).format(dateFormat),\n    });\n  }\n\n  return {\n    ...series,\n    data: newData,\n  };\n}\n\nfunction roundDownToNearest12HourInterval(time: moment.Moment) {\n  const hour = time.hour();\n  const nearestDay = time.clone().startOf('day');\n  if (hour < 12) {\n    return nearestDay;\n  }\n  return nearestDay.add(12, 'hour');\n}\n","import {unix} from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {NewQuery} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\n\nexport const useErrorRateQuery = (queryString: string) => {\n  const location = useLocation();\n  const pageFilter = usePageFilters();\n\n  const discoverQuery: NewQuery = {\n    id: undefined,\n    name: 'HTTP Module - HTTP error rate',\n    projects: [1],\n    fields: ['http_error_count()'],\n    query: queryString,\n    version: 1,\n    topEvents: '5',\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    interval: getInterval(pageFilter.selection.datetime, 'low'),\n    yAxis: ['http_error_count()'],\n  };\n\n  const eventView = EventView.fromNewQueryWithLocation(discoverQuery, location);\n\n  const result = useSpansQuery<{'http_error_count()': number; interval: number}[]>({\n    eventView,\n    initialData: [],\n  });\n\n  const formattedData = result?.data?.map(entry => {\n    return {\n      interval: unix(entry.interval).format('YYYY-MM-DDTHH:mm:ss'),\n      'http_error_count()': entry['http_error_count()'],\n    };\n  });\n\n  return {...result, formattedData};\n};\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {PageFilters} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {ERRORS_COLOR, P95_COLOR, THROUGHPUT_COLOR} from 'sentry/views/starfish/colours';\nimport Chart, {useSynchronizeCharts} from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {ModuleName, SpanMetricsFields} from 'sentry/views/starfish/types';\nimport formatThroughput from 'sentry/views/starfish/utils/chartValueFormatters/formatThroughput';\nimport {getDateFilters} from 'sentry/views/starfish/utils/getDateFilters';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\nimport {useErrorRateQuery as useErrorCountQuery} from 'sentry/views/starfish/views/spans/queries';\nimport {DataTitles} from 'sentry/views/starfish/views/spans/types';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\nconst {SPAN_SELF_TIME} = SpanMetricsFields;\n\ntype Props = {\n  appliedFilters: AppliedFilters;\n  moduleName: ModuleName;\n  spanCategory?: string;\n};\n\ntype AppliedFilters = {\n  'span.action': string;\n  'span.domain': string;\n  'span.group': string;\n  'span.op': string;\n};\n\ntype ChartProps = {\n  filters: AppliedFilters;\n  moduleName: ModuleName;\n};\n\nfunction getSegmentLabel(span_operation, action, domain) {\n  if (span_operation === 'http.client') {\n    return t('%s requests to %s', action, domain);\n  }\n  if (span_operation === 'db') {\n    return t('%s queries on %s', action, domain);\n  }\n  return span_operation || domain || undefined;\n}\n\nexport function SpanTimeCharts({moduleName, appliedFilters, spanCategory}: Props) {\n  const {selection} = usePageFilters();\n  const location = useLocation();\n\n  const eventView = getEventView(\n    moduleName,\n    location,\n    selection,\n    appliedFilters,\n    spanCategory\n  );\n\n  const {isLoading} = useSpansQuery({\n    eventView,\n    initialData: [],\n  });\n\n  useSynchronizeCharts([!isLoading]);\n\n  const moduleCharts: Record<\n    ModuleName,\n    {Comp: (props: ChartProps) => JSX.Element; title: string}[]\n  > = {\n    [ModuleName.ALL]: [\n      {title: DataTitles.throughput, Comp: ThroughputChart},\n      {title: DataTitles.p95, Comp: DurationChart},\n    ],\n    [ModuleName.DB]: [],\n    [ModuleName.HTTP]: [{title: DataTitles.errorCount, Comp: ErrorChart}],\n    [ModuleName.NONE]: [],\n  };\n\n  const charts = [...moduleCharts[ModuleName.ALL]];\n  if (moduleName !== ModuleName.ALL) {\n    charts.push(...moduleCharts[moduleName]);\n  }\n\n  return (\n    <ChartsContainer>\n      {charts.map(({title, Comp}) => (\n        <ChartsContainerItem key={title}>\n          <ChartPanel title={title}>\n            <Comp moduleName={moduleName} filters={appliedFilters} />\n          </ChartPanel>\n        </ChartsContainerItem>\n      ))}\n    </ChartsContainer>\n  );\n}\n\nfunction ThroughputChart({moduleName, filters}: ChartProps): JSX.Element {\n  const pageFilters = usePageFilters();\n  const location = useLocation();\n  const eventView = getEventView(moduleName, location, pageFilters.selection, filters);\n  const {startTime, endTime} = getDateFilters(pageFilters);\n\n  const label = getSegmentLabel(\n    location.query['span.op'],\n    location.query['span.action'],\n    location.query['span.domain']\n  );\n  const {isLoading, data} = useSpansQuery({\n    eventView,\n    initialData: [],\n  });\n  const dataByGroup = {[label]: data};\n\n  const throughputTimeSeries = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return zeroFillSeries(\n      {\n        seriesName: label ?? 'Throughput',\n        data: groupData.map(datum => ({\n          value: datum['sps()'],\n          name: datum.interval,\n        })),\n      },\n      moment.duration(1, 'day'),\n      startTime,\n      endTime\n    );\n  });\n\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={100}\n      data={throughputTimeSeries}\n      start=\"\"\n      end=\"\"\n      loading={isLoading}\n      utc={false}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '0',\n      }}\n      definedAxisTicks={4}\n      stacked\n      isLineChart\n      chartColors={[THROUGHPUT_COLOR]}\n      tooltipFormatterOptions={{\n        valueFormatter: value => formatThroughput(value),\n      }}\n    />\n  );\n}\n\nfunction DurationChart({moduleName, filters}: ChartProps): JSX.Element {\n  const pageFilters = usePageFilters();\n  const location = useLocation();\n  const eventView = getEventView(moduleName, location, pageFilters.selection, filters);\n  const {startTime, endTime} = getDateFilters(pageFilters);\n\n  const label = getSegmentLabel(\n    location.query['span.op'],\n    location.query['span.action'],\n    location.query['span.domain']\n  );\n\n  const {isLoading, data} = useSpansQuery({\n    eventView,\n    initialData: [],\n  });\n  const dataByGroup = {[label]: data};\n\n  const p95Series = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return zeroFillSeries(\n      {\n        seriesName: label ?? `p95(${SPAN_SELF_TIME})`,\n        data: groupData.map(datum => ({\n          value: datum[`p95(${SPAN_SELF_TIME})`],\n          name: datum.interval,\n        })),\n      },\n      moment.duration(1, 'day'),\n      startTime,\n      endTime\n    );\n  });\n\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={100}\n      data={[...p95Series]}\n      start=\"\"\n      end=\"\"\n      loading={isLoading}\n      utc={false}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '0',\n      }}\n      definedAxisTicks={4}\n      stacked\n      isLineChart\n      chartColors={[P95_COLOR]}\n    />\n  );\n}\n\nfunction ErrorChart({moduleName, filters}: ChartProps): JSX.Element {\n  const query = buildDiscoverQueryConditions(moduleName, filters);\n  const {isLoading, data} = useErrorCountQuery(query);\n\n  const errorRateSeries: Series = {\n    seriesName: DataTitles.errorCount,\n    data: data?.length\n      ? data?.map(entry => ({\n          name: entry.interval,\n          value: entry['http_error_count()'],\n        }))\n      : [],\n  };\n\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={100}\n      data={[errorRateSeries]}\n      start=\"\"\n      end=\"\"\n      loading={isLoading}\n      utc={false}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '0',\n      }}\n      definedAxisTicks={4}\n      stacked\n      isLineChart\n      chartColors={[ERRORS_COLOR]}\n    />\n  );\n}\n\nconst SPAN_FILTER_KEYS = ['span_operation', 'domain', 'action'];\n\nconst getEventView = (\n  moduleName: ModuleName,\n  location: Location,\n  pageFilters: PageFilters,\n  appliedFilters: AppliedFilters,\n  spanCategory?: string\n) => {\n  const query = buildDiscoverQueryConditions(moduleName, appliedFilters, spanCategory);\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      name: '',\n      fields: [''],\n      yAxis: ['sps()', `p50(${SPAN_SELF_TIME})`, `p95(${SPAN_SELF_TIME})`],\n      query,\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      projects: [1],\n      interval: getInterval(pageFilters.datetime, 'low'),\n      version: 2,\n    },\n    location\n  );\n};\n\nconst buildDiscoverQueryConditions = (\n  moduleName: ModuleName,\n  appliedFilters: AppliedFilters,\n  spanCategory?: string\n) => {\n  const result = Object.keys(appliedFilters)\n    .filter(key => SPAN_FILTER_KEYS.includes(key))\n    .filter(key => Boolean(appliedFilters[key]))\n    .map(key => {\n      return `${key}:${appliedFilters[key]}`;\n    });\n\n  if (moduleName !== ModuleName.ALL) {\n    result.push(`span.module:${moduleName}`);\n  }\n\n  if (spanCategory) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      result.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      result.push(`span.category:${spanCategory}`);\n    }\n  }\n\n  return result.join(' ');\n};\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 1;\n`;\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport {space} from 'sentry/styles/space';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {ActionSelector} from 'sentry/views/starfish/views/spans/selectors/actionSelector';\nimport {DomainSelector} from 'sentry/views/starfish/views/spans/selectors/domainSelector';\nimport {SpanOperationSelector} from 'sentry/views/starfish/views/spans/selectors/spanOperationSelector';\nimport {SpanTimeCharts} from 'sentry/views/starfish/views/spans/spanTimeCharts';\n\nimport SpansTable from './spansTable';\n\nconst LIMIT: number = 25;\n\ntype Props = {\n  moduleName?: ModuleName;\n  spanCategory?: string;\n};\n\ntype State = {\n  orderBy: string;\n};\n\ntype Query = {\n  'span.action': string;\n  'span.domain': string;\n  'span.group': string;\n  'span.op': string;\n};\n\nexport default function SpansView(props: Props) {\n  const location = useLocation<Query>();\n  const appliedFilters = location.query;\n  const [state, setState] = useState<State>({orderBy: '-time_spent_percentage'});\n\n  const {orderBy} = state;\n\n  return (\n    <Fragment>\n      <FilterOptionsContainer>\n        <DatePageFilter alignDropdown=\"left\" />\n\n        <SpanOperationSelector\n          moduleName={props.moduleName}\n          value={appliedFilters['span.op'] || ''}\n          spanCategory={props.spanCategory}\n        />\n\n        <DomainSelector\n          moduleName={props.moduleName}\n          value={appliedFilters['span.domain'] || ''}\n          spanCategory={props.spanCategory}\n        />\n\n        <ActionSelector\n          moduleName={props.moduleName}\n          value={appliedFilters['span.action'] || ''}\n          spanCategory={props.spanCategory}\n        />\n      </FilterOptionsContainer>\n\n      <PaddedContainer>\n        <SpanTimeCharts\n          moduleName={props.moduleName || ModuleName.ALL}\n          appliedFilters={appliedFilters}\n          spanCategory={props.spanCategory}\n        />\n      </PaddedContainer>\n\n      <PaddedContainer>\n        <SpansTable\n          moduleName={props.moduleName || ModuleName.ALL}\n          orderBy={orderBy}\n          spanCategory={props.spanCategory}\n          onSetOrderBy={newOrderBy => setState({orderBy: newOrderBy})}\n          limit={LIMIT}\n        />\n      </PaddedContainer>\n    </Fragment>\n  );\n}\n\nconst PaddedContainer = styled('div')`\n  margin: ${space(2)};\n`;\n\nconst FilterOptionsContainer = styled(PaddedContainer)`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n"],"names":["pageErrorContext","createContext","pageError","undefined","setPageError","_","PageErrorProvider","_ref","children","useState","_jsx","Provider","value","PageErrorAlert","useContext","Alert","type","showIcon","displayName","usePageError","ChartPanel","title","button","Panel","_jsxs","PanelBody","withPadding","Header","ChartLabel","_styled","target","p","theme","text","cardTitle","space","ActionSelector","moduleName","ModuleName","spanCategory","selection","usePageFilters","location","useLocation","eventView","pageFilters","queryConditions","push","NULL_SPAN_CATEGORY","EventView","name","fields","orderby","query","join","dataset","DiscoverDatasets","start","datetime","end","range","period","projects","version","getEventView","useHTTPActions","data","actions","useSpansQuery","initialData","enabled","options","HTTP_ACTION_OPTIONS","label","map","datum","CompactSelect","triggerProps","prefix","LABEL_FOR_MODULE_NAME","onChange","newValue","browserHistory","action","http","t","db","none","DomainSelector","domains","SpanOperationSelector","operations","zeroFillSeries","series","interval","startTime","endTime","zerofillValue","length","firstDatum","lastDatum","dateFormat","moment","creationData","format","toString","newData","startTimeNearestInterval","roundDownToNearest12HourInterval","endTimeNearestInterval","seriesData","diff","currentDatum","nextDatum","lastSeenDate","nextDate","index","asMilliseconds","add","time","hour","nearestDay","clone","startOf","useErrorRateQuery","queryString","pageFilter","discoverQuery","id","topEvents","getInterval","yAxis","result","formattedData","entry","unix","SPAN_SELF_TIME","SpanMetricsFields","getSegmentLabel","span_operation","domain","SpanTimeCharts","appliedFilters","isLoading","useSynchronizeCharts","moduleCharts","DataTitles","Comp","ThroughputChart","DurationChart","ErrorChart","charts","ChartsContainer","_ref2","ChartsContainerItem","filters","_ref3","getDateFilters","dataByGroup","throughputTimeSeries","Object","keys","groupName","seriesName","Chart","statsPeriod","height","loading","utc","grid","left","right","top","bottom","definedAxisTicks","stacked","isLineChart","chartColors","THROUGHPUT_COLOR","tooltipFormatterOptions","valueFormatter","formatThroughput","_ref4","p95Series","P95_COLOR","_ref5","buildDiscoverQueryConditions","useErrorCountQuery","errorRateSeries","ERRORS_COLOR","SPAN_FILTER_KEYS","filter","key","includes","Boolean","styles","LIMIT","SpansView","props","state","setState","orderBy","Fragment","FilterOptionsContainer","DatePageFilter","alignDropdown","PaddedContainer","SpansTable","onSetOrderBy","newOrderBy","limit"],"sourceRoot":""}