{"version":3,"file":"chunks/app_views_organizationStats_teamInsights_issues_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mlDAgCA,SAASA,EAAYC,GACnB,GAAe,aAAXA,EACF,OAAOC,MAASC,SAAS,EAAG,KAAKA,SAAS,EAAG,KAAKC,UAGpD,MAAOC,EAAGC,EAAKC,GAAQN,EAAOO,MAAM,KACpC,OAAON,MACJC,SAASG,EAAKC,GACdH,SACL,CAEA,MAAMK,EAAe,CACnB,YAAYC,EAAAA,EAAAA,GAAE,UACd,YAAYA,EAAAA,EAAAA,GAAE,WACd,aAAaA,EAAAA,EAAAA,GAAE,YACf,WAAWA,EAAAA,EAAAA,GAAE,SACb,YAAYA,EAAAA,EAAAA,GAAE,UACd,YAAYA,EAAAA,EAAAA,GAAE,WACd,aAAaA,EAAAA,EAAAA,GAAE,YACf,YAAYA,EAAAA,EAAAA,GAAE,UACd,YAAYA,EAAAA,EAAAA,GAAE,aAGhB,MAAMC,UAAsBC,EAAAA,EAA6BC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,gCAC7B,EAAI,CAE9BC,kBACE,MAAO,IACFC,MAAMD,kBACTE,aAAc,KACdC,mBAAoB,KAExB,CAEAC,eACE,MAAM,aAACC,EAAY,SAAEC,GAAYC,KAAKC,MAEtC,MAAO,CACL,CACE,eACC,UAASH,EAAaI,QAAQH,gBAC/B,CAACI,MAAO,CAACC,MAAO,KAElB,CACE,qBACC,UAASN,EAAaI,QAAQH,2BAGrC,CAEAM,mBAAmBC,GACjB,MAAM,SAACP,GAAYC,KAAKC,MAEpBK,EAAUP,WAAaA,GACzBC,KAAKO,kBAET,CAEAC,gBACE,OAAOR,KAAKS,YACd,CAEAA,aACE,MAAM,aAACX,GAAgBE,KAAKC,OACtB,mBAACL,EAAkB,aAAED,EAAY,QAAEe,GAAWV,KAAKW,MAEnDC,EAAaC,OAAOC,QAAQlB,GAAsB,CAAC,GACtDmB,KAAIC,IAAA,IAAEtC,EAAQuC,GAAMD,EAAA,MAAM,CACzBE,KAAMxC,EACNuC,QACD,IACAE,MAAK,CAACC,EAAGC,IAAM5C,EAAY4C,EAAEH,MAAQzC,EAAY2C,EAAEF,QAEtD,OACEI,EAAAA,EAAAA,IAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,IAACE,EAAY,CAAAD,SAAA,CACVb,IAAWe,EAAAA,EAAAA,IAACC,EAAAA,EAAW,CAACC,OAAO,WAC9BjB,IACAe,EAAAA,EAAAA,IAACG,EAAAA,EAAQ,CACPC,MAAO,CAACF,OAAQ,KAChBG,OAAQ,CAACC,MAAO,EAAGC,IAAK,GACxBC,MAAO,CAACC,YAAa,GACrBC,MAAO,CACLC,KAAM,WACNC,IAAK,EACLC,UAAW,CACTC,cAAc,EACdC,cAAc,EACdC,UAAY/D,GACHQ,EAAaR,IAAWA,IAIrCgE,OAAQ,CACN,CACEC,YAAYxD,EAAAA,EAAAA,GAAE,qBACdyD,QAAQ,EACRC,KAAMjC,EACNkC,eAAgB,aAM1BrB,EAAAA,EAAAA,IAACsB,EAAgB,CACfC,SAAUrD,GAAwC,IAAxBA,EAAasD,OACvCC,cAAc/D,EAAAA,EAAAA,GAAE,iDAChBgE,QAAS,EACPhE,EAAAA,EAAAA,GAAE,kBACFsC,EAAAA,EAAAA,IAAC2B,EAAY,CAAA7B,UAAepC,EAAAA,EAAAA,GAAE,WAAZ,WAClBsC,EAAAA,EAAAA,IAAC2B,EAAY,CAAA7B,UAAcpC,EAAAA,EAAAA,GAAE,UAAX,UAClBmC,EAAAA,EAAAA,IAAC8B,EAAY,CAAA7B,SAAA,EACVpC,EAAAA,EAAAA,GAAE,OAAO,KAACsC,EAAAA,EAAAA,IAAC4B,EAAAA,GAAS,CAACC,UAAU,OAAOC,KAAK,KAAKC,MAAM,cADvC,QAIpBC,UAAW/C,EAAQa,SAElB5B,GAAcoB,KAAI2C,IACjB,MAAM,MAACC,IAASC,EAAAA,EAAAA,IAASF,EAAO5D,GAAc+D,UAAU,GAExD,OACEvC,EAAAA,EAAAA,IAACwC,EAAAA,SAAQ,CAAAvC,SAAA,EACPD,EAAAA,EAAAA,IAACyC,EAAqB,CAAAxC,SAAA,EACpBE,EAAAA,EAAAA,IAACuC,EAAsB,CACrBC,aAAW,EACXC,UAAQ,EACRC,WAAY,GACZC,QAASV,EAAMU,WAEjB3C,EAAAA,EAAAA,IAAC4C,EAAa,CAAA9C,UACZE,EAAAA,EAAAA,IAAC6C,EAAAA,EAAI,CACHC,GAAI,CACFC,SAAW,kBAAiB1E,EAAaI,eAAewD,EAAMe,OAC9DlD,SAEDoC,UAIPlC,EAAAA,EAAAA,IAAC2B,EAAY,CAAA7B,UACXE,EAAAA,EAAAA,IAACiD,EAAAA,EAAK,CAACzD,MAAOyC,EAAMiB,WAEtBlD,EAAAA,EAAAA,IAAC2B,EAAY,CAAA7B,UACXE,EAAAA,EAAAA,IAACiD,EAAAA,EAAK,CAACzD,MAAOyC,EAAMkB,eAEtBnD,EAAAA,EAAAA,IAAC2B,EAAY,CAAA7B,UACXE,EAAAA,EAAAA,IAACoD,EAAAA,EAAS,CAACC,KAAMpB,EAAMqB,gBAzBZrB,EAAMe,GA2BV,QAMvB,EAGF,UAEMjD,GAAewD,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,YACrBE,EAAAA,EAAAA,GAAM,GAAE,KAAIA,EAAAA,EAAAA,GAAM,GAAE,OAAMA,EAAAA,EAAAA,GAAM,GAAE,6BAClBC,GAAKA,EAAEC,MAAMC,QAAM,KAG1CtC,GAAmBiC,EAAAA,EAAAA,GAAOM,EAAAA,EAAU,CAAAL,OAAA,YAAjBD,CAAkB,yGAK5BG,GAAKA,EAAEC,MAAMG,gBAAc,iCAI3BL,EAAAA,EAAAA,GAAM,GAAE,KAAIA,EAAAA,EAAAA,GAAM,GAAE,MAG/BC,GACAA,EAAEnC,UACFwC,EAAAA,EAAAA,IAAG,kCAEiBN,EAAAA,EAAAA,GAAM,GAAE,UAE3B,KAGC9B,GAAe4B,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,YAAbD,CAAc,CAAA9D,KAAA,UAAAuE,OAAA,6DAM7B1B,GAAwBiB,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,EAC1BG,GAAKA,EAAEC,MAAMM,kBAAgB,qCAK3BrB,GAAgBW,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,EAClBG,GAAKA,EAAEC,MAAMM,kBAAgB,KAG3B1B,GAAyBgB,EAAAA,EAAAA,GAAOW,EAAAA,EAAY,CAAAV,OAAA,YAAnBD,CAAoB,wDAGjCE,EAAAA,EAAAA,GAAM,GAAE,4B,2TC9L1B,MAAMU,EAAO,CAAC,UAAW,UAAW,WAAY,YAAa,YAAa,MAAO,SAEjF,MAAMC,UAA4BxG,EAAAA,EAA6BC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,gCACnC,EAAI,CAE9BC,kBACE,MAAO,IACFC,MAAMD,kBACTqG,gBAAiB,KAErB,CAEAjG,eACE,MAAM,aAACC,EAAY,MAAEiG,EAAK,IAAEC,EAAG,OAAEC,EAAM,IAAEC,EAAG,SAAEnG,EAAQ,SAAEoG,EAAQ,YAAEC,GAChEpG,KAAKC,MACDoG,EAAW,CAACN,QAAOC,MAAKC,SAAQC,OAEtC,MAAO,CACL,CACE,kBACC,UAASpG,EAAaI,QAAQH,qBAC/B,CACEI,MAAO,KACFmG,EAAAA,EAAAA,IAAwBD,GAC3BF,WACAC,iBAKV,CAEA/F,mBAAmBC,GACjB,MAAM,MAACyF,EAAK,IAAEC,EAAG,OAAEC,EAAM,IAAEC,EAAG,SAAEnG,EAAQ,SAAEwG,EAAQ,YAAEH,GAAepG,KAAKC,MAGtEK,EAAUyF,QAAUA,GACpBzF,EAAU0F,MAAQA,GAClB1F,EAAU2F,SAAWA,GACrB3F,EAAU4F,MAAQA,GAClB5F,EAAUP,WAAaA,GACvBO,EAAU8F,cAAgBA,GACzBI,IAAQlG,EAAUiG,SAAUA,IAE7BvG,KAAKO,kBAET,CAEAC,gBACE,OAAOR,KAAKS,YACd,CAEAA,aACE,MAAM,QAACC,GAAWV,KAAKW,MACjBmF,EAAkB9F,KAAKW,MAAMmF,iBAAmB,CAAC,GACjD,SAACS,EAAQ,SAAEJ,GAAYnG,KAAKC,MAE5BwG,EAA2D,CAAC,EAE5DC,EAA8C,CAAC,EAGrD,IAAK,MAAOC,EAAW7F,KAAYD,OAAOC,QAAQgF,GAEhD,IAAK,MAAOpH,EAAQkI,KAAW/F,OAAOC,QAAQA,GAAU,CACjD4F,EAAcC,KACjBD,EAAcC,GAAa,CACzBE,QAAS,EACTC,QAAS,EACTC,SAAU,EACVC,UAAW,EACXC,UAAW,EACXC,IAAK,EACLC,MAAO,IAIX,IAAK,MAAMC,KAAOxB,EAChBc,EAAcC,GAAWS,IAAQR,EAAOQ,GAGrCX,EAAiBE,KACpBF,EAAiBE,GAAa,CAAC,QAGWU,IAAxCZ,EAAiBE,GAAWjI,GAC9B+H,EAAiBE,GAAWjI,GAAUkI,EAAOO,MAE7CV,EAAiBE,GAAWjI,IAAWkI,EAAOO,KAElD,CAGF,MAAMG,EAAmBzG,OAAOC,QAAQ4F,GACrC3F,KAAIC,IAAA,IAAE2F,GAAW,MAACQ,IAAOnG,EAAA,MAAM,CAAC2F,YAAWQ,QAAM,IACjDhG,MAAK,CAACC,EAAGC,IAAMA,EAAE8F,MAAQ/F,EAAE+F,QAExBI,EAAY1G,OAAO+E,KAAKa,GAAkB1F,KAC9C,CAAC4F,EAAWa,KAAG,CACb7E,WAAY8E,EAAAA,EAAAA,QAAsBd,IAAYzG,MAAQyG,EACtD9D,MAAM6E,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,IAA8BlB,EAAiBE,KACrEiB,kBAAmB,IACnBC,eAAsB,IAANL,EAChB5E,QAAQ,EACRE,eAAgB,SAIpB,OACExB,EAAAA,EAAAA,IAACwC,EAAAA,SAAQ,CAAAvC,SAAA,EACPD,EAAAA,EAAAA,IAACwG,GAAkB,CAAAvG,SAAA,CAChBb,IAAWe,EAAAA,EAAAA,IAACC,EAAAA,EAAW,CAACC,OAAO,WAC9BjB,IACAe,EAAAA,EAAAA,IAACG,EAAAA,EAAQ,CACPC,MAAO,CAACF,OAAQ,KAChBoG,SAAO,EACPC,iBAAe,EACfC,cAAY,EACZnG,OAAQ,CAACC,MAAO,EAAGC,IAAK,GACxBG,OAAO+F,EAAAA,EAAAA,MACPjG,MAAO,CAACC,YAAa,GACrBQ,OAAQ6E,QAId9F,EAAAA,EAAAA,IAAC0G,EAAAA,EAAa,CAACC,MAAOd,EAAiBrE,OAAO1B,SAC3C8G,IAAA,IAAC,WAACC,EAAU,eAAEC,GAAeF,EAAA,OAC5B/G,EAAAA,EAAAA,IAACwC,EAAAA,SAAQ,CAAAvC,SAAA,EACPE,EAAAA,EAAAA,IAACsB,GAAgB,CACfyF,WAAYrC,EAASlD,OACrBE,QAAS,EACPhE,EAAAA,EAAAA,GAAE,cACCgH,EAASpF,KAAI0H,IACdhH,EAAAA,EAAAA,IAACiH,GAAU,CAAAnH,SAAekH,GAATA,MAEnBnH,EAAAA,EAAAA,IAACoH,GAAU,CAAAnH,SAAA,EACRpC,EAAAA,EAAAA,GAAE,SAAS,KAACsC,EAAAA,EAAAA,IAAC4B,EAAAA,GAAS,CAACC,UAAU,OAAOC,KAAK,KAAKC,MAAM,cAD3C,UAIlBC,UAAW/C,EAAQa,SAElB+F,EAAiBvG,KAAI,CAAA4H,EAAcnB,KAAQ,IAArB,UAACb,GAAUgC,EAChC,MAAMvE,EAAUmC,EAASqC,MAAKzD,GAAKA,EAAEV,KAAOkC,IAE5C,OAAIa,GAAOqB,EAAAA,IAAmBP,EACrB,MAIPhH,EAAAA,EAAAA,IAACwC,EAAAA,SAAQ,CAAAvC,SAAA,EACPE,EAAAA,EAAAA,IAACqH,EAAAA,EAAqB,CAAAvH,SACnB6C,IAAW3C,EAAAA,EAAAA,IAACkE,EAAAA,EAAY,CAACxB,WAAY,GAAIC,QAASA,MAEpD+B,EAASpF,KAAI0H,IACZhH,EAAAA,EAAAA,IAACiH,GAAU,CAAAnH,SACRmF,EAAcC,GAAW8B,IADXA,MAInBhH,EAAAA,EAAAA,IAACiH,GAAU,CAAAnH,SAAEmF,EAAcC,GAAWQ,UATzBR,EAUJ,OAIfjG,GAAW6H,IACJ,MAKrB,EAGF,UAEM/G,GAAewD,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,YACrBE,EAAAA,EAAAA,GAAM,GAAE,KAAIA,EAAAA,EAAAA,GAAM,GAAE,OAAMA,EAAAA,EAAAA,GAAM,GAAE,KAGzC4C,IAAqB9C,EAAAA,EAAAA,GAAOxD,EAAY,CAAAyD,OAAA,aAAnBD,CAAoB,4BAClBG,GAAKA,EAAEC,MAAMC,QAAM,KAG1CtC,IAAmBiC,EAAAA,EAAAA,GAAOM,EAAAA,EAAU,CAAAL,OAAA,aAAjBD,CAAkB,8BACZG,GAAK,SAAS4D,OAAO5D,EAAEqD,aAAW,qBAClDrD,GAAKA,EAAEC,MAAMG,gBAAc,gFAO3BL,EAAAA,EAAAA,GAAM,GAAE,KAAIA,EAAAA,EAAAA,GAAM,GAAE,MAI7BwD,IAAa1D,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,CAAA9D,KAAA,SAAAuE,OAAA,uD,uCCvNhC,MAAMuD,WAA2B3J,EAAAA,EAA6BC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,gCAClC,EAAI,CAE9BC,kBACE,MAAO,IACFC,MAAMD,kBACTwJ,eAAgB,KAEpB,CAEApJ,eACE,MAAM,aAACC,EAAY,MAAEiG,EAAK,IAAEC,EAAG,OAAEC,EAAM,IAAEC,EAAG,SAAEnG,EAAQ,YAAEqG,GAAepG,KAAKC,MACtEoG,EAAW,CAACN,QAAOC,MAAKC,SAAQC,OAEtC,MAAO,CACL,CACE,iBACC,UAASpG,EAAaI,QAAQH,wBAC/B,CACEI,MAAO,KACFmG,EAAAA,EAAAA,IAAwBD,GAC3BD,iBAKV,CAEA/F,mBAAmBC,GACjB,MAAM,MAACyF,EAAK,IAAEC,EAAG,OAAEC,EAAM,IAAEC,EAAG,SAAEnG,EAAQ,YAAEqG,GAAepG,KAAKC,MAG5DK,EAAUyF,QAAUA,GACpBzF,EAAU0F,MAAQA,GAClB1F,EAAU2F,SAAWA,GACrB3F,EAAU4F,MAAQA,GAClB5F,EAAUP,WAAaA,GACvBO,EAAU8F,cAAgBA,GAE1BpG,KAAKO,kBAET,CAEAC,gBACE,OACEiB,EAAAA,EAAAA,IAACD,GAAY,CAAAD,UACXE,EAAAA,EAAAA,IAACyH,EAAAA,EAAgB,KAGvB,CAEAzI,aACE,MAAM,eAACwI,GAAkBjJ,KAAKW,MACxBkC,EAAOhC,OAAOC,QAAQmI,GAAkB,CAAC,GAAGlI,KAAIC,IAAA,IAAEtC,GAAQ,IAACyK,IAAKnI,EAAA,MAAM,CAC1EC,MAAOkI,EACPjI,KAAM,IAAIkI,KAAK1K,GAAQ2K,UACxB,IACKzI,GAAa8G,EAAAA,EAAAA,IAAgB7E,GAEnC,OACEpB,EAAAA,EAAAA,IAACD,GAAY,CAAAD,UACXE,EAAAA,EAAAA,IAACG,EAAAA,EAAQ,CACPC,MAAO,CAACF,OAAQ,KAChBqG,iBAAe,EACfC,cAAY,EACZhC,OAAO,KACPqD,QAAS,CACPC,eAAiBtI,IAAkBuI,EAAAA,GAAAA,IAAYvI,EAAO,IAExDgB,MAAO,CAELC,YAAa,MACbI,UAAW,CACTG,UAAYxB,GACI,IAAVA,EACK,IAGFuI,EAAAA,GAAAA,IAAYvI,EAAO,GAAG,GAAM,KAIzCa,OAAQ,CAACC,MAAO,EAAGC,IAAK,GACxBG,OAAO+F,EAAAA,EAAAA,MACPxF,OAAQ,CACN,CACEC,YAAYxD,EAAAA,EAAAA,GAAE,sBACd0D,KAAMjC,EACNgC,QAAQ,EACRE,eAAgB,UAM5B,EAGF,YAEMtB,IAAewD,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,YACrBE,EAAAA,EAAAA,GAAM,GAAE,KAAIA,EAAAA,EAAAA,GAAM,GAAE,OAAMA,EAAAA,EAAAA,GAAM,GAAE,K,kFC3FxC,SAASuE,GAAoBzI,GASN,IATO,aACnClB,EAAY,SACZC,EAAQ,SACRwG,EAAQ,MACRR,EAAK,IACLC,EAAG,OACHC,EAAM,IACNC,EAAG,YACHE,GAC0BpF,EAC1B,MACE6B,KAAM6G,EAAe,CAAC,EAAC,UACvBjG,EAAS,QACTkG,EAAO,QACPC,IACEC,EAAAA,GAAAA,IACF,CACG,UAAS/J,EAAaI,QAAQH,2BAC/B,CACEI,MAAO,KACFmG,EAAAA,EAAAA,IAAwB,CAACP,QAAOC,MAAKC,SAAQC,QAChDE,iBAIN,CAAC0D,UAAW,IAGd,SAASC,EAAmBpD,GAC1B,MAAM7F,EAAUD,OAAOmJ,OAAON,IAAe/C,IAAc,CAAC,GACtDQ,EAAQrG,EAAQmJ,QAAO,CAACC,EAAKC,IAAYD,EAAMC,EAAQC,YAAY,GAEzE,OAAOC,KAAKC,MAAMnD,EAAQrG,EAAQmC,OACpC,CAEA,MAAMyD,EAGF,CAAC,EACL,IAAK,MAAMC,KAAa9F,OAAO+E,KAAK8D,GAAe,CACjD,MAAMa,EAAYR,EAAmBS,OAAO7D,IACtC8D,EAAuB5J,OAAOmJ,OAAON,IAAe/C,IAAc,CAAC,GACnE+D,EAAQD,EAAqBA,EAAqBxH,OAAS,IAAImH,YAAc,EAC7EO,GAAiBD,EAAQH,GAAaA,EAC5C7D,EAAcC,GAAa,CACzBA,YACA4D,YACAG,QACAC,cAAeH,OAAOI,MAAMD,GAAiB,EAAIA,EAErD,CAEA,MAAME,EAAiBtE,EACpBxF,KAAIqD,IAAW,CAAEA,UAAS0G,MAAOpE,EAActC,EAAQK,KAAKkG,eAAiB,MAC7ExJ,MAAK,CAACC,EAAGC,IAAMgJ,KAAKU,IAAI1J,EAAEyJ,OAAST,KAAKU,IAAI3J,EAAE0J,SAE3CE,GAAkBC,EAAAA,EAAAA,IAAaJ,GAS/BK,EANUrK,OAAOmJ,OAAON,GAAcyB,SAAQtI,GAClDhC,OAAOC,QAAQ+B,GAAM9B,KACnBsH,IAAA,IAAE3J,GAAQ,WAAC0L,IAAY/B,EAAA,MAAK,CAAC3J,EAAQ0L,EAAW,MAIzBH,QAAO,CAACC,EAAGvB,KAA2B,IAAxBjK,EAAQ0L,GAAWzB,EAK1D,YAJoBtB,IAAhB6C,EAAIxL,KACNwL,EAAIxL,GAAU,GAEhBwL,EAAIxL,IAAW0L,EACRF,CAAG,GACT,CAAC,GAEEtJ,GAAa8G,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,IAA8BuD,IAEjE,OAAIvB,GACKlI,EAAAA,EAAAA,IAAC2J,GAAAA,EAAY,CAACC,QAASzB,KAI9BtI,EAAAA,EAAAA,IAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,IAACE,GAAY,CAAAD,SAAA,CACVkC,IAAahC,EAAAA,EAAAA,IAACC,EAAAA,EAAW,CAACC,OAAO,WAChC8B,IACAhC,EAAAA,EAAAA,IAACG,EAAAA,EAAQ,CACPC,MAAO,CAACF,OAAQ,KAChBqG,iBAAe,EACfC,cAAY,EACZnG,OAAQ,CAACC,MAAO,EAAGC,IAAK,GACxBC,MAAO,CAACC,YAAa,GACrBC,OAAO+F,EAAAA,EAAAA,MACPxF,OAAQ,CACN,CACEC,YAAYxD,EAAAA,EAAAA,GAAE,qBACdyD,QAAQ,EACRC,KAAMjC,EACNkC,eAAgB,aAM1BrB,EAAAA,EAAAA,IAAC0G,EAAAA,EAAa,CAACC,MAAO4C,EAAgB/H,OAAO1B,SAC1C+J,IAAA,IAAC,WAAChD,EAAU,eAAEC,GAAe+C,EAAA,OAC5BhK,EAAAA,EAAAA,IAACwC,EAAAA,SAAQ,CAAAvC,SAAA,EACPE,EAAAA,EAAAA,IAACsB,GAAgB,CACfC,QAA6B,IAApBuD,EAAStD,OAClBQ,UAAWA,EACXN,QAAS,EACPhE,EAAAA,EAAAA,GAAE,YACFsC,EAAAA,EAAAA,IAAC2B,GAAY,CAAA7B,UACVgK,EAAAA,EAAAA,IAAI,wBAAyB,CAACtF,YADf,SAGlBxE,EAAAA,EAAAA,IAAC2B,GAAY,CAAA7B,UAAapC,EAAAA,EAAAA,GAAE,UAAV,SAClBsC,EAAAA,EAAAA,IAAC2B,GAAY,CAAA7B,UAAapC,EAAAA,EAAAA,GAAE,WAAV,SAClBoC,SAEDyJ,EAAgBjK,KAAI,CAAAyK,EAAYhE,KAAQ,IAAnB,QAACpD,GAAQoH,EAC7B,MAAMC,EAAS/E,EAActC,EAAQK,KAAO,CAAC,EAE7C,OAAI+C,GAAOqB,EAAAA,IAAmBP,EACrB,MAIPhH,EAAAA,EAAAA,IAACwC,EAAAA,SAAQ,CAAAvC,SAAA,EACPE,EAAAA,EAAAA,IAACqH,EAAAA,EAAqB,CAAAvH,UACpBE,EAAAA,EAAAA,IAACkE,EAAAA,EAAY,CAACxB,WAAY,GAAIC,QAASA,OAGzC3C,EAAAA,EAAAA,IAACiK,GAAY,CAAAnK,SAAEkK,EAAOlB,aACtB9I,EAAAA,EAAAA,IAACiK,GAAY,CAAAnK,SAAEkK,EAAOf,SACtBjJ,EAAAA,EAAAA,IAACiK,GAAY,CAAAnK,UACXD,EAAAA,EAAAA,IAACqK,GAAO,CACNnI,MAC2B,IAAzBiI,EAAOd,cACH,UACAc,EAAOd,cAAgB,EACvB,YACA,cACLpJ,SAAA,EAEAqK,EAAAA,GAAAA,IACCpB,OAAOI,MAAMa,EAAOd,eAAiB,EAAIc,EAAOd,cAChD,IAEFlJ,EAAAA,EAAAA,IAACoK,GAAe,CACdvI,UAAWmI,EAAOd,cAAgB,EAAI,KAAO,OAC7CpH,KAAK,cAvBEa,EAAQK,GA2BZ,OAIfhB,GAAa8E,IACN,MAKrB,CAlKgBkB,GAAoBqC,YAAA,uBAoKpC,MAAMtK,IAAewD,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,YACrBE,EAAAA,EAAAA,GAAM,GAAE,KAAIA,EAAAA,EAAAA,GAAM,GAAE,OAAMA,EAAAA,EAAAA,GAAM,GAAE,6BAClBC,GAAKA,EAAEC,MAAMC,QAAM,KAG1CtC,IAAmBiC,EAAAA,EAAAA,GAAOM,EAAAA,EAAU,CAAAL,OAAA,YAAjBD,CAAkB,sGAK5BG,GAAKA,EAAEC,MAAMG,gBAAc,oCAI3BL,EAAAA,EAAAA,GAAM,GAAE,KAAIA,EAAAA,EAAAA,GAAM,GAAE,MAI7B9B,IAAe4B,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,YAAbD,CAAc,CAAA9D,KAAA,SAAAuE,OAAA,qBAI7BiG,IAAe1G,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,CAAA9D,KAAA,SAAAuE,OAAA,8EAO5BoG,IAAkB7G,EAAAA,EAAAA,GAAO3B,EAAAA,GAAS,CAAA4B,OAAA,YAAhBD,CAAiB,aAC3BE,EAAAA,EAAAA,GAAM,IAAI,KAGlByG,IAAU3G,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,UAClBG,GAAKA,EAAEC,MAAMD,EAAE3B,QAAM,KC/MhC,SAASuI,GAAe/K,GAA4B,IAA3B,SAACgL,EAAQ,OAAEC,GAAcjL,EAChD,MAAMlB,GAAeoM,EAAAA,EAAAA,MACf,MAACC,EAAK,gBAAEC,IAAmBC,EAAAA,EAAAA,GAAS,CAACC,kBAAkB,KAE7DC,EAAAA,EAAAA,GAA4B,uBAAwB,yBAEpD,MAAMpM,EAAQ6L,GAAU7L,OAAS,CAAC,EAC5BqM,EAAmB,8BAA6B1M,EAAaI,OAEnE,IAAIuM,EACFtM,EAAMuM,MAAQC,EAAAA,EAAAA,QAAqBH,GACjCC,IAAgBN,EAAMvD,MAAK8D,GAAQA,EAAKjI,KAAOgI,MACjDA,EAAc,MAEhB,MAAMG,EAAgBH,GAAeN,EAAM,IAAI1H,GACzCoI,EAAcV,EAAMvD,MAAK8D,GAAQA,EAAKjI,KAAOmI,IAG7CrG,EAAWsG,GAAatG,UAAY,GACpCH,EAAcjG,EAAMiG,aAEpB,OAACH,EAAM,MAAEF,EAAK,IAAEC,EAAG,IAAEE,IAAO4G,EAAAA,EAAAA,IAAa3M,GAE/C,OAAqB,IAAjBgM,EAAMlJ,QAENxB,EAAAA,EAAAA,IAACsL,EAAAA,EAAgB,CAACjN,aAAcA,EAAckN,iCAA+B,KAK/E1L,EAAAA,EAAAA,IAACwC,EAAAA,SAAQ,CAAAvC,SAAA,EACPE,EAAAA,EAAAA,IAACwL,EAAAA,EAAmB,CAACtJ,OAAOxE,EAAAA,EAAAA,GAAE,eAAgB+N,QAASpN,EAAaI,QACpEuB,EAAAA,EAAAA,IAAC0L,EAAAA,EAAM,CAACrN,aAAcA,EAAcsN,UAAU,YAE9C9L,EAAAA,EAAAA,IAAC+L,GAAI,CAAA9L,SAAA,EACHE,EAAAA,EAAAA,IAAC6L,EAAAA,EAAiB,CAChBC,iBAAe,EACfvB,SAAUA,EACVC,OAAQA,EACRY,YAAaA,EACbW,mBAAoBpH,KAGpBgG,IAAmB3K,EAAAA,EAAAA,IAACyH,EAAAA,EAAgB,IACrCkD,IACC9K,EAAAA,EAAAA,IAACmM,EAAAA,GAAW,CAACC,WAAS,EAAAnM,SAAA,EACpBE,EAAAA,EAAAA,IAACkM,EAAAA,EAAe,CACdhK,OAAOxE,EAAAA,EAAAA,GAAE,yBACTyO,aAAazO,EAAAA,EAAAA,GACX,iIACAoC,UAEFE,EAAAA,EAAAA,IAACgI,GAAoB,CACnBlD,SAAUA,EACVzG,aAAcA,EACdC,SAAU8M,EAAa3M,KACvBkG,YAAaA,EACbH,OAAQA,EACRF,MAAOA,EACPC,IAAKA,EACLE,IAAKA,OAITzE,EAAAA,EAAAA,IAACkM,EAAAA,EAAe,CACdhK,OAAOxE,EAAAA,EAAAA,GAAE,4BACTyO,aAAazO,EAAAA,EAAAA,GACX,6EACAoC,UAEFE,EAAAA,EAAAA,IAACoE,EAAmB,CAClB/F,aAAcA,EACdyG,SAAUA,EACVxG,SAAU8M,EAAa3M,KACvBkG,YAAaA,EACbH,OAAQA,EACRF,MAAOA,GAAO8H,WACd7H,IAAKA,GAAK6H,WACV7B,SAAUA,EACV7F,SAAU,CAAC,MAAO,YAAa,kBAInC1E,EAAAA,EAAAA,IAACkM,EAAAA,EAAe,CACdhK,OAAOxE,EAAAA,EAAAA,GAAE,kBACTyO,aAAazO,EAAAA,EAAAA,GACX,+KACAoC,UAEFE,EAAAA,EAAAA,IAACoE,EAAmB,CAClB/F,aAAcA,EACdyG,SAAUA,EACVxG,SAAU8M,EAAa3M,KACvBkG,YAAaA,EACbH,OAAQA,EACRF,MAAOA,GAAO8H,WACd7H,IAAKA,GAAK6H,WACV7B,SAAUA,EACV7F,SAAU,CAAC,WAAY,UAAW,gBAItC1E,EAAAA,EAAAA,IAACkM,EAAAA,EAAe,CACdhK,OAAOxE,EAAAA,EAAAA,GAAE,4BACTyO,aAAazO,EAAAA,EAAAA,GAAE,4DAA4DoC,UAE3EE,EAAAA,EAAAA,IAACrC,EAAa,CAACU,aAAcA,EAAcC,SAAU8M,EAAa3M,UAGpEuB,EAAAA,EAAAA,IAACkM,EAAAA,EAAe,CACdhK,OAAOxE,EAAAA,EAAAA,GAAE,sBACTyO,aAAazO,EAAAA,EAAAA,GACV,iEACDoC,UAEFE,EAAAA,EAAAA,IAACuH,GAAkB,CACjBlJ,aAAcA,EACdsG,YAAaA,EACbrG,SAAU8M,EAAa3M,KACvB+F,OAAQA,EACRF,MAAOA,GAAO8H,WACd7H,IAAKA,GAAK6H,WACV7B,SAAUA,cAQ1B,CAlISD,GAAeD,YAAA,kBAoIxB,YAEMuB,IAAOrI,EAAAA,EAAAA,GAAOyI,EAAAA,GAAW,CAAAxI,OAAA,aAAlBD,CAAmB,uBACTG,GAAKA,EAAEC,MAAM0I,YAAYC,QAAM,oB","sources":["webpack:///./app/views/organizationStats/teamInsights/teamIssuesAge.tsx","webpack:///./app/views/organizationStats/teamInsights/teamIssuesBreakdown.tsx","webpack:///./app/views/organizationStats/teamInsights/teamResolutionTime.tsx","webpack:///./app/views/organizationStats/teamInsights/teamUnresolvedIssues.tsx","webpack:///./app/views/organizationStats/teamInsights/issues.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport Count from 'sentry/components/count';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport Link from 'sentry/components/links/link';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Group, Organization} from 'sentry/types';\nimport {getTitle} from 'sentry/utils/events';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  teamSlug: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  oldestIssues: Group[] | null;\n  unresolvedIssueAge: Record<string, number> | null;\n};\n\n/**\n * takes \"< 1 hour\" and returns a datetime of 1 hour ago\n */\nfunction parseBucket(bucket: string): number {\n  if (bucket === '> 1 year') {\n    return moment().subtract(1, 'y').subtract(1, 'd').valueOf();\n  }\n\n  const [_, num, unit] = bucket.split(' ');\n  return moment()\n    .subtract(num, unit as any)\n    .valueOf();\n}\n\nconst bucketLabels = {\n  '< 1 hour': t('1 hour'),\n  '< 4 hour': t('4 hours'),\n  '< 12 hour': t('12 hours'),\n  '< 1 day': t('1 day'),\n  '< 1 week': t('1 week'),\n  '< 4 week': t('1 month'),\n  '< 24 week': t('6 months'),\n  '< 1 year': t('1 year'),\n  '> 1 year': t('> 1 year'),\n};\n\nclass TeamIssuesAge extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      oldestIssues: null,\n      unresolvedIssueAge: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, teamSlug} = this.props;\n\n    return [\n      [\n        'oldestIssues',\n        `/teams/${organization.slug}/${teamSlug}/issues/old/`,\n        {query: {limit: 7}},\n      ],\n      [\n        'unresolvedIssueAge',\n        `/teams/${organization.slug}/${teamSlug}/unresolved-issue-age/`,\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {teamSlug} = this.props;\n\n    if (prevProps.teamSlug !== teamSlug) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {unresolvedIssueAge, oldestIssues, loading} = this.state;\n\n    const seriesData = Object.entries(unresolvedIssueAge ?? {})\n      .map(([bucket, value]) => ({\n        name: bucket,\n        value,\n      }))\n      .sort((a, b) => parseBucket(b.name) - parseBucket(a.name));\n\n    return (\n      <div>\n        <ChartWrapper>\n          {loading && <Placeholder height=\"200px\" />}\n          {!loading && (\n            <BarChart\n              style={{height: 190}}\n              legend={{right: 3, top: 0}}\n              yAxis={{minInterval: 1}}\n              xAxis={{\n                type: 'category',\n                min: 0,\n                axisLabel: {\n                  showMaxLabel: true,\n                  showMinLabel: true,\n                  formatter: (bucket: string) => {\n                    return bucketLabels[bucket] ?? bucket;\n                  },\n                },\n              }}\n              series={[\n                {\n                  seriesName: t('Unresolved Issues'),\n                  silent: true,\n                  data: seriesData,\n                  barCategoryGap: '5%',\n                },\n              ]}\n            />\n          )}\n        </ChartWrapper>\n        <StyledPanelTable\n          isEmpty={!oldestIssues || oldestIssues.length === 0}\n          emptyMessage={t('No unresolved issues for this team’s projects')}\n          headers={[\n            t('Oldest Issues'),\n            <RightAligned key=\"events\">{t('Events')}</RightAligned>,\n            <RightAligned key=\"users\">{t('Users')}</RightAligned>,\n            <RightAligned key=\"age\">\n              {t('Age')} <IconArrow direction=\"down\" size=\"xs\" color=\"gray300\" />\n            </RightAligned>,\n          ]}\n          isLoading={loading}\n        >\n          {oldestIssues?.map(issue => {\n            const {title} = getTitle(issue, organization?.features, false);\n\n            return (\n              <Fragment key={issue.id}>\n                <ProjectTitleContainer>\n                  <ShadowlessProjectBadge\n                    disableLink\n                    hideName\n                    avatarSize={18}\n                    project={issue.project}\n                  />\n                  <TitleOverflow>\n                    <Link\n                      to={{\n                        pathname: `/organizations/${organization.slug}/issues/${issue.id}/`,\n                      }}\n                    >\n                      {title}\n                    </Link>\n                  </TitleOverflow>\n                </ProjectTitleContainer>\n                <RightAligned>\n                  <Count value={issue.count} />\n                </RightAligned>\n                <RightAligned>\n                  <Count value={issue.userCount} />\n                </RightAligned>\n                <RightAligned>\n                  <TimeSince date={issue.firstSeen} />\n                </RightAligned>\n              </Fragment>\n            );\n          })}\n        </StyledPanelTable>\n      </div>\n    );\n  }\n}\n\nexport default TeamIssuesAge;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.15fr 0.15fr 0.25fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  > * {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isEmpty &&\n    css`\n      & > div:last-child {\n        padding: 48px ${space(2)};\n      }\n    `}\n`;\n\nconst RightAligned = styled('span')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst ProjectTitleContainer = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  display: flex;\n  align-items: center;\n`;\n\nconst TitleOverflow = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst ShadowlessProjectBadge = styled(ProjectBadge)`\n  display: inline-flex;\n  align-items: center;\n  margin-right: ${space(1)};\n\n  * > img {\n    box-shadow: none;\n  }\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart, BarChartSeries} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {barAxisLabel, convertDayValueObjectToSeries, sortSeriesByDay} from './utils';\n\ntype StatusCounts = {\n  total: number;\n  deleted?: number;\n  ignored?: number;\n  new?: number;\n  regressed?: number;\n  resolved?: number;\n  unignored?: number;\n};\n\ntype IssuesBreakdown = Record<string, Record<string, StatusCounts>>;\n\ntype Statuses = keyof Omit<StatusCounts, 'total'>;\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projects: Project[];\n  statuses: Statuses[];\n  teamSlug: string;\n  environment?: string;\n} & DateTimeObject;\n\ntype State = AsyncComponent['state'] & {\n  issuesBreakdown: IssuesBreakdown | null;\n};\n\nconst keys = ['deleted', 'ignored', 'resolved', 'unignored', 'regressed', 'new', 'total'];\n\nclass TeamIssuesBreakdown extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      issuesBreakdown: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, start, end, period, utc, teamSlug, statuses, environment} =\n      this.props;\n    const datetime = {start, end, period, utc};\n\n    return [\n      [\n        'issuesBreakdown',\n        `/teams/${organization.slug}/${teamSlug}/issue-breakdown/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n            statuses,\n            environment,\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {start, end, period, utc, teamSlug, projects, environment} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.teamSlug !== teamSlug ||\n      prevProps.environment !== environment ||\n      !isEqual(prevProps.projects, projects)\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {loading} = this.state;\n    const issuesBreakdown = this.state.issuesBreakdown ?? {};\n    const {projects, statuses} = this.props;\n\n    const allReviewedByDay: Record<string, Record<string, number>> = {};\n    // Total statuses & total reviewed keyed by project ID\n    const projectTotals: Record<string, StatusCounts> = {};\n\n    // The issues breakdown is keyed by projectId\n    for (const [projectId, entries] of Object.entries(issuesBreakdown)) {\n      // Each bucket is 1 day\n      for (const [bucket, counts] of Object.entries(entries)) {\n        if (!projectTotals[projectId]) {\n          projectTotals[projectId] = {\n            deleted: 0,\n            ignored: 0,\n            resolved: 0,\n            unignored: 0,\n            regressed: 0,\n            new: 0,\n            total: 0,\n          };\n        }\n\n        for (const key of keys) {\n          projectTotals[projectId][key] += counts[key];\n        }\n\n        if (!allReviewedByDay[projectId]) {\n          allReviewedByDay[projectId] = {};\n        }\n\n        if (allReviewedByDay[projectId][bucket] === undefined) {\n          allReviewedByDay[projectId][bucket] = counts.total;\n        } else {\n          allReviewedByDay[projectId][bucket] += counts.total;\n        }\n      }\n    }\n\n    const sortedProjectIds = Object.entries(projectTotals)\n      .map(([projectId, {total}]) => ({projectId, total}))\n      .sort((a, b) => b.total - a.total);\n\n    const allSeries = Object.keys(allReviewedByDay).map(\n      (projectId, idx): BarChartSeries => ({\n        seriesName: ProjectsStore.getById(projectId)?.slug ?? projectId,\n        data: sortSeriesByDay(convertDayValueObjectToSeries(allReviewedByDay[projectId])),\n        animationDuration: 500,\n        animationDelay: idx * 500,\n        silent: true,\n        barCategoryGap: '5%',\n      })\n    );\n\n    return (\n      <Fragment>\n        <IssuesChartWrapper>\n          {loading && <Placeholder height=\"200px\" />}\n          {!loading && (\n            <BarChart\n              style={{height: 200}}\n              stacked\n              isGroupedByDate\n              useShortDate\n              legend={{right: 0, top: 0}}\n              xAxis={barAxisLabel()}\n              yAxis={{minInterval: 1}}\n              series={allSeries}\n            />\n          )}\n        </IssuesChartWrapper>\n        <CollapsePanel items={sortedProjectIds.length}>\n          {({isExpanded, showMoreButton}) => (\n            <Fragment>\n              <StyledPanelTable\n                numActions={statuses.length}\n                headers={[\n                  t('Project'),\n                  ...statuses.map(action => (\n                    <AlignRight key={action}>{action}</AlignRight>\n                  )),\n                  <AlignRight key=\"total\">\n                    {t('total')} <IconArrow direction=\"down\" size=\"xs\" color=\"gray300\" />\n                  </AlignRight>,\n                ]}\n                isLoading={loading}\n              >\n                {sortedProjectIds.map(({projectId}, idx) => {\n                  const project = projects.find(p => p.id === projectId);\n\n                  if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                    return null;\n                  }\n\n                  return (\n                    <Fragment key={projectId}>\n                      <ProjectBadgeContainer>\n                        {project && <ProjectBadge avatarSize={18} project={project} />}\n                      </ProjectBadgeContainer>\n                      {statuses.map(action => (\n                        <AlignRight key={action}>\n                          {projectTotals[projectId][action]}\n                        </AlignRight>\n                      ))}\n                      <AlignRight>{projectTotals[projectId].total}</AlignRight>\n                    </Fragment>\n                  );\n                })}\n              </StyledPanelTable>\n              {!loading && showMoreButton}\n            </Fragment>\n          )}\n        </CollapsePanel>\n      </Fragment>\n    );\n  }\n}\n\nexport default TeamIssuesBreakdown;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n`;\n\nconst IssuesChartWrapper = styled(ChartWrapper)`\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)<{numActions: number}>`\n  grid-template-columns: 1fr ${p => ' 0.2fr'.repeat(p.numActions)} 0.2fr;\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n`;\n","import styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {barAxisLabel, sortSeriesByDay} from './utils';\n\ntype TimeToResolution = Record<string, {avg: number; count: number}>;\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  teamSlug: string;\n  environment?: string;\n} & DateTimeObject;\n\ntype State = AsyncComponent['state'] & {\n  resolutionTime: TimeToResolution | null;\n};\n\nclass TeamResolutionTime extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      resolutionTime: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, start, end, period, utc, teamSlug, environment} = this.props;\n    const datetime = {start, end, period, utc};\n\n    return [\n      [\n        'resolutionTime',\n        `/teams/${organization.slug}/${teamSlug}/time-to-resolution/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n            environment,\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {start, end, period, utc, teamSlug, environment} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.teamSlug !== teamSlug ||\n      prevProps.environment !== environment\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return (\n      <ChartWrapper>\n        <LoadingIndicator />\n      </ChartWrapper>\n    );\n  }\n\n  renderBody() {\n    const {resolutionTime} = this.state;\n    const data = Object.entries(resolutionTime ?? {}).map(([bucket, {avg}]) => ({\n      value: avg,\n      name: new Date(bucket).getTime(),\n    }));\n    const seriesData = sortSeriesByDay(data);\n\n    return (\n      <ChartWrapper>\n        <BarChart\n          style={{height: 190}}\n          isGroupedByDate\n          useShortDate\n          period=\"7d\"\n          tooltip={{\n            valueFormatter: (value: number) => getDuration(value, 1),\n          }}\n          yAxis={{\n            // Each yAxis marker will increase by 1 day\n            minInterval: 86400,\n            axisLabel: {\n              formatter: (value: number) => {\n                if (value === 0) {\n                  return '';\n                }\n\n                return getDuration(value, 0, true, true);\n              },\n            },\n          }}\n          legend={{right: 0, top: 0}}\n          xAxis={barAxisLabel()}\n          series={[\n            {\n              seriesName: t('Time to Resolution'),\n              data: seriesData,\n              silent: true,\n              barCategoryGap: '5%',\n            },\n          ]}\n        />\n      </ChartWrapper>\n    );\n  }\n}\n\nexport default TeamResolutionTime;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport LoadingError from 'sentry/components/loadingError';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport type {Organization, Project} from 'sentry/types';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport type {ColorOrAlias} from 'sentry/utils/theme';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {\n  barAxisLabel,\n  convertDayValueObjectToSeries,\n  groupByTrend,\n  sortSeriesByDay,\n} from './utils';\n\ninterface TeamUnresolvedIssuesProps extends DateTimeObject {\n  organization: Organization;\n  projects: Project[];\n  teamSlug: string;\n  environment?: string;\n}\n\ntype UnresolvedCount = {unresolved: number};\ntype ProjectReleaseCount = Record<string, Record<string, UnresolvedCount>>;\n\nexport function TeamUnresolvedIssues({\n  organization,\n  teamSlug,\n  projects,\n  start,\n  end,\n  period,\n  utc,\n  environment,\n}: TeamUnresolvedIssuesProps) {\n  const {\n    data: periodIssues = {},\n    isLoading,\n    isError,\n    refetch,\n  } = useApiQuery<ProjectReleaseCount>(\n    [\n      `/teams/${organization.slug}/${teamSlug}/all-unresolved-issues/`,\n      {\n        query: {\n          ...normalizeDateTimeParams({start, end, period, utc}),\n          environment,\n        },\n      },\n    ],\n    {staleTime: 0}\n  );\n\n  function getTotalUnresolved(projectId: number): number {\n    const entries = Object.values(periodIssues?.[projectId] ?? {});\n    const total = entries.reduce((acc, current) => acc + current.unresolved, 0);\n\n    return Math.round(total / entries.length);\n  }\n\n  const projectTotals: Record<\n    string,\n    {percentChange: number; periodAvg: number; projectId: string; today: number}\n  > = {};\n  for (const projectId of Object.keys(periodIssues)) {\n    const periodAvg = getTotalUnresolved(Number(projectId));\n    const projectPeriodEntries = Object.values(periodIssues?.[projectId] ?? {});\n    const today = projectPeriodEntries[projectPeriodEntries.length - 1]?.unresolved ?? 0;\n    const percentChange = (today - periodAvg) / periodAvg;\n    projectTotals[projectId] = {\n      projectId,\n      periodAvg,\n      today,\n      percentChange: Number.isNaN(percentChange) ? 0 : percentChange,\n    };\n  }\n\n  const sortedProjects = projects\n    .map(project => ({project, trend: projectTotals[project.id]?.percentChange ?? 0}))\n    .sort((a, b) => Math.abs(b.trend) - Math.abs(a.trend));\n\n  const groupedProjects = groupByTrend(sortedProjects);\n\n  // All data will contain all pairs of [day, unresolved_count].\n  const allData = Object.values(periodIssues).flatMap(data =>\n    Object.entries(data).map(\n      ([bucket, {unresolved}]) => [bucket, unresolved] as [string, number]\n    )\n  );\n  // Total by day for all projects\n  const totalByDay = allData.reduce((acc, [bucket, unresolved]) => {\n    if (acc[bucket] === undefined) {\n      acc[bucket] = 0;\n    }\n    acc[bucket] += unresolved;\n    return acc;\n  }, {});\n\n  const seriesData = sortSeriesByDay(convertDayValueObjectToSeries(totalByDay));\n\n  if (isError) {\n    return <LoadingError onRetry={refetch} />;\n  }\n\n  return (\n    <div>\n      <ChartWrapper>\n        {isLoading && <Placeholder height=\"200px\" />}\n        {!isLoading && (\n          <BarChart\n            style={{height: 190}}\n            isGroupedByDate\n            useShortDate\n            legend={{right: 3, top: 0}}\n            yAxis={{minInterval: 1}}\n            xAxis={barAxisLabel()}\n            series={[\n              {\n                seriesName: t('Unresolved Issues'),\n                silent: true,\n                data: seriesData,\n                barCategoryGap: '6%',\n              },\n            ]}\n          />\n        )}\n      </ChartWrapper>\n      <CollapsePanel items={groupedProjects.length}>\n        {({isExpanded, showMoreButton}) => (\n          <Fragment>\n            <StyledPanelTable\n              isEmpty={projects.length === 0}\n              isLoading={isLoading}\n              headers={[\n                t('Project'),\n                <RightAligned key=\"last\">\n                  {tct('Last [period] Average', {period})}\n                </RightAligned>,\n                <RightAligned key=\"curr\">{t('Today')}</RightAligned>,\n                <RightAligned key=\"diff\">{t('Change')}</RightAligned>,\n              ]}\n            >\n              {groupedProjects.map(({project}, idx) => {\n                const totals = projectTotals[project.id] ?? {};\n\n                if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                  return null;\n                }\n\n                return (\n                  <Fragment key={project.id}>\n                    <ProjectBadgeContainer>\n                      <ProjectBadge avatarSize={18} project={project} />\n                    </ProjectBadgeContainer>\n\n                    <ScoreWrapper>{totals.periodAvg}</ScoreWrapper>\n                    <ScoreWrapper>{totals.today}</ScoreWrapper>\n                    <ScoreWrapper>\n                      <SubText\n                        color={\n                          totals.percentChange === 0\n                            ? 'subText'\n                            : totals.percentChange > 0\n                            ? 'errorText'\n                            : 'successText'\n                        }\n                      >\n                        {formatPercentage(\n                          Number.isNaN(totals.percentChange) ? 0 : totals.percentChange,\n                          0\n                        )}\n                        <PaddedIconArrow\n                          direction={totals.percentChange > 0 ? 'up' : 'down'}\n                          size=\"xs\"\n                        />\n                      </SubText>\n                    </ScoreWrapper>\n                  </Fragment>\n                );\n              })}\n            </StyledPanelTable>\n            {!isLoading && showMoreButton}\n          </Fragment>\n        )}\n      </CollapsePanel>\n    </div>\n  );\n}\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.2fr 0.2fr 0.2fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst RightAligned = styled('span')`\n  text-align: right;\n`;\n\nconst ScoreWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  text-align: right;\n`;\n\nconst PaddedIconArrow = styled(IconArrow)`\n  margin: 0 ${space(0.5)};\n`;\n\nconst SubText = styled('div')<{color: ColorOrAlias}>`\n  color: ${p => p.theme[p.color]};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {TeamWithProjects} from 'sentry/types';\nimport localStorage from 'sentry/utils/localStorage';\nimport useRouteAnalyticsEventNames from 'sentry/utils/routeAnalytics/useRouteAnalyticsEventNames';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useTeams} from 'sentry/utils/useTeams';\n\nimport Header from '../header';\n\nimport TeamStatsControls from './controls';\nimport DescriptionCard from './descriptionCard';\nimport TeamIssuesAge from './teamIssuesAge';\nimport TeamIssuesBreakdown from './teamIssuesBreakdown';\nimport TeamResolutionTime from './teamResolutionTime';\nimport {TeamUnresolvedIssues} from './teamUnresolvedIssues';\nimport {dataDatetime} from './utils';\n\ntype Props = RouteComponentProps<{}, {}>;\n\nfunction TeamStatsIssues({location, router}: Props) {\n  const organization = useOrganization();\n  const {teams, initiallyLoaded} = useTeams({provideUserTeams: true});\n\n  useRouteAnalyticsEventNames('team_insights.viewed', 'Team Insights: Viewed');\n\n  const query = location?.query ?? {};\n  const localStorageKey = `teamInsightsSelectedTeamId:${organization.slug}`;\n\n  let localTeamId: string | null | undefined =\n    query.team ?? localStorage.getItem(localStorageKey);\n  if (localTeamId && !teams.find(team => team.id === localTeamId)) {\n    localTeamId = null;\n  }\n  const currentTeamId = localTeamId ?? teams[0]?.id;\n  const currentTeam = teams.find(team => team.id === currentTeamId) as\n    | TeamWithProjects\n    | undefined;\n  const projects = currentTeam?.projects ?? [];\n  const environment = query.environment;\n\n  const {period, start, end, utc} = dataDatetime(query);\n\n  if (teams.length === 0) {\n    return (\n      <NoProjectMessage organization={organization} superuserNeedsToBeProjectMember />\n    );\n  }\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('Team Issues')} orgSlug={organization.slug} />\n      <Header organization={organization} activeTab=\"issues\" />\n\n      <Body>\n        <TeamStatsControls\n          showEnvironment\n          location={location}\n          router={router}\n          currentTeam={currentTeam}\n          currentEnvironment={environment}\n        />\n\n        {!initiallyLoaded && <LoadingIndicator />}\n        {initiallyLoaded && (\n          <Layout.Main fullWidth>\n            <DescriptionCard\n              title={t('All Unresolved Issues')}\n              description={t(\n                'This includes New and Returning issues in the last 7 days as well as those that haven’t been resolved or ignored in the past.'\n              )}\n            >\n              <TeamUnresolvedIssues\n                projects={projects}\n                organization={organization}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start}\n                end={end}\n                utc={utc}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('New and Returning Issues')}\n              description={t(\n                'The new, regressed, and unignored issues that were assigned to your team.'\n              )}\n            >\n              <TeamIssuesBreakdown\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n                statuses={['new', 'regressed', 'unignored']}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Issues Triaged')}\n              description={t(\n                'How many new and returning issues were reviewed by your team each week. Reviewing an issue includes marking as reviewed, resolving, assigning to another team, or deleting.'\n              )}\n            >\n              <TeamIssuesBreakdown\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n                statuses={['resolved', 'ignored', 'deleted']}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Age of Unresolved Issues')}\n              description={t('How long ago since unresolved issues were first created.')}\n            >\n              <TeamIssuesAge organization={organization} teamSlug={currentTeam!.slug} />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Time to Resolution')}\n              description={t(\n                `The mean time it took for issues to be resolved by your team.`\n              )}\n            >\n              <TeamResolutionTime\n                organization={organization}\n                environment={environment}\n                teamSlug={currentTeam!.slug}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n              />\n            </DescriptionCard>\n          </Layout.Main>\n        )}\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default TeamStatsIssues;\n\nconst Body = styled(Layout.Body)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    display: block;\n  }\n`;\n"],"names":["parseBucket","bucket","moment","subtract","valueOf","_","num","unit","split","bucketLabels","t","TeamIssuesAge","AsyncComponent","constructor","arguments","_defineProperty","getDefaultState","super","oldestIssues","unresolvedIssueAge","getEndpoints","organization","teamSlug","this","props","slug","query","limit","componentDidUpdate","prevProps","remountComponent","renderLoading","renderBody","loading","state","seriesData","Object","entries","map","_ref","value","name","sort","a","b","_jsxs","children","ChartWrapper","_jsx","Placeholder","height","BarChart","style","legend","right","top","yAxis","minInterval","xAxis","type","min","axisLabel","showMaxLabel","showMinLabel","formatter","series","seriesName","silent","data","barCategoryGap","StyledPanelTable","isEmpty","length","emptyMessage","headers","RightAligned","IconArrow","direction","size","color","isLoading","issue","title","getTitle","features","Fragment","ProjectTitleContainer","ShadowlessProjectBadge","disableLink","hideName","avatarSize","project","TitleOverflow","Link","to","pathname","id","Count","count","userCount","TimeSince","date","firstSeen","_styled","target","space","p","theme","border","PanelTable","fontSizeMedium","css","styles","overflowEllipsis","ProjectBadge","keys","TeamIssuesBreakdown","issuesBreakdown","start","end","period","utc","statuses","environment","datetime","normalizeDateTimeParams","projects","isEqual","allReviewedByDay","projectTotals","projectId","counts","deleted","ignored","resolved","unignored","regressed","new","total","key","undefined","sortedProjectIds","allSeries","idx","ProjectsStore","sortSeriesByDay","convertDayValueObjectToSeries","animationDuration","animationDelay","IssuesChartWrapper","stacked","isGroupedByDate","useShortDate","barAxisLabel","CollapsePanel","items","_ref2","isExpanded","showMoreButton","numActions","action","AlignRight","_ref3","find","COLLAPSE_COUNT","ProjectBadgeContainer","repeat","TeamResolutionTime","resolutionTime","LoadingIndicator","avg","Date","getTime","tooltip","valueFormatter","getDuration","TeamUnresolvedIssues","periodIssues","isError","refetch","useApiQuery","staleTime","getTotalUnresolved","values","reduce","acc","current","unresolved","Math","round","periodAvg","Number","projectPeriodEntries","today","percentChange","isNaN","sortedProjects","trend","abs","groupedProjects","groupByTrend","totalByDay","flatMap","LoadingError","onRetry","_ref4","tct","_ref5","totals","ScoreWrapper","SubText","formatPercentage","PaddedIconArrow","displayName","TeamStatsIssues","location","router","useOrganization","teams","initiallyLoaded","useTeams","provideUserTeams","useRouteAnalyticsEventNames","localStorageKey","localTeamId","team","localStorage","currentTeamId","currentTeam","dataDatetime","NoProjectMessage","superuserNeedsToBeProjectMember","SentryDocumentTitle","orgSlug","Header","activeTab","Body","TeamStatsControls","showEnvironment","currentEnvironment","Layout","fullWidth","DescriptionCard","description","toString","breakpoints","medium"],"sourceRoot":""}