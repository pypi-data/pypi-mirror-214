{"version":3,"file":"chunks/app_views_settings_projectIssueGrouping_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/projectIssueGrouping.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {GroupingConfigItem} from 'sentry/components/events/groupingInfo';\nimport {Field} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport marked from 'sentry/utils/marked';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/issue-grouping/';\n\nconst groupingConfigField: Field = {\n  name: 'groupingConfig',\n  type: 'select',\n  label: t('Grouping Config'),\n  saveOnBlur: false,\n  saveMessageAlertType: 'info',\n  saveMessage: t(\n    'Changing grouping config will apply to future events only (can take up to a minute).'\n  ),\n  selectionInfoFunction: args => {\n    const {groupingConfigs, value} = args;\n    const selection = groupingConfigs.find(({id}) => id === value);\n    const changelog = selection?.changelog || '';\n    if (!changelog) {\n      return null;\n    }\n    return (\n      <Changelog>\n        <ChangelogTitle>\n          {tct('New in version [version]', {version: selection.id})}:\n        </ChangelogTitle>\n        <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n      </Changelog>\n    );\n  },\n  choices: ({groupingConfigs}) =>\n    groupingConfigs.map(({id, hidden}) => [\n      id.toString(),\n      <GroupingConfigItem key={id} isHidden={hidden}>\n        {id}\n      </GroupingConfigItem>,\n    ]),\n  help: t('Sets the grouping algorithm to be used for new events.'),\n  visible: ({features}) => features.has('set-grouping-config'),\n};\n\nexport const fields: Record<string, Field> = {\n  fingerprintingRules: {\n    name: 'fingerprintingRules',\n    type: 'string',\n    label: t('Fingerprint Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'error.type:MyException -> fingerprint-value\\nstack.function:some_panic_function -> fingerprint-value'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing fingerprint rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to modify the fingerprint rules on the server with custom rules.\n        Rules follow the pattern [pattern]. To learn more about fingerprint rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob -&gt; fingerprint, values</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/fingerprint-rules/\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# force all errors of the same type to have the same fingerprint\nerror.type:DatabaseUnavailable -> system-down\n# force all memory allocation errors to be grouped together\nstack.function:malloc -> memory-allocation-error`}\n        </RuleExample>\n      </Fragment>\n    ),\n    visible: true,\n  },\n  groupingEnhancements: {\n    name: 'groupingEnhancements',\n    type: 'string',\n    label: t('Stack Trace Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'stack.function:raise_an_exception ^-group\\nstack.function:namespace::* +app'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing stack trace rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to enhance the grouping algorithm with custom rules.\n        Rules follow the pattern [pattern]. To learn more about stack trace rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob [v^]?[+-]flag</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/stack-trace-rules/\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# remove all frames above a certain function from grouping\nstack.function:panic_handler ^-group\n# mark all functions following a prefix in-app\nstack.function:mylibrary_* +app`}\n        </RuleExample>\n      </Fragment>\n    ),\n    validate: () => [],\n    visible: true,\n  },\n  groupingConfig: groupingConfigField,\n  secondaryGroupingConfig: {\n    ...groupingConfigField,\n    name: 'secondaryGroupingConfig',\n    label: t('Fallback/Secondary Grouping Config'),\n    help: t(\n      'Sets the secondary grouping algorithm that should be run in addition to avoid creating too many new groups. Controlled by expiration date below.'\n    ),\n    saveMessage: t(\n      'Changing the secondary grouping strategy will affect how many new issues are created.'\n    ),\n  },\n  secondaryGroupingExpiry: {\n    name: 'secondaryGroupingExpiry',\n    type: 'number',\n    label: t('Expiration date of secondary grouping'),\n    help: t(\n      'If this UNIX timestamp is in the past, the secondary grouping configuration stops applying automatically.'\n    ),\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing the expiration date will affect how many new issues are created.'\n    ),\n  },\n  groupingAutoUpdate: {\n    name: 'groupingAutoUpdate',\n    type: 'boolean',\n    label: t('Automatically Update Grouping'),\n    saveOnBlur: false,\n    help: t(\n      'When enabled projects will in the future automatically update to the latest grouping algorithm. Right now this setting does nothing.'\n    ),\n    saveMessage: ({value}) =>\n      value\n        ? t(\n            'Enabling automatic upgrading will take effect on the next incoming event once auto updating has been rolled out.'\n          )\n        : t(\n            'Disabling auto updates will cause you to no longer receive improvements to the grouping algorithm.'\n          ),\n  },\n};\n\nconst RuleDescription = styled('div')`\n  margin-bottom: ${space(1)};\n  margin-top: -${space(1)};\n  margin-right: 36px;\n`;\n\nconst RuleExample = styled('pre')`\n  margin-bottom: ${space(1)};\n  margin-right: 36px;\n`;\n\nconst Changelog = styled('div')`\n  position: relative;\n  top: -1px;\n  margin-bottom: -1px;\n  padding: ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  background: ${p => p.theme.backgroundSecondary};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:last-child {\n    border: 0;\n    border-bottom-left-radius: ${p => p.theme.borderRadius};\n    border-bottom-right-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ChangelogTitle = styled('h3')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(0.75)} !important;\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport {handleXhrErrorResponse} from 'sentry/utils/handleXhrErrorResponse';\nimport marked from 'sentry/utils/marked';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\nconst upgradeGroupingId = 'upgrade-grouping';\n\ntype Props = {\n  api: Client;\n  groupingConfigs: EventGroupingConfig[];\n  location: Location;\n  onUpgrade: () => void;\n  organization: Organization;\n  project: Project;\n  projectId: string;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n  location,\n}: Props) {\n  const hasProjectWriteAccess = organization.access.includes('project:write');\n  const {updateNotes, riskLevel, latestGroupingConfig} = getGroupingChanges(\n    project,\n    groupingConfigs\n  );\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = project.groupingAutoUpdate || !latestGroupingConfig;\n  const priority = riskLevel >= 2 ? 'danger' : 'primary';\n\n  useEffect(() => {\n    if (\n      location.hash !== `#${upgradeGroupingId}` ||\n      noUpdates ||\n      !groupingConfigs ||\n      !hasProjectWriteAccess\n    ) {\n      return;\n    }\n    handleOpenConfirmModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.hash]);\n\n  if (!groupingConfigs) {\n    return null;\n  }\n\n  async function handleConfirmUpgrade() {\n    const newData: Record<string, string | number> = {};\n\n    if (latestGroupingConfig) {\n      const now = Math.floor(new Date().getTime() / 1000);\n      const ninety_days = 3600 * 24 * 90;\n\n      newData.groupingConfig = latestGroupingConfig.id;\n      newData.secondaryGroupingConfig = project.groupingConfig;\n      newData.secondaryGroupingExpiry = now + ninety_days;\n    }\n\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectsStore.onUpdateSuccess(response);\n      onUpgrade();\n    } catch (err) {\n      handleXhrErrorResponse('Unable to upgrade config', err);\n    }\n  }\n\n  function handleOpenConfirmModal() {\n    openConfirmModal({\n      confirmText: t('Upgrade'),\n      priority,\n      onConfirm: handleConfirmUpgrade,\n      message: (\n        <Fragment>\n          <TextBlock>\n            <strong>{t('Upgrade Grouping Strategy')}</strong>\n          </TextBlock>\n          <TextBlock>\n            {t(\n              'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n            )}\n          </TextBlock>\n          <TextBlock>\n            <strong>{t('New Behavior')}</strong>\n            <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n          </TextBlock>\n          <TextBlock>\n            <Alert type={alertType}>{riskNote}</Alert>\n          </TextBlock>\n        </Fragment>\n      ),\n    });\n  }\n\n  function getButtonTitle() {\n    if (project.groupingAutoUpdate) {\n      return t('Disabled because automatic upgrading is enabled');\n    }\n\n    if (!hasProjectWriteAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id={upgradeGroupingId}>\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <FieldGroup\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <div>\n            <Button\n              onClick={handleOpenConfirmModal}\n              disabled={!hasProjectWriteAccess || noUpdates}\n              title={getButtonTitle()}\n              priority={priority}\n            >\n              {t('Upgrade Grouping Strategy')}\n            </Button>\n          </div>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {EventGroupingConfig, Project} from 'sentry/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[]\n): {\n  latestGroupingConfig: EventGroupingConfig | null;\n  riskLevel: number;\n  updateNotes: string;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  return {updateNotes, riskLevel, latestGroupingConfig};\n}\n\nexport function getGroupingRisk(riskLevel: number): {\n  alertType: React.ComponentProps<typeof Alert>['type'];\n  riskNote: React.ReactNode;\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport Feature from 'sentry/components/acl/feature';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {fields} from 'sentry/data/forms/projectIssueGrouping';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n} & AsyncView['state'];\n\nclass ProjectIssueGrouping extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, project} = this.props;\n    return [\n      [\n        'groupingConfigs',\n        `/projects/${organization.slug}/${project.slug}/grouping-configs/`,\n      ],\n    ];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectsStore.onUpdateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs} = this.state;\n    const {organization, project, params, location} = this.props;\n    const endpoint = `/projects/${organization.slug}/${project.slug}/`;\n\n    const access = new Set(organization.access.concat(project.access));\n    const hasAccess = hasEveryAccess(['project:write'], {organization, project});\n\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !hasAccess,\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <PermissionAlert project={project} />\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[\n                fields.groupingConfig,\n                fields.secondaryGroupingConfig,\n                fields.secondaryGroupingExpiry,\n              ]}\n            />\n          </Feature>\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Automatic Grouping Updates')}\n            fields={[fields.groupingAutoUpdate]}\n          />\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n            location={location}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectIssueGrouping;\n"],"names":["route","groupingConfigField","name","type","label","t","saveOnBlur","saveMessageAlertType","saveMessage","selectionInfoFunction","args","groupingConfigs","value","selection","find","_ref","id","changelog","_jsxs","Changelog","children","ChangelogTitle","tct","version","_jsx","dangerouslySetInnerHTML","__html","marked","choices","_ref2","map","_ref3","hidden","toString","GroupingConfigItem","isHidden","help","visible","_ref4","features","has","fields","fingerprintingRules","hideLabel","placeholder","multiline","monospace","autosize","inline","maxRows","formatMessageValue","Fragment","RuleDescription","pattern","docs","ExternalLink","href","RuleExample","groupingEnhancements","validate","groupingConfig","secondaryGroupingConfig","secondaryGroupingExpiry","groupingAutoUpdate","_ref5","_styled","target","space","p","theme","innerBorder","backgroundSecondary","fontSizeMedium","borderRadius","routeName","orgSlug","projectSlug","arguments","length","undefined","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","displayName","permissionAlertText","PermissionAlert","access","project","team","props","Access","hasAccess","Alert","upgradeGroupingId","UpgradeGrouping","organization","projectId","onUpgrade","api","location","hasProjectWriteAccess","includes","updateNotes","riskLevel","latestGroupingConfig","byId","forEach","cfg","latest","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","getGroupingRisk","noUpdates","priority","useEffect","hash","handleOpenConfirmModal","async","handleConfirmUpgrade","newData","now","floor","Date","getTime","ninety_days","addLoadingMessage","response","requestPromise","slug","method","data","clearIndicators","ProjectsStore","err","handleXhrErrorResponse","openConfirmModal","confirmText","onConfirm","message","TextBlock","Panel","PanelHeader","PanelBody","FieldGroup","linebreak","disabled","Button","onClick","ProjectIssueGrouping","constructor","_defineProperty","params","routeTitleGen","getDefaultState","super","getEndpoints","renderBody","state","endpoint","Set","concat","hasEveryAccess","jsonFormProps","additionalFieldProps","SettingsPageHeader","link","Form","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","handleSubmit","JsonForm","Feature","fetchData"],"sourceRoot":""}