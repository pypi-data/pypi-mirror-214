{"version":3,"file":"chunks/app_views_starfish_colours_tsx-app_views_starfish_views_spans_spansTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/starfish/colours.tsx","webpack:///./app/views/starfish/components/tableCells/timeSpentCell.tsx","webpack:///./app/views/starfish/utils/useSpansQuery.tsx","webpack:///./app/views/starfish/queries/useSpanList.tsx","webpack:///./app/views/starfish/views/spans/spansTable.tsx"],"sourcesContent":["import {Component, useContext} from 'react';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\n\nimport useApi from '../useApi';\nimport useOrganization from '../useOrganization';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Appends a raw string to query to be able to sidestep the tokenizer.\n   * @deprecated\n   */\n  forceAppendRawQueryString?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  options?: Omit<Parameters<typeof useQuery>[2], 'initialData'>;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string | string[] | undefined>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationDiscoverEndpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  options?: Omit<Parameters<typeof useQuery>[2], 'initialData'>;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  api: Client;\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n    api: new Client(),\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = getPayload(this.props);\n    const otherAPIPayload = getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {\n      queryBatching,\n      beforeFetch,\n      afterFetch,\n      didFetch,\n      eventView,\n      orgSlug,\n      route,\n      setError,\n    } = this.props;\n    const {api} = this.state;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload, {\n        queryBatching,\n      });\n\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useOrganization({allowNull: true})?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\ntype RetryOptions = {\n  statusCodes: number[];\n  tries: number;\n  baseTimeout?: number;\n  timeoutMultiplier?: number;\n};\n\nconst BASE_TIMEOUT = 200;\nconst TIMEOUT_MULTIPLIER = 2;\nconst wait = duration => new Promise(resolve => setTimeout(resolve, duration));\n\nexport async function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams,\n  options: {\n    queryBatching?: QueryBatching;\n    retry?: RetryOptions;\n  } = {}\n): Promise<[T, string | undefined, ResponseMeta<T> | undefined]> {\n  const {queryBatching, retry} = options;\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, url, {\n      query: params,\n      includeAllArgs: true,\n    });\n  }\n\n  const baseTimeout = retry?.baseTimeout ?? BASE_TIMEOUT;\n  const timeoutMultiplier = retry?.timeoutMultiplier ?? TIMEOUT_MULTIPLIER;\n  const statusCodes = retry?.statusCodes ?? [];\n  const maxTries = retry?.tries ?? 1;\n  let tries = 0;\n  let timeout = 0;\n  let error;\n\n  while (tries < maxTries && (!error || statusCodes.includes(error.status))) {\n    if (timeout > 0) {\n      await wait(timeout);\n    }\n    try {\n      tries++;\n      return await api.requestPromise(url, {\n        method: 'GET',\n        includeAllArgs: true,\n        query: {\n          // marking params as any so as to not cause typescript errors\n          ...(params as any),\n        },\n      });\n    } catch (err) {\n      error = err;\n      timeout = baseTimeout * timeoutMultiplier ** (tries - 1);\n    }\n  }\n  throw error;\n}\n\nfunction getPayload<T, P>(props: Props<T, P>) {\n  const {\n    cursor,\n    limit,\n    noPagination,\n    referrer,\n    getRequestPayload,\n    eventView,\n    location,\n    forceAppendRawQueryString,\n  } = props;\n  const payload = getRequestPayload\n    ? getRequestPayload(props)\n    : eventView.getEventsAPIPayload(location, forceAppendRawQueryString);\n\n  if (cursor) {\n    payload.cursor = cursor;\n  }\n  if (limit) {\n    payload.per_page = limit;\n  }\n  if (noPagination) {\n    payload.noPagination = noPagination;\n  }\n  if (referrer) {\n    payload.referrer = referrer;\n  }\n\n  Object.assign(payload, props.queryExtras ?? {});\n\n  return payload;\n}\n\nexport function useGenericDiscoverQuery<T, P>(props: Props<T, P>) {\n  const api = useApi();\n  const {orgSlug, route, options} = props;\n  const url = `/organizations/${orgSlug}/${route}/`;\n  const apiPayload = getPayload<T, P>(props);\n\n  const res = useQuery<[T, string | undefined, ResponseMeta<T> | undefined], QueryError>(\n    [route, apiPayload],\n    () =>\n      doDiscoverQuery<T>(api, url, apiPayload, {\n        queryBatching: props.queryBatching,\n      }),\n    options\n  );\n\n  return {\n    ...res,\n    data: res.data?.[0] ?? undefined,\n    statusCode: res.data?.[1] ?? undefined,\n    response: res.data?.[2] ?? undefined,\n  };\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype UsePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<UsePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently\n// read-only, although in the future we should switch the code in EventView\n// instead. If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import {CHART_PALETTE} from 'sentry/constants/chartPalette';\n\nexport const THROUGHPUT_COLOR = CHART_PALETTE[0][0];\nexport const P50_COLOR = CHART_PALETTE[3][1];\nexport const P95_COLOR = CHART_PALETTE[3][3];\nexport const ERRORS_COLOR = CHART_PALETTE[5][3];\n","import {Tooltip} from 'sentry/components/tooltip';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport {getTooltip} from 'sentry/views/starfish/views/spans/types';\n\nexport function TimeSpentCell({\n  timeSpentPercentage,\n  totalSpanTime,\n}: {\n  timeSpentPercentage: number;\n  totalSpanTime: number;\n}) {\n  const toolTip = getTooltip('timeSpent', totalSpanTime);\n  const percentage = timeSpentPercentage > 1 ? 1 : timeSpentPercentage;\n  return (\n    <span>\n      <Tooltip isHoverable title={toolTip}>\n        {formatPercentage(percentage)}\n      </Tooltip>\n    </span>\n  );\n}\n","import moment from 'moment';\n\nimport {useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {encodeSort} from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nconst DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ss';\n\n// Setting return type since I'd rather not know if its discover query or not\nexport type UseSpansQueryReturnType<T> = {\n  data: T;\n  isLoading: boolean;\n  pageLinks?: string;\n};\n\nexport function useSpansQuery<T = any[]>({\n  eventView,\n  initialData,\n  limit,\n  enabled,\n  referrer = 'use-spans-query',\n  cursor,\n}: {\n  cursor?: string;\n  enabled?: boolean;\n  eventView?: EventView;\n  initialData?: any;\n  limit?: number;\n  referrer?: string;\n}): UseSpansQueryReturnType<T> {\n  const queryFunction = getQueryFunction({\n    isTimeseriesQuery: (eventView?.yAxis?.length ?? 0) > 0,\n  });\n  if (eventView) {\n    return queryFunction({eventView, initialData, limit, enabled, referrer, cursor});\n  }\n  throw new Error('eventView argument must be defined when Starfish useDiscover is true');\n}\n\nexport function useWrappedDiscoverTimeseriesQuery({\n  eventView,\n  enabled,\n  initialData,\n  referrer,\n  cursor,\n}: {\n  eventView: EventView;\n  cursor?: string;\n  enabled?: boolean;\n  initialData?: any;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isLoading, data} = useGenericDiscoverQuery<\n    {\n      data: any[];\n    },\n    DiscoverQueryProps\n  >({\n    route: 'events-stats',\n    eventView,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...eventView.getEventsAPIPayload(location),\n      yAxis: eventView.yAxis,\n      topEvents: eventView.topEvents,\n      excludeOther: 0,\n      partial: 1,\n      orderby: eventView.sorts?.[0] ? encodeSort(eventView.sorts?.[0]) : undefined,\n      interval: eventView.interval,\n      cursor,\n    }),\n    options: {\n      enabled,\n      refetchOnWindowFocus: false,\n    },\n    referrer,\n  });\n  return {\n    isLoading,\n    data:\n      isLoading && initialData\n        ? initialData\n        : processDiscoverTimeseriesResult(data, eventView),\n  };\n}\n\nexport function useWrappedDiscoverQuery({\n  eventView,\n  initialData,\n  enabled,\n  referrer,\n  limit,\n  cursor,\n}: {\n  eventView: EventView;\n  cursor?: string;\n  enabled?: boolean;\n  initialData?: any;\n  limit?: number;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isLoading, data, pageLinks} = useDiscoverQuery({\n    eventView,\n    orgSlug: organization.slug,\n    location,\n    referrer,\n    cursor,\n    limit,\n    options: {\n      enabled,\n      refetchOnWindowFocus: false,\n    },\n  });\n  return {\n    isLoading,\n    data: isLoading && initialData ? initialData : data?.data,\n    pageLinks,\n  };\n}\n\nfunction getQueryFunction({isTimeseriesQuery}: {isTimeseriesQuery?: boolean}) {\n  if (isTimeseriesQuery) {\n    return useWrappedDiscoverTimeseriesQuery;\n  }\n\n  return useWrappedDiscoverQuery;\n}\n\ntype Interval = {[key: string]: any; interval: string; group?: string};\n\nfunction processDiscoverTimeseriesResult(result, eventView: EventView) {\n  if (!eventView.yAxis) {\n    return [];\n  }\n  let intervals = [] as Interval[];\n  const singleYAxis =\n    eventView.yAxis &&\n    (typeof eventView.yAxis === 'string' || eventView.yAxis.length === 1);\n  const firstYAxis =\n    typeof eventView.yAxis === 'string' ? eventView.yAxis : eventView.yAxis[0];\n\n  if (result.data) {\n    return processSingleDiscoverTimeseriesResult(\n      result,\n      singleYAxis ? firstYAxis : 'count'\n    );\n  }\n  Object.keys(result).forEach(key => {\n    if (result[key].data) {\n      intervals = mergeIntervals(\n        intervals,\n        processSingleDiscoverTimeseriesResult(result[key], singleYAxis ? firstYAxis : key)\n      );\n    } else {\n      Object.keys(result[key]).forEach(innerKey => {\n        if (innerKey !== 'order') {\n          intervals = mergeIntervals(\n            intervals,\n            processSingleDiscoverTimeseriesResult(result[key][innerKey], innerKey, key)\n          );\n        }\n      });\n    }\n  });\n\n  const processed = intervals.map(interval => ({\n    ...interval,\n    interval: moment(parseInt(interval.interval, 10) * 1000).format(DATE_FORMAT),\n  }));\n  return processed;\n}\n\nfunction processSingleDiscoverTimeseriesResult(result, key: string, group?: string) {\n  const intervals = [] as Interval[];\n  result.data.forEach(([timestamp, [{count: value}]]) => {\n    const existingInterval = intervals.find(\n      interval =>\n        interval.interval === timestamp && (group ? interval.group === group : true)\n    );\n    if (existingInterval) {\n      existingInterval[key] = value;\n      return;\n    }\n    intervals.push({\n      interval: timestamp,\n      [key]: value,\n      group,\n    });\n  });\n  return intervals;\n}\n\nfunction mergeIntervals(first: Interval[], second: Interval[]) {\n  const target: Interval[] = JSON.parse(JSON.stringify(first));\n  second.forEach(({interval: timestamp, group, ...rest}) => {\n    const existingInterval = target.find(\n      interval =>\n        interval.interval === timestamp && (group ? interval.group === group : true)\n    );\n    if (existingInterval) {\n      Object.keys(rest).forEach(key => {\n        existingInterval[key] = rest[key];\n      });\n      return;\n    }\n    target.push({interval: timestamp, group, ...rest});\n  });\n  return target;\n}\n","import {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {ModuleName, SpanMetricsFields} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\nconst {SPAN_SELF_TIME} = SpanMetricsFields;\nconst SPAN_FILTER_KEYS = ['span.op', 'span.domain', 'span.action'];\n\nexport type SpanMetrics = {\n  'p95(span.self_time)': number;\n  'percentile_percent_change(span.self_time, 0.95)': number;\n  'span.description': string;\n  'span.domain': string;\n  'span.group': string;\n  'span.op': string;\n  'sps()': number;\n  'sps_percent_change()': number;\n  'sum(span.self_time)': number;\n  'time_spent_percentage()': number;\n};\n\nexport const useSpanList = (\n  moduleName: ModuleName,\n  transaction?: string,\n  spanCategory?: string,\n  orderBy?: string,\n  limit?: number,\n  referrer = 'use-span-list',\n  cursor?: string\n) => {\n  const location = useLocation();\n\n  const eventView = getEventView(\n    moduleName,\n    location,\n    transaction,\n    spanCategory,\n    orderBy\n  );\n\n  // TODO: Add referrer\n  const {isLoading, data, pageLinks} = useSpansQuery<SpanMetrics[]>({\n    eventView,\n    initialData: [],\n    limit,\n    referrer,\n    cursor,\n  });\n\n  return {isLoading, data, pageLinks};\n};\n\nfunction getEventView(\n  moduleName: ModuleName,\n  location: Location,\n  transaction?: string,\n  spanCategory?: string,\n  orderBy?: string\n) {\n  const query = buildEventViewQuery(moduleName, location, transaction, spanCategory)\n    .filter(Boolean)\n    .join(' ');\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      name: '',\n      query,\n      fields: [\n        'span.op',\n        'span.group',\n        'span.description',\n        'span.domain',\n        'sps()',\n        'sps_percent_change()',\n        `sum(${SPAN_SELF_TIME})`,\n        `p95(${SPAN_SELF_TIME})`,\n        'time_spent_percentage()',\n        `percentile_percent_change(${SPAN_SELF_TIME}, 0.95)`,\n      ],\n      orderby: orderBy,\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      projects: [1],\n      version: 2,\n    },\n    omit(location, 'span.category')\n  );\n}\n\nfunction buildEventViewQuery(\n  moduleName: ModuleName,\n  location: Location,\n  transaction?: string,\n  spanCategory?: string\n) {\n  const {query} = location;\n  const result = Object.keys(query)\n    .filter(key => SPAN_FILTER_KEYS.includes(key))\n    .filter(key => Boolean(query[key]))\n    .map(key => {\n      return `${key}:${query[key]}`;\n    });\n\n  if (moduleName !== ModuleName.ALL) {\n    result.push(`span.module:${moduleName}`);\n  }\n\n  if (defined(spanCategory)) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      result.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      result.push(`span.category:${spanCategory}`);\n    }\n  }\n\n  if (transaction) {\n    result.push(`transaction:${transaction}`);\n  }\n\n  return result;\n}\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnHeader,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {TableColumnSort} from 'sentry/views/discover/table/types';\nimport DurationCell from 'sentry/views/starfish/components/tableCells/durationCell';\nimport ThroughputCell from 'sentry/views/starfish/components/tableCells/throughputCell';\nimport {TimeSpentCell} from 'sentry/views/starfish/components/tableCells/timeSpentCell';\nimport {useSpanList} from 'sentry/views/starfish/queries/useSpanList';\nimport {ModuleName, SpanMetricsFields} from 'sentry/views/starfish/types';\nimport {DataTitles} from 'sentry/views/starfish/views/spans/types';\n\nconst SPANS_CURSOR_NAME = 'spansCursor';\n\ntype Props = {\n  moduleName: ModuleName;\n  onSetOrderBy: (orderBy: string) => void;\n  orderBy: string;\n  columnOrder?: TableColumnHeader[];\n  endpoint?: string;\n  limit?: number;\n  spanCategory?: string;\n};\n\nconst {SPAN_SELF_TIME} = SpanMetricsFields;\n\nexport type SpanDataRow = {\n  'p95(span.self_time)': number;\n  'percentile_percent_change(span.self_time, 0.95)': number;\n  'span.description': string;\n  'span.domain': string;\n  'span.group': string;\n  'span.op': string;\n  'sps()': number;\n  'sps_percent_change()': number;\n  'time_spent_percentage()': number;\n};\n\nexport type Keys =\n  | 'span.description'\n  | 'span.op'\n  | 'span.domain'\n  | 'sps()'\n  | 'p95(span.self_time)'\n  | 'sps_percent_change()'\n  | `sum(${typeof SPAN_SELF_TIME})`\n  | 'time_spent_percentage()';\nexport type TableColumnHeader = GridColumnHeader<Keys>;\n\nexport default function SpansTable({\n  moduleName,\n  orderBy,\n  onSetOrderBy,\n  columnOrder,\n  spanCategory,\n  endpoint,\n  limit = 25,\n}: Props) {\n  const location = useLocation();\n  const spansCursor = decodeScalar(location.query?.[SPANS_CURSOR_NAME]);\n  const {isLoading, data, pageLinks} = useSpanList(\n    moduleName ?? ModuleName.ALL,\n    undefined,\n    spanCategory,\n    orderBy,\n    limit,\n    'use-span-list',\n    spansCursor\n  );\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    browserHistory.push({\n      pathname,\n      query: {...query, [SPANS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  return (\n    <Fragment>\n      <GridEditable\n        isLoading={isLoading}\n        data={data}\n        columnOrder={columnOrder ?? getColumns(moduleName)}\n        columnSortBy={\n          orderBy ? [] : [{key: orderBy, order: 'desc'} as TableColumnSort<Keys>]\n        }\n        grid={{\n          renderHeadCell: getRenderHeadCell(orderBy, onSetOrderBy),\n          renderBodyCell: (column, row) => renderBodyCell(column, row, endpoint),\n        }}\n        location={location}\n      />\n      <Pagination pageLinks={pageLinks} onCursor={handleCursor} />\n    </Fragment>\n  );\n}\n\nfunction getRenderHeadCell(orderBy: string, onSetOrderBy: (orderBy: string) => void) {\n  function renderHeadCell(column: TableColumnHeader): React.ReactNode {\n    return (\n      <SortLink\n        align=\"left\"\n        canSort\n        direction={orderBy === column.key ? 'desc' : undefined}\n        onClick={() => {\n          onSetOrderBy(`${column.key}`);\n        }}\n        title={column.name}\n        generateSortLink={() => {\n          return {\n            ...location,\n          };\n        }}\n      />\n    );\n  }\n\n  return renderHeadCell;\n}\n\nfunction renderBodyCell(\n  column: TableColumnHeader,\n  row: SpanDataRow,\n  endpoint?: string\n): React.ReactNode {\n  if (column.key === 'span.description') {\n    return (\n      <OverflowEllipsisTextContainer>\n        {row['span.group'] ? (\n          <Link\n            to={`/starfish/span/${row['span.group']}${\n              endpoint ? `?${urlEncode({endpoint})}` : ''\n            }`}\n          >\n            {row['span.description'] || '<null>'}\n          </Link>\n        ) : (\n          row['span.description'] || '<null>'\n        )}\n      </OverflowEllipsisTextContainer>\n    );\n  }\n\n  if (column.key === 'time_spent_percentage()') {\n    return (\n      <TimeSpentCell\n        timeSpentPercentage={row['time_spent_percentage()']}\n        totalSpanTime={row[`sum(${SPAN_SELF_TIME})`]}\n      />\n    );\n  }\n\n  if (column.key === 'sps()') {\n    return (\n      <ThroughputCell\n        throughputPerSecond={row['sps()']}\n        delta={row['sps_percent_change()']}\n      />\n    );\n  }\n\n  if (column.key === 'p95(span.self_time)') {\n    return (\n      <DurationCell\n        milliseconds={row['p95(span.self_time)']}\n        delta={row['percentile_percent_change(span.self_time, 0.95)']}\n      />\n    );\n  }\n\n  return row[column.key];\n}\n\nfunction getDomainHeader(moduleName: ModuleName) {\n  if (moduleName === ModuleName.HTTP) {\n    return 'Host';\n  }\n  if (moduleName === ModuleName.DB) {\n    return 'Table';\n  }\n  return 'Domain';\n}\nfunction getDescriptionHeader(moduleName: ModuleName) {\n  if (moduleName === ModuleName.HTTP) {\n    return 'URL';\n  }\n  if (moduleName === ModuleName.DB) {\n    return 'Query';\n  }\n  return 'Description';\n}\n\nfunction getColumns(moduleName: ModuleName): TableColumnHeader[] {\n  const description = getDescriptionHeader(moduleName);\n\n  const domain = getDomainHeader(moduleName);\n\n  const order: TableColumnHeader[] = [\n    {\n      key: 'span.op',\n      name: 'Operation',\n      width: 120,\n    },\n    {\n      key: 'span.description',\n      name: description,\n      width: COL_WIDTH_UNDEFINED,\n    },\n    ...(moduleName !== ModuleName.ALL\n      ? [\n          {\n            key: 'span.domain',\n            name: domain,\n            width: COL_WIDTH_UNDEFINED,\n          } as TableColumnHeader,\n        ]\n      : []),\n    {\n      key: 'sps()',\n      name: 'Throughput',\n      width: 175,\n    },\n    {\n      key: `p95(${SPAN_SELF_TIME})`,\n      name: DataTitles.p95,\n      width: 175,\n    },\n    {\n      key: 'time_spent_percentage()',\n      name: DataTitles.timeSpent,\n      width: COL_WIDTH_UNDEFINED,\n    },\n  ];\n\n  return order;\n}\n\nexport const OverflowEllipsisTextContainer = styled('span')`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n"],"names":["QueryError","constructor","errorMessage","originalError","_defineProperty","this","message","getOriginalError","_GenericDiscoverQuery","Component","arguments","isLoading","tableFetchID","undefined","error","tableData","pageLinks","api","Client","prevProps","thisAPIPayload","getPayload","props","otherAPIPayload","isAPIPayloadSimilar","limit","route","cursor","parseError","detail","responseJSON","t","async","queryBatching","beforeFetch","afterFetch","didFetch","eventView","orgSlug","setError","state","isValid","url","Symbol","apiPayload","setState","clear","data","resp","doDiscoverQuery","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","shouldRefetchData","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useOrganization","allowNull","slug","performanceEventView","useContext","PerformanceEventViewContext","Error","_props","_jsx","displayName","BASE_TIMEOUT","TIMEOUT_MULTIPLIER","wait","duration","Promise","resolve","setTimeout","params","options","length","retry","batchRequest","query","includeAllArgs","baseTimeout","timeoutMultiplier","statusCodes","maxTries","tries","timeout","includes","status","requestPromise","method","noPagination","referrer","getRequestPayload","location","forceAppendRawQueryString","payload","getEventsAPIPayload","per_page","Object","assign","queryExtras","useGenericDiscoverQuery","useApi","res","useQuery","statusCode","response","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","strict","Context","createContext","Provider","context","THROUGHPUT_COLOR","CHART_PALETTE","P95_COLOR","ERRORS_COLOR","TimeSpentCell","_ref","timeSpentPercentage","totalSpanTime","toolTip","getTooltip","percentage","Tooltip","isHoverable","title","formatPercentage","DATE_FORMAT","useSpansQuery","initialData","enabled","queryFunction","_ref4","isTimeseriesQuery","useWrappedDiscoverTimeseriesQuery","useWrappedDiscoverQuery","getQueryFunction","yAxis","_ref2","useLocation","organization","topEvents","excludeOther","partial","orderby","sorts","encodeSort","interval","refetchOnWindowFocus","processDiscoverTimeseriesResult","_ref3","useDiscoverQuery","result","intervals","singleYAxis","firstYAxis","processSingleDiscoverTimeseriesResult","keys","forEach","key","mergeIntervals","innerKey","map","moment","parseInt","format","group","_ref5","timestamp","count","value","existingInterval","find","push","first","second","target","JSON","parse","stringify","_ref6","rest","SPAN_SELF_TIME","SpanMetricsFields","SPAN_FILTER_KEYS","useSpanList","moduleName","transaction","spanCategory","orderBy","getEventView","filter","Boolean","ModuleName","defined","NULL_SPAN_CATEGORY","buildEventViewQuery","join","EventView","fields","dataset","DiscoverDatasets","projects","version","omit","SPANS_CURSOR_NAME","SpansTable","onSetOrderBy","columnOrder","endpoint","spansCursor","decodeScalar","_jsxs","Fragment","GridEditable","getColumns","columnSortBy","order","grid","renderHeadCell","getRenderHeadCell","renderBodyCell","column","row","OverflowEllipsisTextContainer","Link","to","urlEncode","ThroughputCell","throughputPerSecond","delta","DurationCell","milliseconds","Pagination","onCursor","handleCursor","pathname","browserHistory","SortLink","align","canSort","direction","onClick","generateSortLink","description","getDescriptionHeader","domain","getDomainHeader","width","COL_WIDTH_UNDEFINED","DataTitles","_styled","styles"],"sourceRoot":""}