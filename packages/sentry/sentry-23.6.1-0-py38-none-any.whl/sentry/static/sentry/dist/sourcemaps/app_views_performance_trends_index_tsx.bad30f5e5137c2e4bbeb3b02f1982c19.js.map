{"version":3,"file":"chunks/app_views_performance_trends_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/trends/content.tsx","webpack:///./app/views/performance/trends/index.tsx","webpack:///../node_modules/lodash/assign.js"],"sourcesContent":["import {useEffect, useMemo} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {\n  DEVICE_CLASS_TAG_VALUES,\n  FieldKey,\n  FieldKind,\n  isDeviceClass,\n} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboards/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst STATIC_FIELD_TAGS_SET = new Set(Object.keys(FIELD_TAGS));\nconst getFunctionTags = (fields: Readonly<Field[]> | undefined) => {\n  if (!fields?.length) {\n    return [];\n  }\n  return fields.reduce((acc, item) => {\n    if (\n      !STATIC_FIELD_TAGS_SET.has(item.field) &&\n      !isEquation(item.field) &&\n      !isCustomMeasurement(item.field)\n    ) {\n      acc[item.field] = {key: item.field, name: item.field, kind: FieldKind.FUNCTION};\n    }\n\n    return acc;\n  }, {});\n};\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements'],\n  customMeasurements:\n    | Parameters<React.ComponentProps<typeof Measurements>['children']>[0]['measurements']\n    | undefined\n) => {\n  const measurementsWithKind = Object.keys(measurements).reduce((tags, key) => {\n    tags[key] = {\n      ...measurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, {});\n\n  if (!customMeasurements) {\n    return measurementsWithKind;\n  }\n\n  return Object.keys(customMeasurements).reduce((tags, key) => {\n    tags[key] = {\n      ...customMeasurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, measurementsWithKind);\n};\n\nconst STATIC_FIELD_TAGS = Object.keys(FIELD_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...FIELD_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nconst STATIC_FIELD_TAGS_WITHOUT_TRACING = omit(STATIC_FIELD_TAGS, TRACING_FIELDS);\n\nconst STATIC_SPAN_TAGS = SPAN_OP_BREAKDOWN_FIELDS.reduce((tags, key) => {\n  tags[key] = {name: key, kind: FieldKind.METRICS};\n  return tags;\n}, {});\n\nconst STATIC_SEMVER_TAGS = Object.keys(SEMVER_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...SEMVER_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n\n  const functionTags = useMemo(() => getFunctionTags(fields), [fields]);\n  const tagsWithKind = useMemo(() => {\n    return Object.keys(tags).reduce((acc, key) => {\n      acc[key] = {\n        ...tags[key],\n        kind: FieldKind.TAG,\n      };\n      return acc;\n    }, {});\n  }, [tags]);\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      // device.class is stored as \"numbers\" in snuba, but we want to suggest high, medium,\n      // and low search filter values because discover maps device.class to these values.\n      if (isDeviceClass(tag.key)) {\n        return Promise.resolve(DEVICE_CLASS_TAG_VALUES);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: query,\n        projectIds: projectIdStrings,\n        endpointParams,\n        // allows searching for tags on transactions as well\n        includeTransactions: true,\n        // allows searching for tags on sessions as well\n        includeSessions: includeSessionTagsValues,\n      }).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const measurementsWithKind = getMeasurementTags(measurements, customMeasurements);\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign(\n          {},\n          measurementsWithKind,\n          functionTags,\n          STATIC_SPAN_TAGS,\n          STATIC_FIELD_TAGS\n        )\n      : Object.assign({}, STATIC_FIELD_TAGS_WITHOUT_TRACING);\n\n    assign(combinedTags, tagsWithKind, STATIC_FIELD_TAGS, STATIC_SEMVER_TAGS);\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: Object.keys(combinedTags).sort((a, b) => {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      }),\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    const list =\n      omitTags && omitTags.length > 0 ? omit(combinedTags, omitTags) : combinedTags;\n    return list;\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={[FieldKey.ENVIRONMENT, FieldKey.TOTAL_COUNT]}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport TransactionNameSearchBar from 'sentry/components/performance/searchBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {getPerformanceLandingUrl, getTransactionSearchQuery} from '../utils';\n\nimport ChangedTransactions from './changedTransactions';\nimport {TrendChangeType, TrendFunctionField, TrendView} from './types';\nimport {\n  DEFAULT_MAX_DURATION,\n  DEFAULT_TRENDS_STATS_PERIOD,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  modifyTransactionNameTrendsQuery,\n  modifyTrendsViewDefaultPeriod,\n  resetCursors,\n  TRENDS_FUNCTIONS,\n  TRENDS_PARAMETERS,\n} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  error?: string;\n  previousTrendFunction?: TrendFunctionField;\n};\n\nexport const defaultTrendsSelectionDate = {\n  start: null,\n  end: null,\n  utc: false,\n  period: DEFAULT_TRENDS_STATS_PERIOD,\n};\n\nclass TrendsContent extends Component<Props, State> {\n  state: State = {};\n\n  handleSearch = (searchQuery: string) => {\n    const {location} = this.props;\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        query: String(searchQuery).trim() || undefined,\n      },\n    });\n  };\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  handleTrendFunctionChange = (field: string) => {\n    const {organization, location} = this.props;\n\n    const offsets = {};\n\n    Object.values(TrendChangeType).forEach(trendChangeType => {\n      const queryKey = getSelectedQueryKey(trendChangeType);\n      offsets[queryKey] = undefined;\n    });\n\n    trackAnalytics('performance_views.trends.change_function', {\n      organization,\n      function_name: field,\n    });\n\n    this.setState({\n      previousTrendFunction: getCurrentTrendFunction(location).field,\n    });\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...offsets,\n        ...cursors,\n        trendFunction: field,\n      },\n    });\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <Alert type=\"error\" showIcon>\n        {error}\n      </Alert>\n    );\n  }\n\n  handleParameterChange = (label: string) => {\n    const {organization, location} = this.props;\n    const cursors = resetCursors();\n\n    trackAnalytics('performance_views.trends.change_parameter', {\n      organization,\n      parameter_name: label,\n    });\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        trendParameter: label,\n      },\n    });\n  };\n\n  getFreeTextFromQuery(query: string) {\n    const conditions = new MutableSearch(query);\n    const transactionValues = conditions.getFilterValues('transaction');\n    if (transactionValues.length) {\n      return transactionValues[0];\n    }\n    if (conditions.freeText.length > 0) {\n      // raw text query will be wrapped in wildcards in generatePerformanceEventView\n      // so no need to wrap it here\n      return conditions.freeText.join(' ');\n    }\n    return '';\n  }\n\n  getPerformanceLink() {\n    const {location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n    };\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    // This stops errors from occurring when navigating to other views since we are appending aggregates to the trends view\n    conditions.removeFilter('tpm()');\n    conditions.removeFilter('confidence()');\n    conditions.removeFilter('transaction.duration');\n    newQuery.query = conditions.formatString();\n    return {\n      pathname: getPerformanceLandingUrl(this.props.organization),\n      query: newQuery,\n    };\n  }\n\n  render() {\n    const {organization, eventView, location, projects} = this.props;\n    const {previousTrendFunction} = this.state;\n\n    const trendView = eventView.clone() as TrendView;\n    modifyTrendsViewDefaultPeriod(trendView, location);\n\n    if (organization.features.includes('performance-new-trends')) {\n      modifyTransactionNameTrendsQuery(trendView);\n    }\n\n    const fields = generateAggregateFields(\n      organization,\n      [\n        {\n          field: 'absolute_correlation()',\n        },\n        {\n          field: 'trend_percentage()',\n        },\n        {\n          field: 'trend_difference()',\n        },\n        {\n          field: 'count_percentage()',\n        },\n        {\n          field: 'tpm()',\n        },\n        {\n          field: 'tps()',\n        },\n      ],\n      ['epm()', 'eps()']\n    );\n    const currentTrendFunction = getCurrentTrendFunction(location);\n    const currentTrendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const query = getTransactionSearchQuery(location);\n\n    return (\n      <PageFiltersContainer\n        defaultSelection={{\n          datetime: defaultTrendsSelectionDate,\n        }}\n      >\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: 'Performance',\n                  to: this.getPerformanceLink(),\n                },\n                {\n                  label: 'Trends',\n                },\n              ]}\n            />\n            <Layout.Title>{t('Trends')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <DefaultTrends location={location} eventView={eventView} projects={projects}>\n              <FilterActions>\n                <PageFilterBar condensed>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"left\" />\n                </PageFilterBar>\n                {organization.features.includes('performance-new-trends') ? (\n                  <StyledTransactionNameSearchBar\n                    organization={organization}\n                    eventView={trendView}\n                    onSearch={this.handleSearch}\n                    query={this.getFreeTextFromQuery(query)}\n                  />\n                ) : (\n                  <StyledSearchBar\n                    searchSource=\"trends\"\n                    organization={organization}\n                    projectIds={trendView.project}\n                    query={query}\n                    fields={fields}\n                    onSearch={this.handleSearch}\n                    maxQueryLength={MAX_QUERY_LENGTH}\n                  />\n                )}\n                <CompactSelect\n                  triggerProps={{prefix: t('Percentile')}}\n                  value={currentTrendFunction.field}\n                  options={TRENDS_FUNCTIONS.map(({label, field}) => ({\n                    value: field,\n                    label,\n                  }))}\n                  onChange={opt => this.handleTrendFunctionChange(opt.value)}\n                />\n                <CompactSelect\n                  triggerProps={{prefix: t('Parameter')}}\n                  value={currentTrendParameter.label}\n                  options={TRENDS_PARAMETERS.map(({label}) => ({\n                    value: label,\n                    label,\n                  }))}\n                  onChange={opt => this.handleParameterChange(opt.value)}\n                />\n              </FilterActions>\n              <ListContainer>\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.IMPROVED}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                  withBreakpoint={organization.features.includes(\n                    'performance-new-trends'\n                  )}\n                />\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.REGRESSION}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                  withBreakpoint={organization.features.includes(\n                    'performance-new-trends'\n                  )}\n                />\n              </ListContainer>\n              <Feature features={['organizations:performance-trendsv2-dev-only']}>\n                <ListContainer>\n                  <ChangedTransactions\n                    trendChangeType={TrendChangeType.IMPROVED}\n                    previousTrendFunction={previousTrendFunction}\n                    trendView={trendView}\n                    location={location}\n                    setError={this.setError}\n                  />\n                  <ChangedTransactions\n                    trendChangeType={TrendChangeType.REGRESSION}\n                    previousTrendFunction={previousTrendFunction}\n                    trendView={trendView}\n                    location={location}\n                    setError={this.setError}\n                  />\n                </ListContainer>\n              </Feature>\n            </DefaultTrends>\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    );\n  }\n}\n\ntype DefaultTrendsProps = {\n  children: React.ReactNode[];\n  eventView: EventView;\n  location: Location;\n  projects: Project[];\n};\n\nclass DefaultTrends extends Component<DefaultTrendsProps> {\n  hasPushedDefaults = false;\n\n  render() {\n    const {children, location, eventView, projects} = this.props;\n\n    const queryString = decodeScalar(location.query.query);\n    const trendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const conditions = new MutableSearch(queryString || '');\n\n    if (queryString || this.hasPushedDefaults) {\n      this.hasPushedDefaults = true;\n      return <Fragment>{children}</Fragment>;\n    }\n    this.hasPushedDefaults = true;\n    conditions.setFilterValues('tpm()', ['>0.01']);\n    conditions.setFilterValues(trendParameter.column, ['>0', `<${DEFAULT_MAX_DURATION}`]);\n\n    const query = conditions.formatString();\n    eventView.query = query;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(query).trim() || undefined,\n      },\n    });\n    return null;\n  }\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nconst StyledTransactionNameSearchBar = styled(TransactionNameSearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nconst ListContainer = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n`;\n\nexport default withPageFilters(TrendsContent);\n","import {Component} from 'react';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {MetricsCardinalityProvider} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {generatePerformanceEventView} from '../data';\n\nimport TrendsContent from './content';\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  eventView: EventView;\n  error?: string;\n};\n\nclass TrendsSummary extends Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    return {\n      ...prevState,\n      eventView: generatePerformanceEventView(\n        nextProps.location,\n        nextProps.projects,\n        {\n          isTrends: true,\n        },\n        nextProps.organization\n      ),\n    };\n  }\n\n  state: State = {\n    eventView: generatePerformanceEventView(\n      this.props.location,\n      this.props.projects,\n      {\n        isTrends: true,\n      },\n      this.props.organization\n    ),\n    error: undefined,\n  };\n\n  getDocumentTitle(): string {\n    return [t('Trends'), t('Performance')].join(' — ');\n  }\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  renderContent() {\n    const {organization, location, projects} = this.props;\n    const {eventView} = this.state;\n    return (\n      <TrendsContent\n        organization={organization}\n        location={location}\n        eventView={eventView}\n        projects={projects}\n      />\n    );\n  }\n\n  render() {\n    const {organization, location} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <Layout.Page>\n          <MetricsCardinalityProvider\n            sendOutcomeAnalytics\n            organization={organization}\n            location={location}\n          >\n            {this.renderContent()}\n          </MetricsCardinalityProvider>\n        </Layout.Page>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withProjects(withPageFilters(withApi(TrendsSummary))));\n","var assignValue = require('./_assignValue'),\n    copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    isArrayLike = require('./isArrayLike'),\n    isPrototype = require('./_isPrototype'),\n    keys = require('./keys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","STATIC_FIELD_TAGS_SET","Set","Object","keys","FIELD_TAGS","STATIC_FIELD_TAGS","reduce","tags","key","kind","FieldKind","STATIC_FIELD_TAGS_WITHOUT_TRACING","omit","TRACING_FIELDS","STATIC_SPAN_TAGS","SPAN_OP_BREAKDOWN_FIELDS","name","STATIC_SEMVER_TAGS","SEMVER_TAGS","SearchBar","props","maxSearchItems","organization","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","functionTags","useMemo","length","acc","item","has","field","isEquation","isCustomMeasurement","getFunctionTags","tagsWithKind","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","isMeasurement","Promise","resolve","isDeviceClass","DEVICE_CLASS_TAG_VALUES","fetchTagValues","orgSlug","slug","tagKey","search","includeTransactions","includeSessions","then","results","flatten","filter","_ref","defined","_ref2","Error","_ref3","getTagList","measurements","measurementsWithKind","getMeasurementTags","combinedTags","features","includes","assign","FieldKey","values","sort","a","b","toLowerCase","localeCompare","predefined","_jsx","Measurements","children","_ref4","SmartSearchBar","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","customPerformanceMetrics","displayName","withTags","WrappedComponent","WithTags","Component","constructor","arguments","_defineProperty","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","defaultTrendsSelectionDate","start","end","utc","period","DEFAULT_TRENDS_STATS_PERIOD","TrendsContent","searchQuery","location","cursors","resetCursors","browserHistory","pathname","trim","error","offsets","TrendChangeType","forEach","trendChangeType","queryKey","getSelectedQueryKey","trackAnalytics","function_name","previousTrendFunction","getCurrentTrendFunction","trendFunction","label","parameter_name","trendParameter","renderError","Alert","type","showIcon","getFreeTextFromQuery","conditions","MutableSearch","transactionValues","getFilterValues","freeText","join","getPerformanceLink","newQuery","decodeScalar","removeFilter","formatString","getPerformanceLandingUrl","eventView","projects","trendView","clone","modifyTrendsViewDefaultPeriod","modifyTransactionNameTrendsQuery","generateAggregateFields","currentTrendFunction","currentTrendParameter","getCurrentTrendParameter","project","getTransactionSearchQuery","_jsxs","PageFiltersContainer","defaultSelection","datetime","Layout","Breadcrumbs","crumbs","to","t","fullWidth","DefaultTrends","FilterActions","PageFilterBar","condensed","ProjectPageFilter","EnvironmentPageFilter","DatePageFilter","alignDropdown","StyledTransactionNameSearchBar","onSearch","handleSearch","StyledSearchBar","searchSource","maxQueryLength","MAX_QUERY_LENGTH","CompactSelect","triggerProps","prefix","value","options","TRENDS_FUNCTIONS","onChange","opt","handleTrendFunctionChange","TRENDS_PARAMETERS","handleParameterChange","ListContainer","ChangedTransactions","setError","withBreakpoint","Feature","queryString","hasPushedDefaults","Fragment","setFilterValues","column","DEFAULT_MAX_DURATION","cursor","_styled","target","space","p","theme","breakpoints","small","xlarge","TransactionNameSearchBar","withPageFilters","TrendsSummary","generatePerformanceEventView","isTrends","static","nextProps","prevState","getDocumentTitle","renderContent","SentryDocumentTitle","title","MetricsCardinalityProvider","sendOutcomeAnalytics","withOrganization","withProjects","withApi","assignValue","copyObject","createAssigner","isArrayLike","isPrototype","hasOwnProperty","prototype","object","source","call","module","exports"],"sourceRoot":""}