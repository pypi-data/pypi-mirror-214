{"version":3,"file":"chunks/app_components_issues_groupListHeader_tsx-app_views_alerts_rules_metric_types_tsx-app_views_a-fcd2fb.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/issues/groupListHeader.tsx","webpack:///./app/types/alerts.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/rules/utils.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  withChart: boolean;\n  narrowGroups?: boolean;\n  showLastTriggered?: boolean;\n};\n\nfunction GroupListHeader({\n  withChart = true,\n  narrowGroups = false,\n  showLastTriggered = false,\n}: Props) {\n  return (\n    <PanelHeader disablePadding>\n      <IssueWrapper>{t('Issue')}</IssueWrapper>\n      {withChart && <ChartWrapper narrowGroups={narrowGroups}>{t('Graph')}</ChartWrapper>}\n      <EventUserWrapper>{t('events')}</EventUserWrapper>\n      <EventUserWrapper>{t('users')}</EventUserWrapper>\n      <AssigneeWrapper narrowGroups={narrowGroups}>{t('Assignee')}</AssigneeWrapper>\n      {showLastTriggered && <EventUserWrapper>{t('Last Triggered')}</EventUserWrapper>}\n    </PanelHeader>\n  );\n}\n\nexport default GroupListHeader;\n\nconst Heading = styled('div')`\n  display: flex;\n  align-self: center;\n  margin: 0 ${space(2)};\n  color: ${p => p.theme.subText};\n`;\n\nconst IssueWrapper = styled(Heading)`\n  flex: 1;\n  width: 66.66%;\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 50%;\n  }\n`;\n\nconst EventUserWrapper = styled(Heading)`\n  justify-content: flex-end;\n  width: 60px;\n  white-space: nowrap;\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    width: 80px;\n  }\n`;\n\nconst ChartWrapper = styled(Heading)<{narrowGroups: boolean}>`\n  justify-content: space-between;\n  width: 160px;\n\n  @media (max-width: ${p =>\n      p.narrowGroups ? p.theme.breakpoints.xlarge : p.theme.breakpoints.large}) {\n    display: none;\n  }\n`;\n\nconst AssigneeWrapper = styled(Heading)<{narrowGroups: boolean}>`\n  justify-content: flex-end;\n  width: 80px;\n\n  @media (max-width: ${p =>\n      p.narrowGroups ? p.theme.breakpoints.large : p.theme.breakpoints.medium}) {\n    display: none;\n  }\n`;\n","import type {SchemaFormConfig} from 'sentry/views/settings/organizationIntegrations/sentryAppExternalForm';\n\nimport type {IssueConfigField} from './integrations';\n\ntype IssueAlertRuleFormField =\n  | {\n      type: 'choice';\n      choices?: [string, string][];\n      initial?: string;\n      placeholder?: string;\n    }\n  | {\n      type: 'string';\n      initial?: string;\n      placeholder?: string;\n    }\n  | {\n      type: 'number';\n      initial?: string;\n      placeholder?: number | string;\n    };\n\n/**\n * These templates that tell the UI how to render the action or condition\n * and what fields it needs\n */\nexport interface IssueAlertRuleActionTemplate {\n  enabled: boolean;\n  id: string;\n  label: string;\n  name: string;\n  prompt: string;\n  actionType?: 'ticket' | 'sentryapp';\n  formFields?:\n    | {\n        [key: string]: IssueAlertRuleFormField;\n      }\n    | SchemaFormConfig;\n  link?: string;\n  sentryAppInstallationUuid?: string;\n  ticketType?: string;\n}\nexport type IssueAlertRuleConditionTemplate = IssueAlertRuleActionTemplate;\n\n/**\n * These are the action or condition data that the user is editing or has saved.\n */\nexport interface IssueAlertRuleAction\n  extends Omit<IssueAlertRuleActionTemplate, 'formFields' | 'enabled'> {\n  // These are the same values as the keys in `formFields` for a template\n  [key: string]: any;\n  dynamic_form_fields?: IssueConfigField[];\n}\n\nexport type IssueAlertRuleCondition = Omit<\n  IssueAlertRuleConditionTemplate,\n  'formFields' | 'enabled'\n> & {\n  dynamic_form_fields?: IssueConfigField[];\n} & {\n  // These are the same values as the keys in `formFields` for a template\n  [key: string]: number | string;\n};\n\nexport interface UnsavedIssueAlertRule {\n  /** When an issue matches [actionMatch] of the following */\n  actionMatch: 'all' | 'any' | 'none';\n  actions: IssueAlertRuleAction[];\n  conditions: IssueAlertRuleCondition[];\n  /** If that issue has [filterMatch] of these properties */\n  filterMatch: 'all' | 'any' | 'none';\n  filters: IssueAlertRuleCondition[];\n  frequency: number;\n  name: string;\n  environment?: null | string;\n  owner?: string | null;\n}\n\n// Issue-based alert rule\nexport interface IssueAlertRule extends UnsavedIssueAlertRule {\n  createdBy: {email: string; id: number; name: string} | null;\n  dateCreated: string;\n  id: string;\n  projects: string[];\n  snooze: boolean;\n  errors?: {detail: string}[];\n  lastTriggered?: string;\n  snoozeCreatedBy?: string;\n  snoozeForEveryone?: boolean;\n}\n\n// Project's alert rule stats\nexport type ProjectAlertRuleStats = {\n  count: number;\n  date: string;\n};\n\nexport enum MailActionTargetType {\n  ISSUE_OWNERS = 'IssueOwners',\n  TEAM = 'Team',\n  MEMBER = 'Member',\n  RELEASE_MEMBERS = 'ReleaseMembers',\n}\n\nexport enum AssigneeTargetType {\n  UNASSIGNED = 'Unassigned',\n  TEAM = 'Team',\n  MEMBER = 'Member',\n}\n\nexport type NoteType = {\n  mentions: string[];\n  text: string;\n};\n\n/**\n * Used when determining what types of actions a rule has. The default action is \"sentry.mail.actions.NotifyEmailAction\"\n * while other actions can be integration (Slack, PagerDuty, etc) actions. We need to know this to determine what kind of muting\n * the alert should have.\n */\nexport enum RuleActionsCategories {\n  ALL_DEFAULT = 'all_default',\n  SOME_DEFAULT = 'some_default',\n  NO_DEFAULT = 'no_default',\n}\n","import {t} from 'sentry/locale';\nimport {MEPAlertsQueryType} from 'sentry/views/alerts/wizard/options';\nimport type {SchemaFormConfig} from 'sentry/views/settings/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n  PERCENT = 'percent',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  /** Also used for performance alerts **/\n  GENERIC_METRICS = 'generic_metrics',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n  queryType?: MEPAlertsQueryType | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  snooze: boolean;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n  snoozeCreatedBy?: string;\n  snoozeForEveryone?: boolean;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import IdBadge from 'sentry/components/idBadge';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {IssueAlertRule, RuleActionsCategories} from 'sentry/types/alerts';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\nexport function getProjectOptions({\n  organization,\n  projects,\n  isFormDisabled,\n}: {\n  isFormDisabled: boolean;\n  organization: Organization;\n  projects: Project[];\n}) {\n  const hasOrgAlertWrite = organization.access.includes('alerts:write');\n  const hasOrgWrite = organization.access.includes('org:write');\n  const hasOpenMembership = organization.features.includes('open-membership');\n\n  // If form is enabled, we want to limit to the subset of projects which the\n  // user can create/edit alerts.\n  const projectWithWrite =\n    isFormDisabled || hasOrgAlertWrite\n      ? projects\n      : projects.filter(project => project.access.includes('alerts:write'));\n  const myProjects = projectWithWrite.filter(project => project.isMember);\n  const allProjects = projectWithWrite.filter(project => !project.isMember);\n\n  const myProjectOptions = myProjects.map(myProject => ({\n    value: myProject.id,\n    label: myProject.slug,\n    leadingItems: renderIdBadge(myProject),\n  }));\n\n  const openMembershipProjects = [\n    {\n      label: t('My Projects'),\n      options: myProjectOptions,\n    },\n    {\n      label: t('All Projects'),\n      options: allProjects.map(allProject => ({\n        value: allProject.id,\n        label: allProject.slug,\n        leadingItems: renderIdBadge(allProject),\n      })),\n    },\n  ];\n\n  return hasOpenMembership || hasOrgWrite || isActiveSuperuser()\n    ? openMembershipProjects\n    : myProjectOptions;\n}\n\nfunction renderIdBadge(project: Project) {\n  return (\n    <IdBadge\n      project={project}\n      avatarProps={{consistentWidth: true}}\n      avatarSize={18}\n      disableLink\n      hideName\n    />\n  );\n}\n\nexport function getRuleActionCategory(rule: IssueAlertRule) {\n  const numDefaultActions = rule.actions.filter(\n    action => action.id === 'sentry.mail.actions.NotifyEmailAction'\n  ).length;\n\n  switch (numDefaultActions) {\n    // Are all actions default actions?\n    case rule.actions.length:\n      return RuleActionsCategories.ALL_DEFAULT;\n    // Are none of the actions default actions?\n    case 0:\n      return RuleActionsCategories.NO_DEFAULT;\n    default:\n      return RuleActionsCategories.SOME_DEFAULT;\n  }\n}\n\nexport function getAlertRuleActionCategory(rule: MetricRule) {\n  const actions = rule.triggers.map(trigger => trigger.actions).flat();\n  const numDefaultActions = actions.filter(action => action.type === 'email').length;\n\n  switch (numDefaultActions) {\n    // Are all actions default actions?\n    case actions.length:\n      return RuleActionsCategories.ALL_DEFAULT;\n    // Are none of the actions default actions?\n    case 0:\n      return RuleActionsCategories.NO_DEFAULT;\n    default:\n      return RuleActionsCategories.SOME_DEFAULT;\n  }\n}\n"],"names":["GroupListHeader","_ref","withChart","narrowGroups","showLastTriggered","_jsxs","PanelHeader","disablePadding","children","_jsx","IssueWrapper","t","ChartWrapper","EventUserWrapper","AssigneeWrapper","displayName","Heading","_styled","target","space","p","theme","subText","breakpoints","medium","xlarge","large","MailActionTargetType","AssigneeTargetType","RuleActionsCategories","AlertRuleThresholdType","AlertRuleTriggerType","AlertRuleComparisonType","Dataset","EventTypes","Datasource","SessionsAggregate","TimePeriod","TimeWindow","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","getProjectOptions","organization","projects","isFormDisabled","hasOrgAlertWrite","access","includes","hasOrgWrite","hasOpenMembership","features","projectWithWrite","filter","project","myProjects","isMember","allProjects","myProjectOptions","map","myProject","value","id","label","slug","leadingItems","renderIdBadge","openMembershipProjects","options","allProject","isActiveSuperuser","IdBadge","avatarProps","consistentWidth","avatarSize","disableLink","hideName","getRuleActionCategory","rule","actions","action","length","getAlertRuleActionCategory","triggers","trigger","flat","type"],"sourceRoot":""}