"""
    CCF-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import unittest

import ccf_openapi_client
from ccf_openapi_client.api.default_api import DefaultApi  # noqa: E501


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = DefaultApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_aggregate_results(self):
        """Test case for aggregate_results

        Get aggregate results / statistics  # noqa: E501
        """
        pass

    def test_cell_type_term_occurences(self):
        """Test case for cell_type_term_occurences

        Get number of cell type term occurrences for a search  # noqa: E501
        """
        pass

    def test_cell_type_tree_model(self):
        """Test case for cell_type_tree_model

        Get cell type tree nodes  # noqa: E501
        """
        pass

    def test_db_status(self):
        """Test case for db_status

        Get current status of database  # noqa: E501
        """
        pass

    def test_get_spatial_placement(self):
        """Test case for get_spatial_placement

        Given a SpatialEntity already placed relative to a reference SpatialEntity, retrieve a new direct SpatialPlacement to the given SpatialEntity IRI  # noqa: E501
        """
        pass

    def test_gtex_rui_locations(self):
        """Test case for gtex_rui_locations

        Get all GTEx rui locations (if enabled)  # noqa: E501
        """
        pass

    def test_hubmap_rui_locations(self):
        """Test case for hubmap_rui_locations

        Get all hubmap rui locations (if enabled)  # noqa: E501
        """
        pass

    def test_ontology_term_occurences(self):
        """Test case for ontology_term_occurences

        Get number of ontology term occurrences for a search  # noqa: E501
        """
        pass

    def test_ontology_tree_model(self):
        """Test case for ontology_tree_model

        Get ontology term tree nodes  # noqa: E501
        """
        pass

    def test_provider_names(self):
        """Test case for provider_names

        Get tissue provider names (for filtering)  # noqa: E501
        """
        pass

    def test_reference_organ_scene(self):
        """Test case for reference_organ_scene

        Get all nodes to form the 3D scene for an organ  # noqa: E501
        """
        pass

    def test_reference_organs(self):
        """Test case for reference_organs

        Get all reference organs  # noqa: E501
        """
        pass

    def test_scene(self):
        """Test case for scene

        Get all nodes to form the 3D scene of reference body, organs, and tissues  # noqa: E501
        """
        pass

    def test_sparql(self):
        """Test case for sparql

        Run a SPARQL query  # noqa: E501
        """
        pass

    def test_sparql_post(self):
        """Test case for sparql_post

        Run a SPARQL query (POST)  # noqa: E501
        """
        pass

    def test_technology_names(self):
        """Test case for technology_names

        Get technology names (for filtering)  # noqa: E501
        """
        pass

    def test_tissue_blocks(self):
        """Test case for tissue_blocks

        Get Tissue Block Results  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
