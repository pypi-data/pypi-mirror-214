[tox]
minversion = 4.0
envlist = build, py311-other, py311-{unit,functional}, coverage, mypy-{full,test}, pre-commit
skip_missing_interpreters = true

[base]
setenv =
    PYTHONHASHSEED = 100
    PYTHONUNBUFFERED = 1
    PDM_IGNORE_SAVED_PYTHON = 1
    PDM_CHECK_UPDATE = False
pdm-deps =
    pdm == 2.6.1

[testenv:py311-other]
package = wheel
deps =
    {[base]pdm-deps}
setenv =
    {[base]setenv}
    PYTHONASYNCIODEBUG = 1
    PYTEST_ADDOPTS = -p "no:cacheprovider" {tty:--color=yes} {posargs}
commands_pre =
    pdm sync --no-self --dev --group=test
commands =
    pytest -m "not unit and not functional" --no-cov


[testenv:py311-{unit,functional}]
package = wheel
deps =
    {[base]pdm-deps}
setenv =
    {[base]setenv}
    COVERAGE_FILE = .coverage.{envname}
    PYTEST_ADDOPTS = -p "no:cacheprovider" {tty:--color=yes} --cov --cov-report='' {posargs}
    unit: _PYTEST_CTX = unit
    functional: _PYTEST_CTX = functional
commands_pre =
    pdm sync --no-self --dev --group=test
commands =
    pytest -m "{env:_PYTEST_CTX}"

[testenv:coverage]
skip_install = True
depends = py311-{unit,functional}
parallel_show_output = True
deps =
    coverage
allowlist_externals =
    rm
setenv =
    {[base]setenv}
    COVERAGE_FILE = .coverage
commands_pre =
    rm -rf {env:COVERAGE_FILE}
commands =
    coverage combine
    coverage report

[testenv:build]
skip_install = true
deps =
    build
    twine
allowlist_externals =
    cp
    rm
setenv =
    {[base]setenv}
passenv =
    SOURCE_DATE_EPOCH
commands =
    python -m build --outdir {envtmpdir}{/}dist
    twine check --strict {envtmpdir}{/}dist{/}*
    cp -a {envtmpdir}{/}dist{/}. {toxinidir}{/}dist
    rm -rf {envtmpdir}{/}dist

[testenv:mypy-{full,test}]
package = wheel
deps =
    {[base]pdm-deps}
allowlist_externals =
    rm
setenv =
    {[base]setenv}
    MYPY_CACHE_DIR = {envdir}{/}.mypy_cache
    MYPY_OPTS = --no-incremental --config-file {toxinidir}{/}pyproject.toml
commands_pre =
    pdm sync --no-self --dev --group=mypy
    test: pdm sync --no-self --dev --group=test
commands =
    full: mypy {env:MYPY_OPTS} -p easynetwork_trio
    test: mypy {env:MYPY_OPTS} {toxinidir}{/}tests
commands_post =
    rm -rf {env:MYPY_CACHE_DIR}

[testenv:pre-commit]
skip_install = true
deps =
    pre-commit
setenv =
    {[base]setenv}
    SKIP=mypy
passenv =
    PRE_COMMIT_HOME
    XDG_CACHE_HOME
commands =
    pre-commit run {posargs:--all-files}
