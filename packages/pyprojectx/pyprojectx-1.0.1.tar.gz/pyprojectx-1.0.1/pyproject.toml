[project]
name = "pyprojectx"
version = "1.0.1"
description = "Execute scripts from pyproject.toml, installing tools on-the-fly"
authors = [
    { name = "Houbie", email = "ivo@houbrechts-it.be" },
]
readme = "README.md"
keywords = [
    "build",
    "dependency",
    "pyprojectx",
]
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.7"
dependencies = [
    "click==8.1.3",
    "distlib==0.3.6",
    "filelock==3.11.0",
    "platformdirs==3.2.0",
    "tomli==2.0.1",
    "userpath==1.8.0",
    "virtualenv==20.23.0",
]

[project.license]
text = "MIT"

[project.urls]
homepage = "https://github.com/pyprojectx/pyprojectx"
documentation = "https://pyprojectx.github.io"

[project.scripts]
pyprojectx = "pyprojectx.cli:main"

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.3.0",
    "pytest-mock>=3.10.0",
]

[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.ruff]
line-length = 120
select = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
ignore = [
    "D100",
    "D102",
    "D103",
    "D104",
    "D105",
    "D213",
    "D203",
    "T201",
    "TRY003",
    "EM102",
    "COM812",
    "S602",
    "S603",
    "S604",
    "S605",
    "S607",
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",
    "I001",
]

[tool.pyprojectx]
black = "black==23.3.0"
isort = "isort==5.12.0"
ruff = "ruff"
pre-commit = "pre-commit"
mkdocs = [
    "mkdocs ~=1.4",
    "mkdocs-material ~=9.1",
    "mkdocstrings[python] ~=0.21",
    "markdown-include ~=0.8",
]

[tool.pyprojectx.pdm]
requirements = [
    "pdm==2.7.4",
    "requests<2.30.0",
]
post-install = "pw@pre-commit install"

[tool.pyprojectx.aliases]
install = "pdm install"
run = "pdm run pyprojectx -t pyproject.toml "
update = "pdm update"
outdated = "pdm update --outdated"
clean = "rm -r .venv .pytest_cache dist"
clean-all = "pw@clean\nrm -r .pyprojectx"
black = "black src tests"
isort = "isort src tests"
unit-test = "pdm run pytest tests/unit"
integration-test = "pdm run pytest tests/integration"
test = [
    "pw@unit-test",
    "pw@integration-test",
]
check-ruff = "ruff check src tests"
check-black = "black src tests --check"
check = [
    "pw@check-black",
    "pw@check-ruff",
    "pw@test",
]
build = [
    "pw@install",
    "pw@check",
    "pw@pdm build",
]
publish = "pdm publish --username __token__"
prep-release = "# cleanup\nrm -f wrappers.zip .changelog.md\n# extract version from tag\nRELEASE_VERSION=\"${GITHUB_REF_NAME}\"\n# replace __version__ in wrapper\nsed -i -e \"s/__version__/${RELEASE_VERSION}/g\" src/pyprojectx/wrapper/pw.py\nsed -i -e \"s/1.0.1/${RELEASE_VERSION}/g\" pyproject.toml\n# cleanup sed backup\nrm -r src/pyprojectx/wrapper/pw.py?*\nrm -r pyproject.toml?*\nmkdir -p dist-zip\ncp src/pyprojectx/wrapper/pw.py dist-zip/pw\ncp src/pyprojectx/wrapper/pw.bat dist-zip/pw.bat\nzip -j wrappers.zip dist-zip/pw*\nawk '/-{3,}/{flag=1;next}/Release/{if (flag==1)exit}flag' CHANGELOG.md > .changelog.md\n"
generate-usage = "pw@ --help > docs/docs/usage.txt"
serve-docs = "@mkdocs: cd docs && mkdocs serve"
generate-docs = "@mkdocs: pw@generate-usage && cd docs && mkdocs build"
deploy-docs = "@mkdocs: cd docs && mkdocs gh-deploy"

[tool.pyprojectx.os.win.aliases]
clean = "rmdir /s/q .venv .pytest_cache dist"
clean-all = "pw@clean\nrmdir /s/q .pyprojectx"

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"
