# netbox-kea-dhcp configuration file (TOML format, see https://toml.io)

# Check generated configuration but don’t push it to DHCP server
#check_only = true

# Full sync at application startup (overide current DHCP config)
#full_sync_at_startup = true

# Listen for NetBox events
#listen = true
#bind = "0.0.0.0"
#port = 8001
# Require a secret to be sent in Netbox events in HTTP header
#secret = "CHANGE-ME-CHANGE-ME-CHANGE-ME-CHANGE-ME"
#secret_header = "X-netbox2kea-secret"

# Netbox URL where API is listening
netbox_url = "http://10.94.135.32:8000/"
netbox_token = "9123456789abcdef0123456789abcdef01234568"

# Kea control agent URI
kea_url = "http://10.94.135.209:8000/"

#log_level = "debug"          # or "info", "warning" (default), "error"
#ext_log_level = "warning"    # Log level for external modules

# Prefix log messages with syslog level. Intended for systemd unit parameter
# "SyslogLevelPrefix", as described on
# https://www.freedesktop.org/software/systemd/man/systemd.exec.html#SyslogLevelPrefix=.
# Messages are always sent to standard or error outputs.
# When set to false (default), a datetime and level name prefixes is used
#syslog_level_prefix = true


#
# Netbox-DHCP maps: mapping between Kea DHCP settings and netbox fields
#
# If the DHCP attribute have a dot and the part before the dot is "option-data"
# the part after the dot will be added to option-data list as a dictionary
# with two keys: "name"={part after the dot} and "data"={value from netbox}.
# If the part before the dot is not a known list as option-data, the part after
# will be a nested dictionary.
# Each netbox fields may contains several dots which are seperators between
# nested objects or dictionary keys.
# A Netbox map may be a list of netbox fields. In this case, the first
# non-empty field will be used as the DHCP value.
# In respect to TOML syntax, attribute with dots in name need to be
# double-quoted.

# Default subnet<->prefix map:
#[subnet_prefix_map]
#"option-data.routers" = "custom_fields.dhcp_option_data_routers"
#"option-data.domain-search" = "custom_fields.dhcp_option_data_domain_search"
#"option-data.domain-name-servers" = "custom_fields.dhcp_option_data_domain_name_servers"
#next-server = "custom_fields.dhcp_next_server"
#boot-file-name = "custom_fields.dhcp_boot_file_name"
#valid-lifetime = "custom_fields.dhcp_valid_lifetime"

# Example of a nested DHCP dictionary
#"user-context.tenant" = "tenant.name"

# Default pool<->IP range map: no map
#[pool_iprange_map]

# Default IP reservation<->IP address map
#[reservation_ipaddr_map]
# "hw-address" and "hostname" DHCP settings are required
## Get MAC address from custom field, fallback to assigned interface MAC address
#hw-address = [ "custom_fields.dhcp_reservation_hw_address",
#               "assigned_object.mac_address" ]
# Get hostname from DNS name, fallback to device/vm name
#hostname = [ "dns_name", "assigned_object.device.name",
#             "assigned_object.virtual_machine.name"]


#
# Filters: params injected into netbox API queries to restrict object selection
#
# See API documentation on http://netbox-host/api/docs/.
# IMPORTANT: non existent params are silently ignored!!

# Default prefix filter:
#[prefix_filter]
#cf_dhcp_enabled = true

# Example of a filte that includes only active prefixes
[prefix_filter]
status = "active"
cf_dhcp_enabled = true

# Default IP range filter:
#[iprange_filter]
## ATTENTION: "dhcp" is a custom status value, it needs to be created (in v3.4)
#status = "dhcp"

# Default IP address filter:
#[ipaddress_filter]
#status = "dhcp"
