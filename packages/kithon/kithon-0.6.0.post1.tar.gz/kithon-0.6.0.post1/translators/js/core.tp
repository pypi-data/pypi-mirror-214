bool: "{{val|lower}}"
str: "{%if '\n' in val%}`{{val}}`{%else%}\"{{val}}\"{%endif%}"
ellipsis: "undefined"

operators:
  "==": "==="
  "!=": "!=="
  "or": "||"
  "and": "&&"
  "not": "!"
  "is": "==="

tuple: "[{{ls|join(', ')}}]"
unpack: "[{{vars|join(', ')}}] = {{value}};"
unpack_to_new: "let [{{vars|join(', ')}}] = {{value}};"
attr: |-
  {%- if attr_inf.static and obj.type != 'type' -%}
    {{obj}}.constructor
  {%- else -%}
    {{obj}}
  {%- endif -%}.{{attr}}

index: "{{obj}}[{{key}}]"

list[any].__getitem__:
  code: "{{obj}}.at({{key}})"

dict[any].__getitem__:
  code: >-
    {{obj}}[{%- if ctx == 'load' -%}
      {{key}}] == undefined?(()=>{throw "key error"})():{{obj}}[{{key}}
    {%-else-%}
      {{key}}
    {%-endif-%}]

slice: "{{obj}}.slice({{low}}, {{up}})"
steped_slice:
  meta: {"gen_negative_indexes": yes}
  tmp: ~

expr: "{{value}};"
var_prototype: "let {{name}}{%if default_val%} = {{default_val}}{%endif%};"
assign: "{{var}} = {{value}};"
new_var: |-
  {%- if isinstance(value.type, types['module']) -%}
    import * as {{var}} from {{value.parts.args[0]}};
  {%- else -%}
    {%if env.mod_name not in ['main', 'block'] and nl == 0%}export {%endif%}let {{var}} = {{value}};
  {%- endif -%}

if: "if ({{condition}}) {{body}} {{els}}"
elif: "else if ({{condition}}) {{body}} {{els}}"
else: "else {{body}}"
ternary: "({{condition}}?{{body}}:{{els}})"
func: >-
  {%if env.mod_name not in ['main', 'block'] and nl == 0%}export {%endif%}let
  {{name}} = {{(decorators + [''])|join('(')}}({{args|join(', ')}}) => {{body}}{{')' * decorators|length}};

return: "return {{value}};"

while:
  meta: {"gen_else": yes}
  tmp: "while ({{condition}}) {{body}}{{'\n' + '    ' * nl}}{{els}}"

for:
  meta: {"gen_else": yes}
  tmp: >-
    for (let {{var}}
    {{'in' if isinstance(obj.type, types.dict) else 'of'}}
    {{obj}})
    {{body}}{{'\n' + '    ' * nl}}{{els}}

c_like_for:
  meta: {"gen_else": yes}
  tmp: >-
    for (let {{var}} = {{start}};
    {%- if step < 0-%}
    {{var}} > {{finish}}
    {%- elif step > 0 -%}
    {{var}} < {{finish}}
    {%- else -%}
    ({{step}}<0?{{var}}>{{finish}}:{{var}}<{{finish}})
    {%- endif -%};
    {{var}} += {{step}})
    {{body}}{{'\n' + '    ' * nl}}{{els}}

break:
  meta: {"gen_else": yes}
  tmp: "break;"

continue: "continue;"

class: "class {{name}} {{body}}"
init: "constructor({{(args[1:])|join(', ')}}) {{body}}"
method: "{{name}} = {{(decorators + [''])|join('(')}}({{args[1:]|join(', ')}}) => {{body}}{{')' * decorators|length}};"
self:
  alt_name: "this"
static_attr: "static {{var}} = {{value}};"
new: "new {{func}}({{args|join(', ')}})"

body: |-
  {{'{'}}{% for st in body %}
  {{'    '*nl}}{{st}}{% endfor %}
  {{'    '*(nl-1)}}}
import: 'import * as {{alias}} from "./{{name}}";'
import_from: 'import {{"{"}}{{name}}{%if alias != name%} as {{alias}}{%endif%}} from "./{{module|replace(".", "/")}}";'
global: no
nonlocal: no

entry:
  decorate: "{{body.parts.body|join('\n')}}"
