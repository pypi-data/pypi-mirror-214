types:
  list: "list[{{el_type}}]"
  func: "func[{{args|join(', ')}}]{{ret_type}}"
  dict: "dict[{{key_type}}]{{el_type}}"
  tuple: "tuple[{{el_type}}]"
  module: "mode_{{_name}}"

operators: {}

name: '{{name}}'
int: '{{val}}'
float: '{{val}}'
bool: '{{val}}'
str: "\"{{val}}\""
ellipsis: "..."

bin_op: |-
  {%-if parent.name == "bin_op"-%}
  ({{left}} {{op}} {{right}})
  {%-else-%}
  {{left}} {{op}} {{right}}
  {%-endif-%}

un_op: '{{op}}({{el}})'

call: "{{func}}({{args|join(', ')}}{%if args and kwargs%}, {%endif%}{{kwargs|join(', ')}})"
attr: "{{obj}}.{{attr}}"
arg: '{{name}}'
kwarg: '{{name}}={{value}}'
list: "[{{ls|join(', ')}}]"
tuple: "({{ls|join(', ')}})"
dict: "{{'{'}}{%for item in keys_val%}{{item[0]}}: {{item[1]}},{%endfor%}}"

index: '{{obj}}[{{key}}]'
slice: '{{obj}}[{{low}}:{{up}}]'
steped_slice: '{{obj}}[{{low}}:{{up}}:{{step}}]'
expr: '{{value}}'

assign: '{{var}} = {{value}}'
unpack: '{{vars|join(", ")}} = {{value}}'
unpack_to_new: '{{vars|join(", ")}} = {{value}}'
var_prototype: "{{name}} = None"

if: "if {{condition}}{{body}}{%if els%}{{'\n'}}{{els}}{%endif%}"
elif: "{{'    '*nl}}elif {{condition}}{{body}}{{'\n'}}{{els}}"
else: "{{'    '*nl}}else{{body}}"
ternary: "({{body}} if {{condition}} else {{els}})"

func: "{{'\n'}}{%for d in decorators %}@{{d}}{{'\n'}}{%endfor%}def {{name}}({{args|join(', ')}}){{body}}{{'\n'}}"
lambda: 'lambda {{args|join(", ")}}: {{body}}'
return: "return {{value}}"

while: "while {{condition}}{{body}}{%if els %}{{'\n' + '    ' * nl}}else{{els}}{%endif%}"

for: "for {{var}} in {{obj}}{{body}}{%if els %}{{'\n' + '    ' * nl}}else{{els}}{%endif%}"

break: 'break'
continue: 'continue'

class: "{%for d in decorators%}@{{d}}{{'\n'}}{%endfor%}class {{name}}{{body}}"

init: "{%for d in decorators%}@{{d}}{{'\n'}}{%endfor%}def __init__({{args|join(', ')}}){{body}}"
method: "{%for d in decorators%}@{{d}}{{'\n'}}{%endfor%}def {{name}}({{args|join(', ')}}){{body}}"
static_attr: '{{var}} = {{value}}'
new: "{{func}}({{args|join(', ')}})"

body: |-
  :{%for st in body%}
  {{'    '*nl}}{{st}}{%endfor%}

global: 'global {{vars|join(", ")}}'
nonlocal: 'nonlocal {{vars|join(", ")}}'
import: 'import {{name}}{%if alias != name%} as {{alias}}{%endif%}'
import_from: "from {{module}} import {{name}}{%if alias != name%} as {{alias}}{%endif%}"

main: '{{body}}'

entry:
  decorate: |-
    if __name__ == "__main__":{% for st in body.parts.body %}
    {{'    '}}{{st}}{% endfor %}


meta:
  repl:
    name: python
    prompt: ">>> "
  run: "python -c '{{code}}'"
  keyword_tmp: "_{{keyword}}"
  keywords: []
