Metadata-Version: 2.1
Name: windmolen
Version: 0.0.1
Summary: Treat multiple async iterators as a single async iterator.
Author-email: Austin Raney <aaraney@protonmail.com>
License: MIT License
Keywords: async,iterator
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Utilities
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typing-extensions
Provides-Extra: dev
Requires-Dist: black ; extra == 'dev'
Provides-Extra: test
Requires-Dist: pytest (>=7.0.0) ; extra == 'test'
Requires-Dist: pytest-asyncio ; extra == 'test'

# Windmolen

Treat multiple asynchronous iterators like they are a single asynchronous iterator.

**Example:**

```python
import asyncio
from windmolen import FanIn


async def async_iterator_1():
    for i in range(1, 5):
        yield i
        await asyncio.sleep(0.5)


async def async_iterator_2():
    for j in range(5, 9):
        yield j
        await asyncio.sleep(1)


async def main():
    async with FanIn(async_iterator_1(), async_iterator_2()) as async_iterators:
        async for item in async_iterators:
            print(item)


if __name__ == "__main__":
    asyncio.run(main())
```

## Install

```shell
pip install windmolen
```
