# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: serverless/instrumentation/tags/v1/tags.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from serverless.instrumentation.tags.v1 import aws_pb2 as serverless_dot_instrumentation_dot_tags_dot_v1_dot_aws__pb2
from serverless.instrumentation.tags.v1 import common_pb2 as serverless_dot_instrumentation_dot_tags_dot_v1_dot_common__pb2
from serverless.instrumentation.tags.v1 import error_pb2 as serverless_dot_instrumentation_dot_tags_dot_v1_dot_error__pb2
from serverless.instrumentation.tags.v1 import warning_pb2 as serverless_dot_instrumentation_dot_tags_dot_v1_dot_warning__pb2
from serverless.instrumentation.tags.v1 import notice_pb2 as serverless_dot_instrumentation_dot_tags_dot_v1_dot_notice__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n-serverless/instrumentation/tags/v1/tags.proto\x12\"serverless.instrumentation.tags.v1\x1a,serverless/instrumentation/tags/v1/aws.proto\x1a/serverless/instrumentation/tags/v1/common.proto\x1a.serverless/instrumentation/tags/v1/error.proto\x1a\x30serverless/instrumentation/tags/v1/warning.proto\x1a/serverless/instrumentation/tags/v1/notice.proto\"\xe8\x05\n\x04Tags\x12\x42\n\x03\x61ws\x18\x64 \x01(\x0b\x32+.serverless.instrumentation.tags.v1.AwsTagsH\x00R\x03\x61ws\x88\x01\x01\x12\x45\n\x04http\x18j \x01(\x0b\x32,.serverless.instrumentation.tags.v1.HttpTagsH\x01R\x04http\x88\x01\x01\x12G\n\x05https\x18k \x01(\x0b\x32,.serverless.instrumentation.tags.v1.HttpTagsH\x02R\x05https\x88\x01\x01\x12\x42\n\x03sdk\x18p \x01(\x0b\x32+.serverless.instrumentation.tags.v1.SdkTagsH\x03R\x03sdk\x88\x01\x01\x12%\n\x0b\x65nvironment\x18m \x01(\tH\x04R\x0b\x65nvironment\x88\x01\x01\x12!\n\tnamespace\x18n \x01(\tH\x05R\tnamespace\x88\x01\x01\x12\x1a\n\x06org_id\x18o \x01(\tH\x06R\x05orgId\x88\x01\x01\x12H\n\x05\x65rror\x18q \x01(\x0b\x32-.serverless.instrumentation.tags.v1.ErrorTagsH\x07R\x05\x65rror\x88\x01\x01\x12N\n\x07warning\x18r \x01(\x0b\x32/.serverless.instrumentation.tags.v1.WarningTagsH\x08R\x07warning\x88\x01\x01\x12K\n\x06notice\x18s \x01(\x0b\x32..serverless.instrumentation.tags.v1.NoticeTagsH\tR\x06notice\x88\x01\x01\x42\x06\n\x04_awsB\x07\n\x05_httpB\x08\n\x06_httpsB\x06\n\x04_sdkB\x0e\n\x0c_environmentB\x0c\n\n_namespaceB\t\n\x07_org_idB\x08\n\x06_errorB\n\n\x08_warningB\t\n\x07_noticeJ\x04\x08l\x10mR\x08sls_tags\"\xb7\x02\n\x07SlsTags\x12\x15\n\x06org_id\x18\x01 \x01(\tR\x05orgId\x12\x1f\n\x08platform\x18\x02 \x01(\tH\x00R\x08platform\x88\x01\x01\x12\x18\n\x07service\x18\x03 \x01(\tR\x07service\x12\x1b\n\x06region\x18\x04 \x01(\tH\x01R\x06region\x88\x01\x01\x12=\n\x03sdk\x18\x05 \x01(\x0b\x32+.serverless.instrumentation.tags.v1.SdkTagsR\x03sdk\x12%\n\x0b\x65nvironment\x18\x10 \x01(\tH\x02R\x0b\x65nvironment\x88\x01\x01\x12!\n\tnamespace\x18\x11 \x01(\tH\x03R\tnamespace\x88\x01\x01\x42\x0b\n\t_platformB\t\n\x07_regionB\x0e\n\x0c_environmentB\x0c\n\n_namespace\"b\n\x07SdkTags\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n\x07version\x18\x02 \x01(\tR\x07version\x12\x1d\n\x07runtime\x18\x03 \x01(\tH\x00R\x07runtime\x88\x01\x01\x42\n\n\x08_runtimeB\nZ\x08.;protocb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'serverless.instrumentation.tags.v1.tags_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\010.;protoc'
  _globals['_TAGS']._serialized_start=328
  _globals['_TAGS']._serialized_end=1072
  _globals['_SLSTAGS']._serialized_start=1075
  _globals['_SLSTAGS']._serialized_end=1386
  _globals['_SDKTAGS']._serialized_start=1388
  _globals['_SDKTAGS']._serialized_end=1486
# @@protoc_insertion_point(module_scope)
