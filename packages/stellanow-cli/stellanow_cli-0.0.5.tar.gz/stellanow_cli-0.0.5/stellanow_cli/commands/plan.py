"""
Copyright (C) 2022-2023 Stella Technologies (UK) Limited.

This software is the proprietary information of Stella Technologies (UK) Limited.
Use, reproduction, or redistribution of this software is strictly prohibited without
the express written permission of Stella Technologies (UK) Limited.
All rights reserved.
"""

import os
import re
import glob
import click

from prettytable import PrettyTable
from typing import List

from ..command_config import common_option, load_config
from ..code_generators import CsharpCodeGenerator
from ..logger import logger


class SkippedFile:
    def __init__(self, filename: str, reason: str):
        self.filename = filename
        self.reason = reason

    def __iter__(self):
        return iter([self.filename, self.reason])


def print_summary(skipped_files: List[SkippedFile]) -> None:
    if skipped_files:
        print("\n==============================\n         SUMMARY\n==============================\n")

        table = PrettyTable(['File', 'Reason for not comparing'])

        # Populate the table with data from your SkippedFile instances
        for skipped_file in skipped_files:
            table.add_row([skipped_file.filename, skipped_file.reason])

        print(table)


@click.command(name='plan')
@common_option
@load_config
@click.option('--input_dir', '-i', default='.', help='The directory to read generated classes from.')
@click.pass_context
def plan(ctx, stella_api, input_dir, **kwargs):
    """Compares currently generated classes with the specifications fetched from the API and provides a summary of
    changes."""
    print('Planning...')

    # We will need to map the file extensions to the appropriate code generators
    generators = {
        '.cs': CsharpCodeGenerator()
    }

    # This is the unique comment that should be present in all auto-generated files
    auto_generated_comment = "This file is auto-generated by StellaNowCLI. DO NOT EDIT."

    skipped_files: List[SkippedFile] = []

    # Let's iterate over all the files in the input directory
    for filename in glob.iglob(f'{input_dir}/**', recursive=True):
        # Skip if the filename is a directory
        if os.path.isdir(filename):
            continue

        print(f"==============================\n\nComparison for file: {filename}")
        _, ext = os.path.splitext(filename)
        generator = generators.get(ext)

        if generator:
            with open(filename, 'r') as f:
                existing_code = f.read()

            # Check if the file was auto-generated
            if auto_generated_comment not in existing_code:
                logger.warning(f"Skipping {filename} because it was not auto-generated.")
                skipped_files.append(SkippedFile(filename, "Not Auto-Generated"))
                continue

            # Extract event ID from the auto-generated comment
            event_id_search = re.search(
                r'Event ID: ([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})',
                existing_code)

            if event_id_search is None:
                logger.warning(f"Skipping {filename} because no Event ID was found.")
                skipped_files.append(SkippedFile(filename, "Event ID Not Found"))
                continue

            event_id = event_id_search.group(1)

            # We found a matching code generator, let's generate the code for comparison
            event_detail = stella_api.get_event_details(event_id)

            try:
                diff = CsharpCodeGenerator.get_diff(event_detail, existing_code);

                print(''.join(diff))
            except Exception as e:
                logger.warning(str(e))
                skipped_files.append(SkippedFile(filename, "str(e)"))
                continue

            print(f"No changes detected in file: {filename}")

        else:
            logger.error(f'No generator found for file type {ext}. Skipping {filename}.')
            skipped_files.append(SkippedFile(filename, "Unsupported Language"))

    print_summary(skipped_files)


plan_cmd = plan
