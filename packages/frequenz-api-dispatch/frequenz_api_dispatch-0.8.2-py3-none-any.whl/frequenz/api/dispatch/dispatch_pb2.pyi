"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
protolint:disable MAX_LINE_LENGTH"""
import builtins
import collections.abc
import frequenz.api.common.components_pb2
import frequenz.api.dispatch.fcr.prequalification_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _DispatchType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DispatchTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DispatchType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DISPATCH_TYPE_UNSPECIFIED: _DispatchType.ValueType  # 0
    """Unspecified dispatch type, used mainly for error handling"""
    DISPATCH_TYPE_SHUTDOWN: _DispatchType.ValueType  # 1
    """Shutdown dispatch event"""
    DISPATCH_TYPE_BATTERY_CHARGE: _DispatchType.ValueType  # 2
    """Charge battery dispatch event"""
    DISPATCH_TYPE_BATTERY_DISCHARGE: _DispatchType.ValueType  # 3
    """Discharge battery dispatch event"""
    DISPATCH_TYPE_FCR: _DispatchType.ValueType  # 4
    """Frequency containment reserve dispatch event"""
    DISPATCH_TYPE_FCR_PREQUALIFICATION_CHARGE: _DispatchType.ValueType  # 5
    """FCR prequalification, charge test"""
    DISPATCH_TYPE_FCR_PREQUALIFICATION_DISCHARGE: _DispatchType.ValueType  # 6
    """FCR prequalification, discharge test"""

class DispatchType(_DispatchType, metaclass=_DispatchTypeEnumTypeWrapper):
    """Possible dispatch types"""

DISPATCH_TYPE_UNSPECIFIED: DispatchType.ValueType  # 0
"""Unspecified dispatch type, used mainly for error handling"""
DISPATCH_TYPE_SHUTDOWN: DispatchType.ValueType  # 1
"""Shutdown dispatch event"""
DISPATCH_TYPE_BATTERY_CHARGE: DispatchType.ValueType  # 2
"""Charge battery dispatch event"""
DISPATCH_TYPE_BATTERY_DISCHARGE: DispatchType.ValueType  # 3
"""Discharge battery dispatch event"""
DISPATCH_TYPE_FCR: DispatchType.ValueType  # 4
"""Frequency containment reserve dispatch event"""
DISPATCH_TYPE_FCR_PREQUALIFICATION_CHARGE: DispatchType.ValueType  # 5
"""FCR prequalification, charge test"""
DISPATCH_TYPE_FCR_PREQUALIFICATION_DISCHARGE: DispatchType.ValueType  # 6
"""FCR prequalification, discharge test"""
global___DispatchType = DispatchType

class _DispatchStatus:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DispatchStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DispatchStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DISPATCH_STATUS_UNSPECIFIED: _DispatchStatus.ValueType  # 0
    """Unspecified dispatch status, used mainly for error handling"""
    DISPATCH_STATUS_ACTIVE: _DispatchStatus.ValueType  # 1
    """Active dispatch status"""
    DISPATCH_STATUS_INACTIVE: _DispatchStatus.ValueType  # 2
    """Inactive dispatch status"""
    DISPATCH_STATUS_SIMULATE: _DispatchStatus.ValueType  # 3
    """Simulated dispatch status"""

class DispatchStatus(_DispatchStatus, metaclass=_DispatchStatusEnumTypeWrapper):
    """Possible dispatch statuses"""

DISPATCH_STATUS_UNSPECIFIED: DispatchStatus.ValueType  # 0
"""Unspecified dispatch status, used mainly for error handling"""
DISPATCH_STATUS_ACTIVE: DispatchStatus.ValueType  # 1
"""Active dispatch status"""
DISPATCH_STATUS_INACTIVE: DispatchStatus.ValueType  # 2
"""Inactive dispatch status"""
DISPATCH_STATUS_SIMULATE: DispatchStatus.ValueType  # 3
"""Simulated dispatch status"""
global___DispatchStatus = DispatchStatus

@typing_extensions.final
class TimeIntervalFilter(google.protobuf.message.Message):
    """Filter parameter for specifying multiple time intervals"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_FROM_FIELD_NUMBER: builtins.int
    START_TO_FIELD_NUMBER: builtins.int
    END_FROM_FIELD_NUMBER: builtins.int
    END_TO_FIELD_NUMBER: builtins.int
    @property
    def start_from(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Filter by start_time >= this timestamp"""
    @property
    def start_to(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Filter by start_time < this timestamp"""
    @property
    def end_from(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Filter by end_time >= this timestamp"""
    @property
    def end_to(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Filter by end_time < this timestamp"""
    def __init__(
        self,
        *,
        start_from: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        start_to: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_from: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_to: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_from", b"end_from", "end_to", b"end_to", "start_from", b"start_from", "start_to", b"start_to"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_from", b"end_from", "end_to", b"end_to", "start_from", b"start_from", "start_to", b"start_to"]) -> None: ...

global___TimeIntervalFilter = TimeIntervalFilter

@typing_extensions.final
class DispatchComponentSelector(google.protobuf.message.Message):
    """Parameter for controlling which components a dispatch applies to
    Either a set of component IDs, or all components belonging to a category
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DISPATCH_COMPONENT_IDS_FIELD_NUMBER: builtins.int
    DISPATCH_COMPONENT_CATEGORY_FIELD_NUMBER: builtins.int
    @property
    def dispatch_component_ids(self) -> global___DispatchComponentIDs:
        """Set of component IDs"""
    dispatch_component_category: frequenz.api.common.components_pb2.ComponentCategory.ValueType
    """Component category"""
    def __init__(
        self,
        *,
        dispatch_component_ids: global___DispatchComponentIDs | None = ...,
        dispatch_component_category: frequenz.api.common.components_pb2.ComponentCategory.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dispatch_component_category", b"dispatch_component_category", "dispatch_component_ids", b"dispatch_component_ids", "selector", b"selector"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dispatch_component_category", b"dispatch_component_category", "dispatch_component_ids", b"dispatch_component_ids", "selector", b"selector"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["selector", b"selector"]) -> typing_extensions.Literal["dispatch_component_ids", "dispatch_component_category"] | None: ...

global___DispatchComponentSelector = DispatchComponentSelector

@typing_extensions.final
class DispatchComponentIDs(google.protobuf.message.Message):
    """Wrapper for controlling dispatches with a set of component IDs"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_IDS_FIELD_NUMBER: builtins.int
    @property
    def component_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Set of component IDs"""
    def __init__(
        self,
        *,
        component_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["component_ids", b"component_ids"]) -> None: ...

global___DispatchComponentIDs = DispatchComponentIDs

@typing_extensions.final
class DispatchFilter(google.protobuf.message.Message):
    """Parameters for filtering the dispatch list"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    MICROGRID_IDS_FIELD_NUMBER: builtins.int
    TYPES_FIELD_NUMBER: builtins.int
    SELECTORS_FIELD_NUMBER: builtins.int
    TIME_INTERVAL_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Filter by dispatch ID"""
    @property
    def microgrid_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Filter by microgrid ID"""
    @property
    def types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___DispatchType.ValueType]:
        """Filter by dispatch type"""
    @property
    def selectors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DispatchComponentSelector]:
        """Filter by component ID or category"""
    @property
    def time_interval(self) -> global___TimeIntervalFilter:
        """Filter by time interval"""
    def __init__(
        self,
        *,
        ids: collections.abc.Iterable[builtins.int] | None = ...,
        microgrid_ids: collections.abc.Iterable[builtins.int] | None = ...,
        types: collections.abc.Iterable[global___DispatchType.ValueType] | None = ...,
        selectors: collections.abc.Iterable[global___DispatchComponentSelector] | None = ...,
        time_interval: global___TimeIntervalFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time_interval", b"time_interval"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ids", b"ids", "microgrid_ids", b"microgrid_ids", "selectors", b"selectors", "time_interval", b"time_interval", "types", b"types"]) -> None: ...

global___DispatchFilter = DispatchFilter

@typing_extensions.final
class DispatchSettings(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FCR_PREQUAL_SETTINGS_FIELD_NUMBER: builtins.int
    @property
    def fcr_prequal_settings(self) -> frequenz.api.dispatch.fcr.prequalification_pb2.FcrPrequalificationSettings: ...
    def __init__(
        self,
        *,
        fcr_prequal_settings: frequenz.api.dispatch.fcr.prequalification_pb2.FcrPrequalificationSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fcr_prequal_settings", b"fcr_prequal_settings", "settings", b"settings"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fcr_prequal_settings", b"fcr_prequal_settings", "settings", b"settings"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["settings", b"settings"]) -> typing_extensions.Literal["fcr_prequal_settings"] | None: ...

global___DispatchSettings = DispatchSettings

@typing_extensions.final
class Dispatch(google.protobuf.message.Message):
    """Message representing one dispatch"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MICROGRID_ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    SELECTOR_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    SETTINGS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The dispatch identifier"""
    microgrid_id: builtins.int
    """The microgrid identifier"""
    type: global___DispatchType.ValueType
    """The type of dispatch"""
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The start time"""
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The end time"""
    @property
    def selector(self) -> global___DispatchComponentSelector:
        """The component selector"""
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The creation time"""
    status: global___DispatchStatus.ValueType
    """The dispatch status"""
    @property
    def settings(self) -> global___DispatchSettings:
        """The dispatch settings"""
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        microgrid_id: builtins.int = ...,
        type: global___DispatchType.ValueType = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        selector: global___DispatchComponentSelector | None = ...,
        create_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        status: global___DispatchStatus.ValueType = ...,
        settings: global___DispatchSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time", b"create_time", "end_time", b"end_time", "selector", b"selector", "settings", b"settings", "start_time", b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time", b"create_time", "end_time", b"end_time", "id", b"id", "microgrid_id", b"microgrid_id", "selector", b"selector", "settings", b"settings", "start_time", b"start_time", "status", b"status", "type", b"type"]) -> None: ...

global___Dispatch = Dispatch

@typing_extensions.final
class DispatchList(google.protobuf.message.Message):
    """A list of dispatches"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DISPATCHES_FIELD_NUMBER: builtins.int
    @property
    def dispatches(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Dispatch]:
        """The dispatches"""
    def __init__(
        self,
        *,
        dispatches: collections.abc.Iterable[global___Dispatch] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dispatches", b"dispatches"]) -> None: ...

global___DispatchList = DispatchList

@typing_extensions.final
class DispatchCreateRequest(google.protobuf.message.Message):
    """Message to create a new dispatch with the given attributes"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MICROGRID_ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    SELECTOR_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    SETTINGS_FIELD_NUMBER: builtins.int
    microgrid_id: builtins.int
    """The microgrid identifier"""
    type: global___DispatchType.ValueType
    """The type of dispatch"""
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The start time"""
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The end time"""
    @property
    def selector(self) -> global___DispatchComponentSelector:
        """The component selector"""
    status: global___DispatchStatus.ValueType
    """The dispatch status"""
    @property
    def settings(self) -> global___DispatchSettings:
        """The dispatch settings"""
    def __init__(
        self,
        *,
        microgrid_id: builtins.int = ...,
        type: global___DispatchType.ValueType = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        selector: global___DispatchComponentSelector | None = ...,
        status: global___DispatchStatus.ValueType = ...,
        settings: global___DispatchSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time", b"end_time", "selector", b"selector", "settings", b"settings", "start_time", b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_time", b"end_time", "microgrid_id", b"microgrid_id", "selector", b"selector", "settings", b"settings", "start_time", b"start_time", "status", b"status", "type", b"type"]) -> None: ...

global___DispatchCreateRequest = DispatchCreateRequest

@typing_extensions.final
class DispatchUpdateRequest(google.protobuf.message.Message):
    """Message to update the dispatch with the given ID, with the given attributes"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MICROGRID_ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    SELECTOR_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    SETTINGS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The dispatch identifier"""
    microgrid_id: builtins.int
    """The microgrid identifier"""
    type: global___DispatchType.ValueType
    """The type of dispatch"""
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The start time"""
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The end time"""
    @property
    def selector(self) -> global___DispatchComponentSelector:
        """The component selector"""
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The creation time"""
    status: global___DispatchStatus.ValueType
    """The dispatch status"""
    @property
    def settings(self) -> global___DispatchSettings:
        """The dispatch settings"""
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        microgrid_id: builtins.int | None = ...,
        type: global___DispatchType.ValueType | None = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        selector: global___DispatchComponentSelector | None = ...,
        create_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        status: global___DispatchStatus.ValueType | None = ...,
        settings: global___DispatchSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_create_time", b"_create_time", "_end_time", b"_end_time", "_microgrid_id", b"_microgrid_id", "_selector", b"_selector", "_settings", b"_settings", "_start_time", b"_start_time", "_status", b"_status", "_type", b"_type", "create_time", b"create_time", "end_time", b"end_time", "microgrid_id", b"microgrid_id", "selector", b"selector", "settings", b"settings", "start_time", b"start_time", "status", b"status", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_create_time", b"_create_time", "_end_time", b"_end_time", "_microgrid_id", b"_microgrid_id", "_selector", b"_selector", "_settings", b"_settings", "_start_time", b"_start_time", "_status", b"_status", "_type", b"_type", "create_time", b"create_time", "end_time", b"end_time", "id", b"id", "microgrid_id", b"microgrid_id", "selector", b"selector", "settings", b"settings", "start_time", b"start_time", "status", b"status", "type", b"type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_create_time", b"_create_time"]) -> typing_extensions.Literal["create_time"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_end_time", b"_end_time"]) -> typing_extensions.Literal["end_time"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_microgrid_id", b"_microgrid_id"]) -> typing_extensions.Literal["microgrid_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_selector", b"_selector"]) -> typing_extensions.Literal["selector"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_settings", b"_settings"]) -> typing_extensions.Literal["settings"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_start_time", b"_start_time"]) -> typing_extensions.Literal["start_time"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_status", b"_status"]) -> typing_extensions.Literal["status"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_type", b"_type"]) -> typing_extensions.Literal["type"] | None: ...

global___DispatchUpdateRequest = DispatchUpdateRequest
