"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
FCR prequalificaton dispatch settings protobuf definition.

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
All rights reserved.
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class FcrPrequalificationSettings(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    POWER_LIMIT_PREPARATION_FIELD_NUMBER: builtins.int
    POWER_LIMIT_OPERATION_FIELD_NUMBER: builtins.int
    SOC_BOUND_UPPER_FIELD_NUMBER: builtins.int
    SOC_BOUND_LOWER_FIELD_NUMBER: builtins.int
    power_limit_preparation: builtins.int
    """The maximum power to use during the SoC preparation phase."""
    power_limit_operation: builtins.int
    """The maximum power to use during the operation phase."""
    soc_bound_upper: builtins.int
    """The upper SoC bound."""
    soc_bound_lower: builtins.int
    """The lower SoC bound."""
    def __init__(
        self,
        *,
        power_limit_preparation: builtins.int | None = ...,
        power_limit_operation: builtins.int | None = ...,
        soc_bound_upper: builtins.int | None = ...,
        soc_bound_lower: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_power_limit_operation", b"_power_limit_operation", "_power_limit_preparation", b"_power_limit_preparation", "_soc_bound_lower", b"_soc_bound_lower", "_soc_bound_upper", b"_soc_bound_upper", "power_limit_operation", b"power_limit_operation", "power_limit_preparation", b"power_limit_preparation", "soc_bound_lower", b"soc_bound_lower", "soc_bound_upper", b"soc_bound_upper"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_power_limit_operation", b"_power_limit_operation", "_power_limit_preparation", b"_power_limit_preparation", "_soc_bound_lower", b"_soc_bound_lower", "_soc_bound_upper", b"_soc_bound_upper", "power_limit_operation", b"power_limit_operation", "power_limit_preparation", b"power_limit_preparation", "soc_bound_lower", b"soc_bound_lower", "soc_bound_upper", b"soc_bound_upper"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_power_limit_operation", b"_power_limit_operation"]) -> typing_extensions.Literal["power_limit_operation"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_power_limit_preparation", b"_power_limit_preparation"]) -> typing_extensions.Literal["power_limit_preparation"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_soc_bound_lower", b"_soc_bound_lower"]) -> typing_extensions.Literal["soc_bound_lower"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_soc_bound_upper", b"_soc_bound_upper"]) -> typing_extensions.Literal["soc_bound_upper"] | None: ...

global___FcrPrequalificationSettings = FcrPrequalificationSettings
